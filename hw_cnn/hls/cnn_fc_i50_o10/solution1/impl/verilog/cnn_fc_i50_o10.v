// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cnn_fc_i50_o10,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.570000,HLS_SYN_LAT=96,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=40,HLS_SYN_FF=3659,HLS_SYN_LUT=6748}" *)

module cnn_fc_i50_o10 (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 9'b1;
parameter    ap_ST_fsm_state2 = 9'b10;
parameter    ap_ST_fsm_state3 = 9'b100;
parameter    ap_ST_fsm_pp1_stage0 = 9'b1000;
parameter    ap_ST_fsm_state6 = 9'b10000;
parameter    ap_ST_fsm_pp2_stage0 = 9'b100000;
parameter    ap_ST_fsm_state16 = 9'b1000000;
parameter    ap_ST_fsm_pp3_stage0 = 9'b10000000;
parameter    ap_ST_fsm_state20 = 9'b100000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_7 = 4'b111;
parameter    ap_const_lv4_6 = 4'b110;
parameter    ap_const_lv4_5 = 4'b101;
parameter    ap_const_lv4_4 = 4'b100;
parameter    ap_const_lv4_3 = 4'b11;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv6_32 = 6'b110010;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv4_9 = 4'b1001;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_8 = 32'b1000;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (C_S_AXI_CTRL_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1 : 0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1 : 0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1 : 0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1 : 0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1 : 0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [31:0] inStream_V_data_V_0_payload_A;
reg   [31:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
wire    inStream_V_dest_V_0_vld_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [1:0] inStream_V_dest_V_0_state;
reg   [31:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [31:0] outStream_V_data_V_1_payload_A;
reg   [31:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
wire   [3:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg    outStream_V_keep_V_1_sel_rd;
wire    outStream_V_keep_V_1_sel;
reg   [1:0] outStream_V_keep_V_1_state;
wire   [3:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg    outStream_V_strb_V_1_sel_rd;
wire    outStream_V_strb_V_1_sel;
reg   [1:0] outStream_V_strb_V_1_state;
wire   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg    outStream_V_user_V_1_sel_rd;
wire    outStream_V_user_V_1_sel;
reg   [1:0] outStream_V_user_V_1_state;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
wire   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg    outStream_V_id_V_1_sel_rd;
wire    outStream_V_id_V_1_sel;
reg   [1:0] outStream_V_id_V_1_state;
wire   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg    outStream_V_dest_V_1_sel_rd;
wire    outStream_V_dest_V_1_sel;
reg   [1:0] outStream_V_dest_V_1_state;
wire   [5:0] weight_0_address0;
reg    weight_0_ce0;
wire   [31:0] weight_0_q0;
wire   [5:0] weight_1_address0;
reg    weight_1_ce0;
wire   [31:0] weight_1_q0;
wire   [5:0] weight_2_address0;
reg    weight_2_ce0;
wire   [31:0] weight_2_q0;
wire   [5:0] weight_3_address0;
reg    weight_3_ce0;
wire   [31:0] weight_3_q0;
wire   [5:0] weight_4_address0;
reg    weight_4_ce0;
wire   [31:0] weight_4_q0;
wire   [5:0] weight_5_address0;
reg    weight_5_ce0;
wire   [31:0] weight_5_q0;
wire   [5:0] weight_6_address0;
reg    weight_6_ce0;
wire   [31:0] weight_6_q0;
wire   [5:0] weight_7_address0;
reg    weight_7_ce0;
wire   [31:0] weight_7_q0;
wire   [5:0] weight_8_address0;
reg    weight_8_ce0;
wire   [31:0] weight_8_q0;
wire   [5:0] weight_9_address0;
reg    weight_9_ce0;
wire   [31:0] weight_9_q0;
wire   [3:0] bias_address0;
reg    bias_ce0;
wire   [31:0] bias_q0;
wire   [31:0] ctrl;
reg    inStream_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] exitcond3_reg_1800;
reg    outStream_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] exitcond_reg_1914;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] ap_pipeline_reg_pp3_iter1_exitcond_reg_1914;
reg   [31:0] result_9_2_reg_491;
reg   [31:0] result_8_2_reg_502;
reg   [31:0] result_9_7_reg_513;
reg   [31:0] result_9_9_reg_524;
reg   [31:0] result_9_20_reg_535;
reg   [31:0] result_9_3_reg_546;
reg   [31:0] result_9_11_reg_557;
reg   [31:0] result_9_13_reg_568;
reg   [31:0] result_9_15_reg_579;
reg   [31:0] result_9_17_reg_590;
reg   [3:0] i1_reg_601;
reg   [31:0] result_9_4_reg_613;
reg   [31:0] result_8_4_reg_624;
reg   [31:0] result_7_4_reg_635;
reg   [31:0] result_6_4_reg_646;
reg   [31:0] result_5_4_reg_657;
reg   [31:0] result_4_4_reg_668;
reg   [31:0] result_3_4_reg_679;
reg   [31:0] result_2_4_reg_690;
reg   [31:0] result_1_4_reg_701;
reg   [31:0] result_0_4_reg_712;
reg   [5:0] row_reg_723;
reg   [3:0] writeCount_assign_reg_734;
reg   [31:0] ctrl_read_reg_1673;
wire   [3:0] i_1_fu_822_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [31:0] newSel1_fu_932_p3;
wire   [0:0] exitcond1_fu_816_p2;
wire   [31:0] newSel3_fu_948_p3;
wire   [31:0] newSel7_fu_980_p3;
wire   [31:0] newSel10_fu_1004_p3;
wire   [31:0] newSel13_fu_1028_p3;
wire   [31:0] newSel15_fu_1044_p3;
wire   [31:0] newSel18_fu_1068_p3;
wire   [31:0] newSel20_fu_1084_p3;
wire   [31:0] result_1_s_fu_1100_p3;
wire   [31:0] result_0_s_fu_1108_p3;
wire   [0:0] exitcond2_fu_1116_p2;
reg   [0:0] exitcond2_reg_1736;
wire   [0:0] ap_CS_fsm_pp1_stage0;
wire   [3:0] i_2_fu_1122_p2;
reg   [3:0] i_2_reg_1740;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] result_9_5_fu_1269_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] result_9_6_fu_1285_p3;
wire   [31:0] result_9_8_fu_1317_p3;
wire   [31:0] result_9_10_fu_1341_p3;
wire   [31:0] result_9_12_fu_1365_p3;
wire   [31:0] result_9_14_fu_1381_p3;
wire   [31:0] result_9_16_fu_1405_p3;
wire   [31:0] result_9_18_fu_1421_p3;
wire   [31:0] result_9_22_fu_1437_p3;
wire   [31:0] result_9_23_fu_1445_p3;
wire   [0:0] exitcond3_fu_1453_p2;
reg   [0:0] ap_pipeline_reg_pp2_iter1_exitcond3_reg_1800;
reg   [0:0] ap_pipeline_reg_pp2_iter2_exitcond3_reg_1800;
reg   [0:0] ap_pipeline_reg_pp2_iter3_exitcond3_reg_1800;
reg   [0:0] ap_pipeline_reg_pp2_iter4_exitcond3_reg_1800;
reg   [0:0] ap_pipeline_reg_pp2_iter5_exitcond3_reg_1800;
reg   [0:0] ap_pipeline_reg_pp2_iter6_exitcond3_reg_1800;
reg   [0:0] ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800;
wire   [5:0] row_1_fu_1459_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [31:0] result_0_1_fu_1497_p2;
reg    ap_enable_reg_pp2_iter8;
wire   [31:0] result_1_1_fu_1507_p2;
wire   [31:0] result_2_1_fu_1517_p2;
wire   [31:0] result_3_1_fu_1527_p2;
wire   [31:0] result_4_1_fu_1537_p2;
wire   [31:0] result_5_1_fu_1547_p2;
wire   [31:0] result_6_1_fu_1557_p2;
wire   [31:0] result_7_1_fu_1567_p2;
wire   [31:0] result_8_1_fu_1577_p2;
wire   [31:0] result_9_1_fu_1587_p2;
wire   [0:0] tmp_8_fu_1593_p1;
reg   [0:0] tmp_8_reg_1909;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] exitcond_fu_1596_p2;
wire   [3:0] col_fu_1602_p2;
reg   [3:0] col_reg_1918;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] tmp_last_V_fu_1608_p2;
wire   [31:0] data_fu_1665_p3;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state6;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
wire   [22:0] grp_fixed_point_mul_fu_746_ap_return;
reg    grp_fixed_point_mul_fu_746_ap_ce;
wire   [22:0] grp_fixed_point_mul_fu_753_ap_return;
reg    grp_fixed_point_mul_fu_753_ap_ce;
wire   [22:0] grp_fixed_point_mul_fu_760_ap_return;
reg    grp_fixed_point_mul_fu_760_ap_ce;
wire   [22:0] grp_fixed_point_mul_fu_767_ap_return;
reg    grp_fixed_point_mul_fu_767_ap_ce;
wire   [22:0] grp_fixed_point_mul_fu_774_ap_return;
reg    grp_fixed_point_mul_fu_774_ap_ce;
wire   [22:0] grp_fixed_point_mul_fu_781_ap_return;
reg    grp_fixed_point_mul_fu_781_ap_ce;
wire   [22:0] grp_fixed_point_mul_fu_788_ap_return;
reg    grp_fixed_point_mul_fu_788_ap_ce;
wire   [22:0] grp_fixed_point_mul_fu_795_ap_return;
reg    grp_fixed_point_mul_fu_795_ap_ce;
wire   [22:0] grp_fixed_point_mul_fu_802_ap_return;
reg    grp_fixed_point_mul_fu_802_ap_ce;
wire   [22:0] grp_fixed_point_mul_fu_809_ap_return;
reg    grp_fixed_point_mul_fu_809_ap_ce;
reg   [31:0] result_9_reg_360;
reg   [31:0] result_8_reg_372;
reg   [31:0] result_7_reg_384;
reg   [31:0] result_6_reg_396;
reg   [31:0] result_5_reg_408;
reg   [31:0] result_4_reg_420;
reg   [31:0] result_3_reg_432;
reg   [31:0] result_2_reg_444;
reg   [31:0] result_1_reg_456;
reg   [31:0] result_0_reg_468;
reg   [3:0] i_reg_480;
reg   [3:0] i1_phi_fu_605_p4;
reg   [3:0] writeCount_assign_phi_fu_738_p4;
wire   [31:0] i1_cast_fu_1128_p1;
wire   [31:0] row_cast_fu_1465_p1;
wire   [0:0] sel_tmp8_fu_876_p2;
wire   [0:0] sel_tmp7_fu_870_p2;
wire   [0:0] sel_tmp6_fu_864_p2;
wire   [0:0] sel_tmp5_fu_858_p2;
wire   [0:0] sel_tmp4_fu_852_p2;
wire   [0:0] sel_tmp3_fu_846_p2;
wire   [0:0] sel_tmp2_fu_840_p2;
wire   [0:0] sel_tmp1_fu_834_p2;
wire   [0:0] sel_tmp_fu_828_p2;
wire   [0:0] or_cond_fu_882_p2;
wire   [0:0] or_cond1_fu_888_p2;
wire   [0:0] or_cond2_fu_894_p2;
wire   [0:0] or_cond3_fu_900_p2;
wire   [0:0] or_cond4_fu_914_p2;
wire   [0:0] or_cond5_fu_920_p2;
wire   [0:0] or_cond6_fu_926_p2;
wire   [31:0] newSel_fu_906_p3;
wire   [31:0] newSel2_fu_940_p3;
wire   [31:0] newSel4_fu_956_p3;
wire   [31:0] newSel5_fu_964_p3;
wire   [31:0] newSel6_fu_972_p3;
wire   [31:0] newSel8_fu_988_p3;
wire   [31:0] newSel9_fu_996_p3;
wire   [31:0] newSel11_fu_1012_p3;
wire   [31:0] newSel12_fu_1020_p3;
wire   [31:0] newSel14_fu_1036_p3;
wire   [31:0] newSel16_fu_1052_p3;
wire   [31:0] newSel17_fu_1060_p3;
wire   [31:0] newSel19_fu_1076_p3;
wire   [31:0] sel_tmp9_fu_1092_p3;
wire   [31:0] tmp_1_fu_1133_p12;
wire   [0:0] sel_tmp18_fu_1213_p2;
wire   [0:0] sel_tmp17_fu_1207_p2;
wire   [0:0] sel_tmp16_fu_1201_p2;
wire   [0:0] sel_tmp15_fu_1195_p2;
wire   [0:0] sel_tmp14_fu_1189_p2;
wire   [0:0] sel_tmp13_fu_1183_p2;
wire   [0:0] sel_tmp12_fu_1177_p2;
wire   [0:0] sel_tmp11_fu_1171_p2;
wire   [0:0] sel_tmp10_fu_1165_p2;
wire   [31:0] result_9_24_fu_1159_p2;
wire   [0:0] or_cond7_fu_1219_p2;
wire   [0:0] or_cond8_fu_1225_p2;
wire   [0:0] or_cond9_fu_1231_p2;
wire   [0:0] or_cond10_fu_1237_p2;
wire   [0:0] or_cond11_fu_1251_p2;
wire   [0:0] or_cond12_fu_1257_p2;
wire   [0:0] or_cond13_fu_1263_p2;
wire   [31:0] newSel21_fu_1243_p3;
wire   [31:0] newSel22_fu_1277_p3;
wire   [31:0] newSel23_fu_1293_p3;
wire   [31:0] newSel24_fu_1301_p3;
wire   [31:0] newSel25_fu_1309_p3;
wire   [31:0] newSel26_fu_1325_p3;
wire   [31:0] newSel27_fu_1333_p3;
wire   [31:0] newSel28_fu_1349_p3;
wire   [31:0] newSel29_fu_1357_p3;
wire   [31:0] newSel30_fu_1373_p3;
wire   [31:0] newSel31_fu_1389_p3;
wire   [31:0] newSel32_fu_1397_p3;
wire   [31:0] newSel33_fu_1413_p3;
wire   [31:0] result_9_21_fu_1429_p3;
wire  signed [31:0] result_0_1_trunc_ex_fu_1493_p1;
wire  signed [31:0] result_1_1_trunc_ex_fu_1503_p1;
wire  signed [31:0] result_2_1_trunc_ex_fu_1513_p1;
wire  signed [31:0] result_3_1_trunc_ex_fu_1523_p1;
wire  signed [31:0] result_4_1_trunc_ex_fu_1533_p1;
wire  signed [31:0] result_5_1_trunc_ex_fu_1543_p1;
wire  signed [31:0] result_6_1_trunc_ex_fu_1553_p1;
wire  signed [31:0] result_7_1_trunc_ex_fu_1563_p1;
wire  signed [31:0] result_8_1_trunc_ex_fu_1573_p1;
wire  signed [31:0] result_9_1_trunc_ex_fu_1583_p1;
wire   [31:0] data_1_fu_1615_p12;
wire   [0:0] tmp_10_fu_1645_p3;
wire   [30:0] tmp_9_fu_1641_p1;
wire   [30:0] data_2_fu_1653_p3;
wire   [31:0] data_2_cast_fu_1661_p1;
wire   [0:0] ap_CS_fsm_state20;
reg    ap_condition_1889;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'b1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'b00;
#0 inStream_V_dest_V_0_state = 2'b00;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'b00;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_state = 2'b00;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_state = 2'b00;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_state = 2'b00;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'b00;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_state = 2'b00;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_state = 2'b00;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
end

cnn_fc_i50_o10_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
cnn_fc_i50_o10_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .weight_0_address0(weight_0_address0),
    .weight_0_ce0(weight_0_ce0),
    .weight_0_q0(weight_0_q0),
    .weight_1_address0(weight_1_address0),
    .weight_1_ce0(weight_1_ce0),
    .weight_1_q0(weight_1_q0),
    .weight_2_address0(weight_2_address0),
    .weight_2_ce0(weight_2_ce0),
    .weight_2_q0(weight_2_q0),
    .weight_3_address0(weight_3_address0),
    .weight_3_ce0(weight_3_ce0),
    .weight_3_q0(weight_3_q0),
    .weight_4_address0(weight_4_address0),
    .weight_4_ce0(weight_4_ce0),
    .weight_4_q0(weight_4_q0),
    .weight_5_address0(weight_5_address0),
    .weight_5_ce0(weight_5_ce0),
    .weight_5_q0(weight_5_q0),
    .weight_6_address0(weight_6_address0),
    .weight_6_ce0(weight_6_ce0),
    .weight_6_q0(weight_6_q0),
    .weight_7_address0(weight_7_address0),
    .weight_7_ce0(weight_7_ce0),
    .weight_7_q0(weight_7_q0),
    .weight_8_address0(weight_8_address0),
    .weight_8_ce0(weight_8_ce0),
    .weight_8_q0(weight_8_q0),
    .weight_9_address0(weight_9_address0),
    .weight_9_ce0(weight_9_ce0),
    .weight_9_q0(weight_9_q0),
    .bias_address0(bias_address0),
    .bias_ce0(bias_ce0),
    .bias_q0(bias_q0),
    .ctrl(ctrl)
);

fixed_point_mul grp_fixed_point_mul_fu_746(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .a(inStream_V_data_V_0_data_out),
    .b(weight_0_q0),
    .ap_return(grp_fixed_point_mul_fu_746_ap_return),
    .ap_ce(grp_fixed_point_mul_fu_746_ap_ce)
);

fixed_point_mul grp_fixed_point_mul_fu_753(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .a(inStream_V_data_V_0_data_out),
    .b(weight_1_q0),
    .ap_return(grp_fixed_point_mul_fu_753_ap_return),
    .ap_ce(grp_fixed_point_mul_fu_753_ap_ce)
);

fixed_point_mul grp_fixed_point_mul_fu_760(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .a(inStream_V_data_V_0_data_out),
    .b(weight_2_q0),
    .ap_return(grp_fixed_point_mul_fu_760_ap_return),
    .ap_ce(grp_fixed_point_mul_fu_760_ap_ce)
);

fixed_point_mul grp_fixed_point_mul_fu_767(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .a(inStream_V_data_V_0_data_out),
    .b(weight_3_q0),
    .ap_return(grp_fixed_point_mul_fu_767_ap_return),
    .ap_ce(grp_fixed_point_mul_fu_767_ap_ce)
);

fixed_point_mul grp_fixed_point_mul_fu_774(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .a(inStream_V_data_V_0_data_out),
    .b(weight_4_q0),
    .ap_return(grp_fixed_point_mul_fu_774_ap_return),
    .ap_ce(grp_fixed_point_mul_fu_774_ap_ce)
);

fixed_point_mul grp_fixed_point_mul_fu_781(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .a(inStream_V_data_V_0_data_out),
    .b(weight_5_q0),
    .ap_return(grp_fixed_point_mul_fu_781_ap_return),
    .ap_ce(grp_fixed_point_mul_fu_781_ap_ce)
);

fixed_point_mul grp_fixed_point_mul_fu_788(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .a(inStream_V_data_V_0_data_out),
    .b(weight_6_q0),
    .ap_return(grp_fixed_point_mul_fu_788_ap_return),
    .ap_ce(grp_fixed_point_mul_fu_788_ap_ce)
);

fixed_point_mul grp_fixed_point_mul_fu_795(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .a(inStream_V_data_V_0_data_out),
    .b(weight_7_q0),
    .ap_return(grp_fixed_point_mul_fu_795_ap_return),
    .ap_ce(grp_fixed_point_mul_fu_795_ap_ce)
);

fixed_point_mul grp_fixed_point_mul_fu_802(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .a(inStream_V_data_V_0_data_out),
    .b(weight_8_q0),
    .ap_return(grp_fixed_point_mul_fu_802_ap_return),
    .ap_ce(grp_fixed_point_mul_fu_802_ap_ce)
);

fixed_point_mul grp_fixed_point_mul_fu_809(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .a(inStream_V_data_V_0_data_out),
    .b(weight_9_q0),
    .ap_return(grp_fixed_point_mul_fu_809_ap_return),
    .ap_ce(grp_fixed_point_mul_fu_809_ap_ce)
);

cnn_fc_i50_o10_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
cnn_fc_i50_o10_mucud_U3(
    .din1(result_9_17_reg_590),
    .din2(result_9_15_reg_579),
    .din3(result_9_13_reg_568),
    .din4(result_9_11_reg_557),
    .din5(result_9_3_reg_546),
    .din6(result_9_20_reg_535),
    .din7(result_9_9_reg_524),
    .din8(result_9_7_reg_513),
    .din9(result_8_2_reg_502),
    .din10(result_9_2_reg_491),
    .din11(i1_reg_601),
    .dout(tmp_1_fu_1133_p12)
);

cnn_fc_i50_o10_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
cnn_fc_i50_o10_mucud_U4(
    .din1(result_0_4_reg_712),
    .din2(result_1_4_reg_701),
    .din3(result_2_4_reg_690),
    .din4(result_3_4_reg_679),
    .din5(result_4_4_reg_668),
    .din6(result_5_4_reg_657),
    .din7(result_6_4_reg_646),
    .din8(result_7_4_reg_635),
    .din9(result_8_4_reg_624),
    .din10(result_9_4_reg_613),
    .din11(writeCount_assign_reg_734),
    .dout(data_1_fu_1615_p12)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~(1'b0 == exitcond2_fu_1116_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == exitcond2_fu_1116_p2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp1_stage0) & ~(1'b0 == exitcond2_fu_1116_p2)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & ~(1'b0 == exitcond3_fu_1453_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b0 == exitcond3_fu_1453_p2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & ~(1'b0 == exitcond3_fu_1453_p2)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0))) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0))) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0))) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0))) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))) & ~(1'b0 == exitcond_fu_1596_p2))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))) & (1'b0 == exitcond_fu_1596_p2))) begin
            ap_enable_reg_pp3_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_pp3_stage0) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))) & ~(1'b0 == exitcond_fu_1596_p2)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_data_V_0_ack_out) & (1'b1 == inStream_V_data_V_0_vld_out))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_data_V_0_vld_in) & (1'b1 == inStream_V_data_V_0_ack_in))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_data_V_0_vld_in) & (1'b1 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == inStream_V_data_V_0_vld_in) & (inStream_V_data_V_0_state == ap_const_lv2_2)))) begin
            inStream_V_data_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_data_V_0_vld_in) & (1'b0 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_1)))) begin
            inStream_V_data_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_data_V_0_vld_in) & (inStream_V_data_V_0_state == ap_const_lv2_2)) | ((1'b1 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_1)) | ((inStream_V_data_V_0_state == ap_const_lv2_3) & ~((1'b1 == inStream_V_data_V_0_vld_in) & (1'b0 == inStream_V_data_V_0_ack_out)) & ~((1'b0 == inStream_V_data_V_0_vld_in) & (1'b1 == inStream_V_data_V_0_ack_out))))) begin
            inStream_V_data_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_data_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_dest_V_0_vld_in) & (1'b1 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_dest_V_0_state)) | ((1'b0 == inStream_V_dest_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_dest_V_0_state)))) begin
            inStream_V_dest_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_dest_V_0_vld_in) & (1'b0 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_dest_V_0_state)) | ((1'b0 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_dest_V_0_state)))) begin
            inStream_V_dest_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_dest_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_dest_V_0_state)) | ((1'b1 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_dest_V_0_state)) | ((ap_const_lv2_3 == inStream_V_dest_V_0_state) & ~((1'b1 == inStream_V_dest_V_0_vld_in) & (1'b0 == inStream_V_dest_V_0_ack_out)) & ~((1'b0 == inStream_V_dest_V_0_vld_in) & (1'b1 == inStream_V_dest_V_0_ack_out))))) begin
            inStream_V_dest_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_dest_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_data_V_1_ack_out) & (1'b1 == outStream_V_data_V_1_vld_out))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_data_V_1_vld_in) & (1'b1 == outStream_V_data_V_1_ack_in))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_data_V_1_vld_in) & (1'b1 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_data_V_1_state)) | ((1'b0 == outStream_V_data_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_data_V_1_state)))) begin
            outStream_V_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_data_V_1_vld_in) & (1'b0 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_data_V_1_state)) | ((1'b0 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_data_V_1_state)))) begin
            outStream_V_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_data_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_data_V_1_state)) | ((1'b1 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_data_V_1_state)) | ((ap_const_lv2_3 == outStream_V_data_V_1_state) & ~((1'b1 == outStream_V_data_V_1_vld_in) & (1'b0 == outStream_V_data_V_1_ack_out)) & ~((1'b0 == outStream_V_data_V_1_vld_in) & (1'b1 == outStream_V_data_V_1_ack_out))))) begin
            outStream_V_data_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_dest_V_1_ack_out) & (1'b1 == outStream_V_dest_V_1_vld_out))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_dest_V_1_vld_in) & (1'b1 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_dest_V_1_state)) | ((1'b0 == outStream_V_dest_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_dest_V_1_state)))) begin
            outStream_V_dest_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_dest_V_1_vld_in) & (1'b0 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_dest_V_1_state)) | ((1'b0 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_dest_V_1_state)))) begin
            outStream_V_dest_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_dest_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_dest_V_1_state)) | ((1'b1 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_dest_V_1_state)) | ((ap_const_lv2_3 == outStream_V_dest_V_1_state) & ~((1'b1 == outStream_V_dest_V_1_vld_in) & (1'b0 == outStream_V_dest_V_1_ack_out)) & ~((1'b0 == outStream_V_dest_V_1_vld_in) & (1'b1 == outStream_V_dest_V_1_ack_out))))) begin
            outStream_V_dest_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_dest_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_id_V_1_ack_out) & (1'b1 == outStream_V_id_V_1_vld_out))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_id_V_1_vld_in) & (1'b1 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_id_V_1_state)) | ((1'b0 == outStream_V_id_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_id_V_1_state)))) begin
            outStream_V_id_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_id_V_1_vld_in) & (1'b0 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_id_V_1_state)) | ((1'b0 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_id_V_1_state)))) begin
            outStream_V_id_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_id_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_id_V_1_state)) | ((1'b1 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_id_V_1_state)) | ((ap_const_lv2_3 == outStream_V_id_V_1_state) & ~((1'b1 == outStream_V_id_V_1_vld_in) & (1'b0 == outStream_V_id_V_1_ack_out)) & ~((1'b0 == outStream_V_id_V_1_vld_in) & (1'b1 == outStream_V_id_V_1_ack_out))))) begin
            outStream_V_id_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_id_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_keep_V_1_ack_out) & (1'b1 == outStream_V_keep_V_1_vld_out))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_keep_V_1_vld_in) & (1'b1 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_keep_V_1_state)) | ((1'b0 == outStream_V_keep_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_keep_V_1_state)))) begin
            outStream_V_keep_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_keep_V_1_vld_in) & (1'b0 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_keep_V_1_state)) | ((1'b0 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_keep_V_1_state)))) begin
            outStream_V_keep_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_keep_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_keep_V_1_state)) | ((1'b1 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_keep_V_1_state)) | ((ap_const_lv2_3 == outStream_V_keep_V_1_state) & ~((1'b1 == outStream_V_keep_V_1_vld_in) & (1'b0 == outStream_V_keep_V_1_ack_out)) & ~((1'b0 == outStream_V_keep_V_1_vld_in) & (1'b1 == outStream_V_keep_V_1_ack_out))))) begin
            outStream_V_keep_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_keep_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_last_V_1_ack_out) & (1'b1 == outStream_V_last_V_1_vld_out))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_last_V_1_vld_in) & (1'b1 == outStream_V_last_V_1_ack_in))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_last_V_1_vld_in) & (1'b1 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_last_V_1_state)) | ((1'b0 == outStream_V_last_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_last_V_1_state)))) begin
            outStream_V_last_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_last_V_1_vld_in) & (1'b0 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_last_V_1_state)) | ((1'b0 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_last_V_1_state)))) begin
            outStream_V_last_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_last_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_last_V_1_state)) | ((1'b1 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_last_V_1_state)) | ((ap_const_lv2_3 == outStream_V_last_V_1_state) & ~((1'b1 == outStream_V_last_V_1_vld_in) & (1'b0 == outStream_V_last_V_1_ack_out)) & ~((1'b0 == outStream_V_last_V_1_vld_in) & (1'b1 == outStream_V_last_V_1_ack_out))))) begin
            outStream_V_last_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_last_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_strb_V_1_ack_out) & (1'b1 == outStream_V_strb_V_1_vld_out))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_strb_V_1_vld_in) & (1'b1 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_strb_V_1_state)) | ((1'b0 == outStream_V_strb_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_strb_V_1_state)))) begin
            outStream_V_strb_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_strb_V_1_vld_in) & (1'b0 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_strb_V_1_state)) | ((1'b0 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_strb_V_1_state)))) begin
            outStream_V_strb_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_strb_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_strb_V_1_state)) | ((1'b1 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_strb_V_1_state)) | ((ap_const_lv2_3 == outStream_V_strb_V_1_state) & ~((1'b1 == outStream_V_strb_V_1_vld_in) & (1'b0 == outStream_V_strb_V_1_ack_out)) & ~((1'b0 == outStream_V_strb_V_1_vld_in) & (1'b1 == outStream_V_strb_V_1_ack_out))))) begin
            outStream_V_strb_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_strb_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_user_V_1_ack_out) & (1'b1 == outStream_V_user_V_1_vld_out))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_user_V_1_vld_in) & (1'b1 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_user_V_1_state)) | ((1'b0 == outStream_V_user_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_user_V_1_state)))) begin
            outStream_V_user_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_user_V_1_vld_in) & (1'b0 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_user_V_1_state)) | ((1'b0 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_user_V_1_state)))) begin
            outStream_V_user_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_user_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_user_V_1_state)) | ((1'b1 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_user_V_1_state)) | ((ap_const_lv2_3 == outStream_V_user_V_1_state) & ~((1'b1 == outStream_V_user_V_1_vld_in) & (1'b0 == outStream_V_user_V_1_ack_out)) & ~((1'b0 == outStream_V_user_V_1_vld_in) & (1'b1 == outStream_V_user_V_1_ack_out))))) begin
            outStream_V_user_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_user_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_reg_601 <= ap_const_lv4_0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        i1_reg_601 <= i_2_reg_1740;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond1_fu_816_p2))) begin
        i_reg_480 <= i_1_fu_822_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_480 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_0_4_reg_712 <= result_9_17_reg_590;
    end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & (1'b0 == ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) begin
        result_0_4_reg_712 <= result_0_1_fu_1497_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_1_4_reg_701 <= result_9_15_reg_579;
    end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & (1'b0 == ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) begin
        result_1_4_reg_701 <= result_1_1_fu_1507_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_2_4_reg_690 <= result_9_13_reg_568;
    end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & (1'b0 == ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) begin
        result_2_4_reg_690 <= result_2_1_fu_1517_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_3_4_reg_679 <= result_9_11_reg_557;
    end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & (1'b0 == ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) begin
        result_3_4_reg_679 <= result_3_1_fu_1527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_4_4_reg_668 <= result_9_3_reg_546;
    end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & (1'b0 == ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) begin
        result_4_4_reg_668 <= result_4_1_fu_1537_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_5_4_reg_657 <= result_9_20_reg_535;
    end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & (1'b0 == ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) begin
        result_5_4_reg_657 <= result_5_1_fu_1547_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_6_4_reg_646 <= result_9_9_reg_524;
    end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & (1'b0 == ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) begin
        result_6_4_reg_646 <= result_6_1_fu_1557_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_7_4_reg_635 <= result_9_7_reg_513;
    end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & (1'b0 == ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) begin
        result_7_4_reg_635 <= result_7_1_fu_1567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_8_2_reg_502 <= result_8_reg_372;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        result_8_2_reg_502 <= result_9_6_fu_1285_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_8_4_reg_624 <= result_8_2_reg_502;
    end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & (1'b0 == ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) begin
        result_8_4_reg_624 <= result_8_1_fu_1577_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_9_11_reg_557 <= result_3_reg_432;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        result_9_11_reg_557 <= result_9_16_fu_1405_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_9_13_reg_568 <= result_2_reg_444;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        result_9_13_reg_568 <= result_9_18_fu_1421_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_9_15_reg_579 <= result_1_reg_456;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        result_9_15_reg_579 <= result_9_22_fu_1437_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_9_17_reg_590 <= result_0_reg_468;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        result_9_17_reg_590 <= result_9_23_fu_1445_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_9_20_reg_535 <= result_5_reg_408;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        result_9_20_reg_535 <= result_9_12_fu_1365_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_9_2_reg_491 <= result_9_reg_360;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        result_9_2_reg_491 <= result_9_5_fu_1269_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_9_3_reg_546 <= result_4_reg_420;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        result_9_3_reg_546 <= result_9_14_fu_1381_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_9_4_reg_613 <= result_9_2_reg_491;
    end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & (1'b0 == ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) begin
        result_9_4_reg_613 <= result_9_1_fu_1587_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_9_7_reg_513 <= result_7_reg_384;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        result_9_7_reg_513 <= result_9_8_fu_1317_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        result_9_9_reg_524 <= result_6_reg_396;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        result_9_9_reg_524 <= result_9_10_fu_1341_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        row_reg_723 <= ap_const_lv6_0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'b0 == exitcond3_fu_1453_p2))) begin
        row_reg_723 <= row_1_fu_1459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        writeCount_assign_reg_734 <= ap_const_lv4_0;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        writeCount_assign_reg_734 <= col_reg_1918;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        ap_pipeline_reg_pp2_iter1_exitcond3_reg_1800 <= exitcond3_reg_1800;
        exitcond3_reg_1800 <= exitcond3_fu_1453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0))) begin
        ap_pipeline_reg_pp2_iter2_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter1_exitcond3_reg_1800;
        ap_pipeline_reg_pp2_iter3_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter2_exitcond3_reg_1800;
        ap_pipeline_reg_pp2_iter4_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter3_exitcond3_reg_1800;
        ap_pipeline_reg_pp2_iter5_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter4_exitcond3_reg_1800;
        ap_pipeline_reg_pp2_iter6_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter5_exitcond3_reg_1800;
        ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter6_exitcond3_reg_1800;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        ap_pipeline_reg_pp3_iter1_exitcond_reg_1914 <= exitcond_reg_1914;
        exitcond_reg_1914 <= exitcond_fu_1596_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp3_iter0))) begin
        col_reg_1918 <= col_fu_1602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        ctrl_read_reg_1673 <= ctrl;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp1_stage0)) begin
        exitcond2_reg_1736 <= exitcond2_fu_1116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        i_2_reg_1740 <= i_2_fu_1122_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_data_V_0_load_A)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_data_V_0_load_B)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_data_V_1_load_A)) begin
        outStream_V_data_V_1_payload_A <= data_fu_1665_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_data_V_1_load_B)) begin
        outStream_V_data_V_1_payload_B <= data_fu_1665_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_last_V_1_load_A)) begin
        outStream_V_last_V_1_payload_A <= tmp_last_V_fu_1608_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_last_V_1_load_B)) begin
        outStream_V_last_V_1_payload_B <= tmp_last_V_fu_1608_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond1_fu_816_p2))) begin
        result_0_reg_468 <= result_0_s_fu_1108_p3;
        result_1_reg_456 <= result_1_s_fu_1100_p3;
        result_2_reg_444 <= newSel20_fu_1084_p3;
        result_3_reg_432 <= newSel18_fu_1068_p3;
        result_4_reg_420 <= newSel15_fu_1044_p3;
        result_5_reg_408 <= newSel13_fu_1028_p3;
        result_6_reg_396 <= newSel10_fu_1004_p3;
        result_7_reg_384 <= newSel7_fu_980_p3;
        result_8_reg_372 <= newSel3_fu_948_p3;
        result_9_reg_360 <= newSel1_fu_932_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_8_reg_1909 <= tmp_8_fu_1593_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~(ap_condition_1889 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~(ap_condition_1889 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        grp_fixed_point_mul_fu_746_ap_ce = 1'b1;
    end else begin
        grp_fixed_point_mul_fu_746_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        grp_fixed_point_mul_fu_753_ap_ce = 1'b1;
    end else begin
        grp_fixed_point_mul_fu_753_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        grp_fixed_point_mul_fu_760_ap_ce = 1'b1;
    end else begin
        grp_fixed_point_mul_fu_760_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        grp_fixed_point_mul_fu_767_ap_ce = 1'b1;
    end else begin
        grp_fixed_point_mul_fu_767_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        grp_fixed_point_mul_fu_774_ap_ce = 1'b1;
    end else begin
        grp_fixed_point_mul_fu_774_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        grp_fixed_point_mul_fu_781_ap_ce = 1'b1;
    end else begin
        grp_fixed_point_mul_fu_781_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        grp_fixed_point_mul_fu_788_ap_ce = 1'b1;
    end else begin
        grp_fixed_point_mul_fu_788_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        grp_fixed_point_mul_fu_795_ap_ce = 1'b1;
    end else begin
        grp_fixed_point_mul_fu_795_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        grp_fixed_point_mul_fu_802_ap_ce = 1'b1;
    end else begin
        grp_fixed_point_mul_fu_802_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        grp_fixed_point_mul_fu_809_ap_ce = 1'b1;
    end else begin
        grp_fixed_point_mul_fu_809_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond2_reg_1736))) begin
        i1_phi_fu_605_p4 = i_2_reg_1740;
    end else begin
        i1_phi_fu_605_p4 = i1_reg_601;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800))) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'b0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_data_V_0_sel)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914)))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'b1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_data_V_1_sel)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_last_V_1_sel)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        weight_0_ce0 = 1'b1;
    end else begin
        weight_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        weight_1_ce0 = 1'b1;
    end else begin
        weight_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        weight_2_ce0 = 1'b1;
    end else begin
        weight_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        weight_3_ce0 = 1'b1;
    end else begin
        weight_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        weight_4_ce0 = 1'b1;
    end else begin
        weight_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        weight_5_ce0 = 1'b1;
    end else begin
        weight_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        weight_6_ce0 = 1'b1;
    end else begin
        weight_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        weight_7_ce0 = 1'b1;
    end else begin
        weight_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        weight_8_ce0 = 1'b1;
    end else begin
        weight_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        weight_9_ce0 = 1'b1;
    end else begin
        weight_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914))) begin
        writeCount_assign_phi_fu_738_p4 = col_reg_1918;
    end else begin
        writeCount_assign_phi_fu_738_p4 = writeCount_assign_reg_734;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((1'b0 == exitcond1_fu_816_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp1_iter0) & ~(1'b0 == exitcond2_fu_1116_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & ~(1'b1 == ap_enable_reg_pp2_iter7)) & ~(~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond3_fu_1453_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter8) & ~(1'b1 == ap_enable_reg_pp2_iter7)) | (~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == exitcond3_reg_1800) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'b0 == exitcond3_fu_1453_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp3_iter2) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp3_iter1)) & ~(~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp3_iter0) & ~(1'b0 == exitcond_fu_1596_p2) & ~(1'b1 == ap_enable_reg_pp3_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp3_iter2) & ~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp3_iter1)) | (~(((1'b1 == ap_enable_reg_pp3_iter1) & (1'b0 == exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp3_iter2) & (1'b0 == ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) & (1'b0 == outStream_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp3_iter0) & ~(1'b0 == exitcond_fu_1596_p2) & ~(1'b1 == ap_enable_reg_pp3_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            if (~(ap_condition_1889 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_4];

always @ (*) begin
    ap_condition_1889 = ((outStream_V_data_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_dest_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias_address0 = i1_cast_fu_1128_p1;

assign col_fu_1602_p2 = (writeCount_assign_phi_fu_738_p4 + ap_const_lv4_1);

assign data_2_cast_fu_1661_p1 = data_2_fu_1653_p3;

assign data_2_fu_1653_p3 = ((tmp_10_fu_1645_p3[0:0] === 1'b1) ? ap_const_lv31_0 : tmp_9_fu_1641_p1);

assign data_fu_1665_p3 = ((tmp_8_reg_1909[0:0] === 1'b1) ? data_2_cast_fu_1661_p1 : data_1_fu_1615_p12);

assign exitcond1_fu_816_p2 = ((i_reg_480 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign exitcond2_fu_1116_p2 = ((i1_phi_fu_605_p4 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign exitcond3_fu_1453_p2 = ((row_reg_723 == ap_const_lv6_32) ? 1'b1 : 1'b0);

assign exitcond_fu_1596_p2 = ((writeCount_assign_phi_fu_738_p4 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign i1_cast_fu_1128_p1 = i1_phi_fu_605_p4;

assign i_1_fu_822_p2 = (i_reg_480 + ap_const_lv4_1);

assign i_2_fu_1122_p2 = (i1_phi_fu_605_p4 + ap_const_lv4_1);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'b1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'b1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_sel_wr & inStream_V_data_V_0_state_cmp_full);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'b0];

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign newSel10_fu_1004_p3 = ((or_cond4_fu_914_p2[0:0] === 1'b1) ? result_6_reg_396 : newSel9_fu_996_p3);

assign newSel11_fu_1012_p3 = ((sel_tmp4_fu_852_p2[0:0] === 1'b1) ? result_5_reg_408 : ap_const_lv32_0);

assign newSel12_fu_1020_p3 = ((or_cond2_fu_894_p2[0:0] === 1'b1) ? newSel11_fu_1012_p3 : result_5_reg_408);

assign newSel13_fu_1028_p3 = ((or_cond4_fu_914_p2[0:0] === 1'b1) ? result_5_reg_408 : newSel12_fu_1020_p3);

assign newSel14_fu_1036_p3 = ((sel_tmp4_fu_852_p2[0:0] === 1'b1) ? ap_const_lv32_0 : result_4_reg_420);

assign newSel15_fu_1044_p3 = ((or_cond4_fu_914_p2[0:0] === 1'b1) ? result_4_reg_420 : newSel14_fu_1036_p3);

assign newSel16_fu_1052_p3 = ((sel_tmp6_fu_864_p2[0:0] === 1'b1) ? result_3_reg_432 : ap_const_lv32_0);

assign newSel17_fu_1060_p3 = ((or_cond_fu_882_p2[0:0] === 1'b1) ? result_3_reg_432 : newSel16_fu_1052_p3);

assign newSel18_fu_1068_p3 = ((or_cond4_fu_914_p2[0:0] === 1'b1) ? newSel17_fu_1060_p3 : result_3_reg_432);

assign newSel19_fu_1076_p3 = ((sel_tmp6_fu_864_p2[0:0] === 1'b1) ? ap_const_lv32_0 : result_2_reg_444);

assign newSel1_fu_932_p3 = ((or_cond6_fu_926_p2[0:0] === 1'b1) ? result_9_reg_360 : newSel_fu_906_p3);

assign newSel20_fu_1084_p3 = ((or_cond_fu_882_p2[0:0] === 1'b1) ? result_2_reg_444 : newSel19_fu_1076_p3);

assign newSel21_fu_1243_p3 = ((sel_tmp10_fu_1165_p2[0:0] === 1'b1) ? result_9_2_reg_491 : result_9_24_fu_1159_p2);

assign newSel22_fu_1277_p3 = ((sel_tmp10_fu_1165_p2[0:0] === 1'b1) ? result_9_24_fu_1159_p2 : result_8_2_reg_502);

assign newSel23_fu_1293_p3 = ((sel_tmp12_fu_1177_p2[0:0] === 1'b1) ? result_9_7_reg_513 : result_9_24_fu_1159_p2);

assign newSel24_fu_1301_p3 = ((or_cond9_fu_1231_p2[0:0] === 1'b1) ? result_9_7_reg_513 : newSel23_fu_1293_p3);

assign newSel25_fu_1309_p3 = ((or_cond11_fu_1251_p2[0:0] === 1'b1) ? result_9_7_reg_513 : newSel24_fu_1301_p3);

assign newSel26_fu_1325_p3 = ((sel_tmp12_fu_1177_p2[0:0] === 1'b1) ? result_9_24_fu_1159_p2 : result_9_9_reg_524);

assign newSel27_fu_1333_p3 = ((or_cond9_fu_1231_p2[0:0] === 1'b1) ? result_9_9_reg_524 : newSel26_fu_1325_p3);

assign newSel28_fu_1349_p3 = ((sel_tmp14_fu_1189_p2[0:0] === 1'b1) ? result_9_20_reg_535 : result_9_24_fu_1159_p2);

assign newSel29_fu_1357_p3 = ((or_cond9_fu_1231_p2[0:0] === 1'b1) ? newSel28_fu_1349_p3 : result_9_20_reg_535);

assign newSel2_fu_940_p3 = ((sel_tmp_fu_828_p2[0:0] === 1'b1) ? ap_const_lv32_0 : result_8_reg_372);

assign newSel30_fu_1373_p3 = ((sel_tmp14_fu_1189_p2[0:0] === 1'b1) ? result_9_24_fu_1159_p2 : result_9_3_reg_546);

assign newSel31_fu_1389_p3 = ((sel_tmp16_fu_1201_p2[0:0] === 1'b1) ? result_9_11_reg_557 : result_9_24_fu_1159_p2);

assign newSel32_fu_1397_p3 = ((or_cond7_fu_1219_p2[0:0] === 1'b1) ? result_9_11_reg_557 : newSel31_fu_1389_p3);

assign newSel33_fu_1413_p3 = ((sel_tmp16_fu_1201_p2[0:0] === 1'b1) ? result_9_24_fu_1159_p2 : result_9_13_reg_568);

assign newSel3_fu_948_p3 = ((or_cond6_fu_926_p2[0:0] === 1'b1) ? result_8_reg_372 : newSel2_fu_940_p3);

assign newSel4_fu_956_p3 = ((sel_tmp2_fu_840_p2[0:0] === 1'b1) ? result_7_reg_384 : ap_const_lv32_0);

assign newSel5_fu_964_p3 = ((or_cond2_fu_894_p2[0:0] === 1'b1) ? result_7_reg_384 : newSel4_fu_956_p3);

assign newSel6_fu_972_p3 = ((or_cond4_fu_914_p2[0:0] === 1'b1) ? result_7_reg_384 : newSel5_fu_964_p3);

assign newSel7_fu_980_p3 = ((or_cond6_fu_926_p2[0:0] === 1'b1) ? newSel6_fu_972_p3 : result_7_reg_384);

assign newSel8_fu_988_p3 = ((sel_tmp2_fu_840_p2[0:0] === 1'b1) ? ap_const_lv32_0 : result_6_reg_396);

assign newSel9_fu_996_p3 = ((or_cond2_fu_894_p2[0:0] === 1'b1) ? result_6_reg_396 : newSel8_fu_988_p3);

assign newSel_fu_906_p3 = ((sel_tmp_fu_828_p2[0:0] === 1'b1) ? result_9_reg_360 : ap_const_lv32_0);

assign or_cond10_fu_1237_p2 = (sel_tmp12_fu_1177_p2 | sel_tmp11_fu_1171_p2);

assign or_cond11_fu_1251_p2 = (or_cond7_fu_1219_p2 | or_cond8_fu_1225_p2);

assign or_cond12_fu_1257_p2 = (or_cond9_fu_1231_p2 | or_cond10_fu_1237_p2);

assign or_cond13_fu_1263_p2 = (or_cond11_fu_1251_p2 | or_cond12_fu_1257_p2);

assign or_cond1_fu_888_p2 = (sel_tmp6_fu_864_p2 | sel_tmp5_fu_858_p2);

assign or_cond2_fu_894_p2 = (sel_tmp4_fu_852_p2 | sel_tmp3_fu_846_p2);

assign or_cond3_fu_900_p2 = (sel_tmp2_fu_840_p2 | sel_tmp1_fu_834_p2);

assign or_cond4_fu_914_p2 = (or_cond_fu_882_p2 | or_cond1_fu_888_p2);

assign or_cond5_fu_920_p2 = (or_cond2_fu_894_p2 | or_cond3_fu_900_p2);

assign or_cond6_fu_926_p2 = (or_cond4_fu_914_p2 | or_cond5_fu_920_p2);

assign or_cond7_fu_1219_p2 = (sel_tmp18_fu_1213_p2 | sel_tmp17_fu_1207_p2);

assign or_cond8_fu_1225_p2 = (sel_tmp16_fu_1201_p2 | sel_tmp15_fu_1195_p2);

assign or_cond9_fu_1231_p2 = (sel_tmp14_fu_1189_p2 | sel_tmp13_fu_1183_p2);

assign or_cond_fu_882_p2 = (sel_tmp8_fu_876_p2 | sel_tmp7_fu_870_p2);

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'b0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'b1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_sel_wr & outStream_V_data_V_1_state_cmp_full);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'b0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'b1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_data_out = ap_const_lv6_0;

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'b0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'b1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_data_out = ap_const_lv5_0;

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'b0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'b1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_data_out = ap_const_lv4_F;

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'b0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'b1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_sel_wr & outStream_V_last_V_1_state_cmp_full);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'b0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'b1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_data_out = ap_const_lv4_0;

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'b0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'b1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_data_out = ap_const_lv2_0;

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'b0];

assign result_0_1_fu_1497_p2 = ($signed(result_0_1_trunc_ex_fu_1493_p1) + $signed(result_0_4_reg_712));

assign result_0_1_trunc_ex_fu_1493_p1 = $signed(grp_fixed_point_mul_fu_746_ap_return);

assign result_0_s_fu_1108_p3 = ((sel_tmp8_fu_876_p2[0:0] === 1'b1) ? ap_const_lv32_0 : result_0_reg_468);

assign result_1_1_fu_1507_p2 = ($signed(result_1_1_trunc_ex_fu_1503_p1) + $signed(result_1_4_reg_701));

assign result_1_1_trunc_ex_fu_1503_p1 = $signed(grp_fixed_point_mul_fu_753_ap_return);

assign result_1_s_fu_1100_p3 = ((sel_tmp8_fu_876_p2[0:0] === 1'b1) ? result_1_reg_456 : sel_tmp9_fu_1092_p3);

assign result_2_1_fu_1517_p2 = ($signed(result_2_1_trunc_ex_fu_1513_p1) + $signed(result_2_4_reg_690));

assign result_2_1_trunc_ex_fu_1513_p1 = $signed(grp_fixed_point_mul_fu_760_ap_return);

assign result_3_1_fu_1527_p2 = ($signed(result_3_1_trunc_ex_fu_1523_p1) + $signed(result_3_4_reg_679));

assign result_3_1_trunc_ex_fu_1523_p1 = $signed(grp_fixed_point_mul_fu_767_ap_return);

assign result_4_1_fu_1537_p2 = ($signed(result_4_1_trunc_ex_fu_1533_p1) + $signed(result_4_4_reg_668));

assign result_4_1_trunc_ex_fu_1533_p1 = $signed(grp_fixed_point_mul_fu_774_ap_return);

assign result_5_1_fu_1547_p2 = ($signed(result_5_1_trunc_ex_fu_1543_p1) + $signed(result_5_4_reg_657));

assign result_5_1_trunc_ex_fu_1543_p1 = $signed(grp_fixed_point_mul_fu_781_ap_return);

assign result_6_1_fu_1557_p2 = ($signed(result_6_1_trunc_ex_fu_1553_p1) + $signed(result_6_4_reg_646));

assign result_6_1_trunc_ex_fu_1553_p1 = $signed(grp_fixed_point_mul_fu_788_ap_return);

assign result_7_1_fu_1567_p2 = ($signed(result_7_1_trunc_ex_fu_1563_p1) + $signed(result_7_4_reg_635));

assign result_7_1_trunc_ex_fu_1563_p1 = $signed(grp_fixed_point_mul_fu_795_ap_return);

assign result_8_1_fu_1577_p2 = ($signed(result_8_1_trunc_ex_fu_1573_p1) + $signed(result_8_4_reg_624));

assign result_8_1_trunc_ex_fu_1573_p1 = $signed(grp_fixed_point_mul_fu_802_ap_return);

assign result_9_10_fu_1341_p3 = ((or_cond11_fu_1251_p2[0:0] === 1'b1) ? result_9_9_reg_524 : newSel27_fu_1333_p3);

assign result_9_12_fu_1365_p3 = ((or_cond11_fu_1251_p2[0:0] === 1'b1) ? result_9_20_reg_535 : newSel29_fu_1357_p3);

assign result_9_14_fu_1381_p3 = ((or_cond11_fu_1251_p2[0:0] === 1'b1) ? result_9_3_reg_546 : newSel30_fu_1373_p3);

assign result_9_16_fu_1405_p3 = ((or_cond11_fu_1251_p2[0:0] === 1'b1) ? newSel32_fu_1397_p3 : result_9_11_reg_557);

assign result_9_18_fu_1421_p3 = ((or_cond7_fu_1219_p2[0:0] === 1'b1) ? result_9_13_reg_568 : newSel33_fu_1413_p3);

assign result_9_1_fu_1587_p2 = ($signed(result_9_1_trunc_ex_fu_1583_p1) + $signed(result_9_4_reg_613));

assign result_9_1_trunc_ex_fu_1583_p1 = $signed(grp_fixed_point_mul_fu_809_ap_return);

assign result_9_21_fu_1429_p3 = ((sel_tmp17_fu_1207_p2[0:0] === 1'b1) ? result_9_24_fu_1159_p2 : result_9_15_reg_579);

assign result_9_22_fu_1437_p3 = ((sel_tmp18_fu_1213_p2[0:0] === 1'b1) ? result_9_15_reg_579 : result_9_21_fu_1429_p3);

assign result_9_23_fu_1445_p3 = ((sel_tmp18_fu_1213_p2[0:0] === 1'b1) ? result_9_24_fu_1159_p2 : result_9_17_reg_590);

assign result_9_24_fu_1159_p2 = (bias_q0 + tmp_1_fu_1133_p12);

assign result_9_5_fu_1269_p3 = ((or_cond13_fu_1263_p2[0:0] === 1'b1) ? result_9_2_reg_491 : newSel21_fu_1243_p3);

assign result_9_6_fu_1285_p3 = ((or_cond13_fu_1263_p2[0:0] === 1'b1) ? result_8_2_reg_502 : newSel22_fu_1277_p3);

assign result_9_8_fu_1317_p3 = ((or_cond13_fu_1263_p2[0:0] === 1'b1) ? newSel25_fu_1309_p3 : result_9_7_reg_513);

assign row_1_fu_1459_p2 = (row_reg_723 + ap_const_lv6_1);

assign row_cast_fu_1465_p1 = row_reg_723;

assign sel_tmp10_fu_1165_p2 = ((i1_reg_601 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign sel_tmp11_fu_1171_p2 = ((i1_reg_601 == ap_const_lv4_7) ? 1'b1 : 1'b0);

assign sel_tmp12_fu_1177_p2 = ((i1_reg_601 == ap_const_lv4_6) ? 1'b1 : 1'b0);

assign sel_tmp13_fu_1183_p2 = ((i1_reg_601 == ap_const_lv4_5) ? 1'b1 : 1'b0);

assign sel_tmp14_fu_1189_p2 = ((i1_reg_601 == ap_const_lv4_4) ? 1'b1 : 1'b0);

assign sel_tmp15_fu_1195_p2 = ((i1_reg_601 == ap_const_lv4_3) ? 1'b1 : 1'b0);

assign sel_tmp16_fu_1201_p2 = ((i1_reg_601 == ap_const_lv4_2) ? 1'b1 : 1'b0);

assign sel_tmp17_fu_1207_p2 = ((i1_reg_601 == ap_const_lv4_1) ? 1'b1 : 1'b0);

assign sel_tmp18_fu_1213_p2 = ((i1_reg_601 == ap_const_lv4_0) ? 1'b1 : 1'b0);

assign sel_tmp1_fu_834_p2 = ((i_reg_480 == ap_const_lv4_7) ? 1'b1 : 1'b0);

assign sel_tmp2_fu_840_p2 = ((i_reg_480 == ap_const_lv4_6) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_846_p2 = ((i_reg_480 == ap_const_lv4_5) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_852_p2 = ((i_reg_480 == ap_const_lv4_4) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_858_p2 = ((i_reg_480 == ap_const_lv4_3) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_864_p2 = ((i_reg_480 == ap_const_lv4_2) ? 1'b1 : 1'b0);

assign sel_tmp7_fu_870_p2 = ((i_reg_480 == ap_const_lv4_1) ? 1'b1 : 1'b0);

assign sel_tmp8_fu_876_p2 = ((i_reg_480 == ap_const_lv4_0) ? 1'b1 : 1'b0);

assign sel_tmp9_fu_1092_p3 = ((sel_tmp7_fu_870_p2[0:0] === 1'b1) ? ap_const_lv32_0 : result_1_reg_456);

assign sel_tmp_fu_828_p2 = ((i_reg_480 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign tmp_10_fu_1645_p3 = data_1_fu_1615_p12[ap_const_lv32_1F];

assign tmp_8_fu_1593_p1 = ctrl_read_reg_1673[0:0];

assign tmp_9_fu_1641_p1 = data_1_fu_1615_p12[30:0];

assign tmp_last_V_fu_1608_p2 = ((writeCount_assign_reg_734 == ap_const_lv4_9) ? 1'b1 : 1'b0);

assign weight_0_address0 = row_cast_fu_1465_p1;

assign weight_1_address0 = row_cast_fu_1465_p1;

assign weight_2_address0 = row_cast_fu_1465_p1;

assign weight_3_address0 = row_cast_fu_1465_p1;

assign weight_4_address0 = row_cast_fu_1465_p1;

assign weight_5_address0 = row_cast_fu_1465_p1;

assign weight_6_address0 = row_cast_fu_1465_p1;

assign weight_7_address0 = row_cast_fu_1465_p1;

assign weight_8_address0 = row_cast_fu_1465_p1;

assign weight_9_address0 = row_cast_fu_1465_p1;

endmodule //cnn_fc_i50_o10
