-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_fc_i50_o10 is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of cnn_fc_i50_o10 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn_fc_i50_o10,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.570000,HLS_SYN_LAT=96,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=40,HLS_SYN_FF=3659,HLS_SYN_LUT=6748}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_vld_in : STD_LOGIC;
    signal inStream_V_data_V_0_vld_out : STD_LOGIC;
    signal inStream_V_data_V_0_ack_in : STD_LOGIC;
    signal inStream_V_data_V_0_ack_out : STD_LOGIC;
    signal inStream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel : STD_LOGIC;
    signal inStream_V_data_V_0_load_A : STD_LOGIC;
    signal inStream_V_data_V_0_load_B : STD_LOGIC;
    signal inStream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_vld_in : STD_LOGIC;
    signal outStream_V_data_V_1_vld_out : STD_LOGIC;
    signal outStream_V_data_V_1_ack_in : STD_LOGIC;
    signal outStream_V_data_V_1_ack_out : STD_LOGIC;
    signal outStream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel : STD_LOGIC;
    signal outStream_V_data_V_1_load_A : STD_LOGIC;
    signal outStream_V_data_V_1_load_B : STD_LOGIC;
    signal outStream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal weight_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_0_ce0 : STD_LOGIC;
    signal weight_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_1_ce0 : STD_LOGIC;
    signal weight_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_2_ce0 : STD_LOGIC;
    signal weight_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_3_ce0 : STD_LOGIC;
    signal weight_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_4_ce0 : STD_LOGIC;
    signal weight_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_5_ce0 : STD_LOGIC;
    signal weight_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_6_ce0 : STD_LOGIC;
    signal weight_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_7_ce0 : STD_LOGIC;
    signal weight_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_8_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_8_ce0 : STD_LOGIC;
    signal weight_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_9_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_9_ce0 : STD_LOGIC;
    signal weight_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias_ce0 : STD_LOGIC;
    signal bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal exitcond3_reg_1800 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal exitcond_reg_1914 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp3_iter1_exitcond_reg_1914 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_9_2_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_8_2_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_7_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_9_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_20_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_3_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_11_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_13_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_15_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_17_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_601 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_9_4_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_8_4_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_7_4_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_6_4_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_5_4_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_4_4_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_4_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_4_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_4_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_0_4_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_723 : STD_LOGIC_VECTOR (5 downto 0);
    signal writeCount_assign_reg_734 : STD_LOGIC_VECTOR (3 downto 0);
    signal ctrl_read_reg_1673 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_822_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal newSel1_fu_932_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel3_fu_948_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel7_fu_980_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel10_fu_1004_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel13_fu_1028_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel15_fu_1044_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel18_fu_1068_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel20_fu_1084_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_s_fu_1100_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_0_s_fu_1108_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_1736 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal i_2_fu_1122_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1740 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal result_9_5_fu_1269_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal result_9_6_fu_1285_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_8_fu_1317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_10_fu_1341_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_12_fu_1365_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_14_fu_1381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_16_fu_1405_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_18_fu_1421_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_22_fu_1437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_23_fu_1445_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_1453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter1_exitcond3_reg_1800 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter2_exitcond3_reg_1800 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter3_exitcond3_reg_1800 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter4_exitcond3_reg_1800 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter5_exitcond3_reg_1800 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter6_exitcond3_reg_1800 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_1_fu_1459_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal result_0_1_fu_1497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal result_1_1_fu_1507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_1_fu_1517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_1_fu_1527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_4_1_fu_1537_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_5_1_fu_1547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_6_1_fu_1557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_7_1_fu_1567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_8_1_fu_1577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_1_fu_1587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1593_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond_fu_1596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_1602_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_reg_1918 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal tmp_last_V_fu_1608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_fu_1665_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal grp_fixed_point_mul_fu_746_ap_return : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fixed_point_mul_fu_746_ap_ce : STD_LOGIC;
    signal grp_fixed_point_mul_fu_753_ap_return : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fixed_point_mul_fu_753_ap_ce : STD_LOGIC;
    signal grp_fixed_point_mul_fu_760_ap_return : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fixed_point_mul_fu_760_ap_ce : STD_LOGIC;
    signal grp_fixed_point_mul_fu_767_ap_return : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fixed_point_mul_fu_767_ap_ce : STD_LOGIC;
    signal grp_fixed_point_mul_fu_774_ap_return : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fixed_point_mul_fu_774_ap_ce : STD_LOGIC;
    signal grp_fixed_point_mul_fu_781_ap_return : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fixed_point_mul_fu_781_ap_ce : STD_LOGIC;
    signal grp_fixed_point_mul_fu_788_ap_return : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fixed_point_mul_fu_788_ap_ce : STD_LOGIC;
    signal grp_fixed_point_mul_fu_795_ap_return : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fixed_point_mul_fu_795_ap_ce : STD_LOGIC;
    signal grp_fixed_point_mul_fu_802_ap_return : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fixed_point_mul_fu_802_ap_ce : STD_LOGIC;
    signal grp_fixed_point_mul_fu_809_ap_return : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fixed_point_mul_fu_809_ap_ce : STD_LOGIC;
    signal result_9_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_8_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_7_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_6_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_5_reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_4_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_0_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_480 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_phi_fu_605_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal writeCount_assign_phi_fu_738_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_cast_fu_1128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_cast_fu_1465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp8_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond5_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_906_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel2_fu_940_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel4_fu_956_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel5_fu_964_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel6_fu_972_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel8_fu_988_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel9_fu_996_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel11_fu_1012_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel12_fu_1020_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel14_fu_1036_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel16_fu_1052_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel17_fu_1060_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel19_fu_1076_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp9_fu_1092_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1133_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp18_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_9_24_fu_1159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond7_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond9_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond10_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond11_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond12_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond13_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel21_fu_1243_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel22_fu_1277_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel23_fu_1293_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel24_fu_1301_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel25_fu_1309_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel26_fu_1325_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel27_fu_1333_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel28_fu_1349_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel29_fu_1357_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel30_fu_1373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel31_fu_1389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel32_fu_1397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel33_fu_1413_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_21_fu_1429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_0_1_trunc_ex_fu_1493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_1_trunc_ex_fu_1503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_1_trunc_ex_fu_1513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_1_trunc_ex_fu_1523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_4_1_trunc_ex_fu_1533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_5_1_trunc_ex_fu_1543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_6_1_trunc_ex_fu_1553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_7_1_trunc_ex_fu_1563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_8_1_trunc_ex_fu_1573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_9_1_trunc_ex_fu_1583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_fu_1615_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1645_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1641_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_2_fu_1653_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_2_cast_fu_1661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_condition_1889 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component fixed_point_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (22 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component cnn_fc_i50_o10_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fc_i50_o10_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        weight_0_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_0_ce0 : IN STD_LOGIC;
        weight_0_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_1_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_1_ce0 : IN STD_LOGIC;
        weight_1_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_2_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_2_ce0 : IN STD_LOGIC;
        weight_2_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_3_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_3_ce0 : IN STD_LOGIC;
        weight_3_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_4_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_4_ce0 : IN STD_LOGIC;
        weight_4_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_5_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_5_ce0 : IN STD_LOGIC;
        weight_5_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_6_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_6_ce0 : IN STD_LOGIC;
        weight_6_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_7_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_7_ce0 : IN STD_LOGIC;
        weight_7_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_8_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_8_ce0 : IN STD_LOGIC;
        weight_8_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_9_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_9_ce0 : IN STD_LOGIC;
        weight_9_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        bias_ce0 : IN STD_LOGIC;
        bias_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cnn_fc_i50_o10_CTRL_s_axi_U : component cnn_fc_i50_o10_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        weight_0_address0 => weight_0_address0,
        weight_0_ce0 => weight_0_ce0,
        weight_0_q0 => weight_0_q0,
        weight_1_address0 => weight_1_address0,
        weight_1_ce0 => weight_1_ce0,
        weight_1_q0 => weight_1_q0,
        weight_2_address0 => weight_2_address0,
        weight_2_ce0 => weight_2_ce0,
        weight_2_q0 => weight_2_q0,
        weight_3_address0 => weight_3_address0,
        weight_3_ce0 => weight_3_ce0,
        weight_3_q0 => weight_3_q0,
        weight_4_address0 => weight_4_address0,
        weight_4_ce0 => weight_4_ce0,
        weight_4_q0 => weight_4_q0,
        weight_5_address0 => weight_5_address0,
        weight_5_ce0 => weight_5_ce0,
        weight_5_q0 => weight_5_q0,
        weight_6_address0 => weight_6_address0,
        weight_6_ce0 => weight_6_ce0,
        weight_6_q0 => weight_6_q0,
        weight_7_address0 => weight_7_address0,
        weight_7_ce0 => weight_7_ce0,
        weight_7_q0 => weight_7_q0,
        weight_8_address0 => weight_8_address0,
        weight_8_ce0 => weight_8_ce0,
        weight_8_q0 => weight_8_q0,
        weight_9_address0 => weight_9_address0,
        weight_9_ce0 => weight_9_ce0,
        weight_9_q0 => weight_9_q0,
        bias_address0 => bias_address0,
        bias_ce0 => bias_ce0,
        bias_q0 => bias_q0,
        ctrl => ctrl);

    grp_fixed_point_mul_fu_746 : component fixed_point_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        a => inStream_V_data_V_0_data_out,
        b => weight_0_q0,
        ap_return => grp_fixed_point_mul_fu_746_ap_return,
        ap_ce => grp_fixed_point_mul_fu_746_ap_ce);

    grp_fixed_point_mul_fu_753 : component fixed_point_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        a => inStream_V_data_V_0_data_out,
        b => weight_1_q0,
        ap_return => grp_fixed_point_mul_fu_753_ap_return,
        ap_ce => grp_fixed_point_mul_fu_753_ap_ce);

    grp_fixed_point_mul_fu_760 : component fixed_point_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        a => inStream_V_data_V_0_data_out,
        b => weight_2_q0,
        ap_return => grp_fixed_point_mul_fu_760_ap_return,
        ap_ce => grp_fixed_point_mul_fu_760_ap_ce);

    grp_fixed_point_mul_fu_767 : component fixed_point_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        a => inStream_V_data_V_0_data_out,
        b => weight_3_q0,
        ap_return => grp_fixed_point_mul_fu_767_ap_return,
        ap_ce => grp_fixed_point_mul_fu_767_ap_ce);

    grp_fixed_point_mul_fu_774 : component fixed_point_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        a => inStream_V_data_V_0_data_out,
        b => weight_4_q0,
        ap_return => grp_fixed_point_mul_fu_774_ap_return,
        ap_ce => grp_fixed_point_mul_fu_774_ap_ce);

    grp_fixed_point_mul_fu_781 : component fixed_point_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        a => inStream_V_data_V_0_data_out,
        b => weight_5_q0,
        ap_return => grp_fixed_point_mul_fu_781_ap_return,
        ap_ce => grp_fixed_point_mul_fu_781_ap_ce);

    grp_fixed_point_mul_fu_788 : component fixed_point_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        a => inStream_V_data_V_0_data_out,
        b => weight_6_q0,
        ap_return => grp_fixed_point_mul_fu_788_ap_return,
        ap_ce => grp_fixed_point_mul_fu_788_ap_ce);

    grp_fixed_point_mul_fu_795 : component fixed_point_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        a => inStream_V_data_V_0_data_out,
        b => weight_7_q0,
        ap_return => grp_fixed_point_mul_fu_795_ap_return,
        ap_ce => grp_fixed_point_mul_fu_795_ap_ce);

    grp_fixed_point_mul_fu_802 : component fixed_point_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        a => inStream_V_data_V_0_data_out,
        b => weight_8_q0,
        ap_return => grp_fixed_point_mul_fu_802_ap_return,
        ap_ce => grp_fixed_point_mul_fu_802_ap_ce);

    grp_fixed_point_mul_fu_809 : component fixed_point_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        a => inStream_V_data_V_0_data_out,
        b => weight_9_q0,
        ap_return => grp_fixed_point_mul_fu_809_ap_return,
        ap_ce => grp_fixed_point_mul_fu_809_ap_ce);

    cnn_fc_i50_o10_mucud_U3 : component cnn_fc_i50_o10_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din1 => result_9_17_reg_590,
        din2 => result_9_15_reg_579,
        din3 => result_9_13_reg_568,
        din4 => result_9_11_reg_557,
        din5 => result_9_3_reg_546,
        din6 => result_9_20_reg_535,
        din7 => result_9_9_reg_524,
        din8 => result_9_7_reg_513,
        din9 => result_8_2_reg_502,
        din10 => result_9_2_reg_491,
        din11 => i1_reg_601,
        dout => tmp_1_fu_1133_p12);

    cnn_fc_i50_o10_mucud_U4 : component cnn_fc_i50_o10_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din1 => result_0_4_reg_712,
        din2 => result_1_4_reg_701,
        din3 => result_2_4_reg_690,
        din4 => result_3_4_reg_679,
        din5 => result_4_4_reg_668,
        din6 => result_5_4_reg_657,
        din7 => result_6_4_reg_646,
        din8 => result_7_4_reg_635,
        din9 => result_8_4_reg_624,
        din10 => result_9_4_reg_613,
        din11 => writeCount_assign_reg_734,
        dout => data_1_fu_1615_p12);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not((ap_const_lv1_0 = exitcond2_fu_1116_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond2_fu_1116_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not((ap_const_lv1_0 = exitcond2_fu_1116_p2))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond3_fu_1453_p2)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond3_fu_1453_p2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond3_fu_1453_p2))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0)))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0)))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0)))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0)))) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0)))) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0)))) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0)))) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))) and not((ap_const_lv1_0 = exitcond_fu_1596_p2)))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))) and (ap_const_lv1_0 = exitcond_fu_1596_p2))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))) and not((ap_const_lv1_0 = exitcond_fu_1596_p2))))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in))))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = inStream_V_data_V_0_ack_out) and (ap_const_logic_1 = inStream_V_data_V_0_vld_out))) then 
                                        inStream_V_data_V_0_sel_rd <= not(inStream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = inStream_V_data_V_0_vld_in) and (ap_const_logic_1 = inStream_V_data_V_0_ack_in))) then 
                                        inStream_V_data_V_0_sel_wr <= not(inStream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = inStream_V_data_V_0_vld_in) and (ap_const_logic_1 = inStream_V_data_V_0_ack_out) and (inStream_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = inStream_V_data_V_0_vld_in) and (inStream_V_data_V_0_state = ap_const_lv2_2)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = inStream_V_data_V_0_vld_in) and (ap_const_logic_0 = inStream_V_data_V_0_ack_out) and (inStream_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = inStream_V_data_V_0_ack_out) and (inStream_V_data_V_0_state = ap_const_lv2_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = inStream_V_data_V_0_vld_in) and (inStream_V_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = inStream_V_data_V_0_ack_out) and (inStream_V_data_V_0_state = ap_const_lv2_1)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = inStream_V_data_V_0_vld_in) and (ap_const_logic_0 = inStream_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = inStream_V_data_V_0_vld_in) and (ap_const_logic_1 = inStream_V_data_V_0_ack_out)))))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = inStream_V_dest_V_0_vld_in) and (ap_const_logic_1 = inStream_V_dest_V_0_ack_out) and (ap_const_lv2_3 = inStream_V_dest_V_0_state)) or ((ap_const_logic_0 = inStream_V_dest_V_0_vld_in) and (ap_const_lv2_2 = inStream_V_dest_V_0_state)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = inStream_V_dest_V_0_vld_in) and (ap_const_logic_0 = inStream_V_dest_V_0_ack_out) and (ap_const_lv2_3 = inStream_V_dest_V_0_state)) or ((ap_const_logic_0 = inStream_V_dest_V_0_ack_out) and (ap_const_lv2_1 = inStream_V_dest_V_0_state)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = inStream_V_dest_V_0_vld_in) and (ap_const_lv2_2 = inStream_V_dest_V_0_state)) or ((ap_const_logic_1 = inStream_V_dest_V_0_ack_out) and (ap_const_lv2_1 = inStream_V_dest_V_0_state)) or ((ap_const_lv2_3 = inStream_V_dest_V_0_state) and not(((ap_const_logic_1 = inStream_V_dest_V_0_vld_in) and (ap_const_logic_0 = inStream_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = inStream_V_dest_V_0_vld_in) and (ap_const_logic_1 = inStream_V_dest_V_0_ack_out)))))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outStream_V_data_V_1_ack_out) and (ap_const_logic_1 = outStream_V_data_V_1_vld_out))) then 
                                        outStream_V_data_V_1_sel_rd <= not(outStream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outStream_V_data_V_1_vld_in) and (ap_const_logic_1 = outStream_V_data_V_1_ack_in))) then 
                                        outStream_V_data_V_1_sel_wr <= not(outStream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outStream_V_data_V_1_vld_in) and (ap_const_logic_1 = outStream_V_data_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_data_V_1_state)) or ((ap_const_logic_0 = outStream_V_data_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_data_V_1_state)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outStream_V_data_V_1_vld_in) and (ap_const_logic_0 = outStream_V_data_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_data_V_1_state)) or ((ap_const_logic_0 = outStream_V_data_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_data_V_1_state)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outStream_V_data_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_data_V_1_state)) or ((ap_const_logic_1 = outStream_V_data_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_data_V_1_state)) or ((ap_const_lv2_3 = outStream_V_data_V_1_state) and not(((ap_const_logic_1 = outStream_V_data_V_1_vld_in) and (ap_const_logic_0 = outStream_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = outStream_V_data_V_1_vld_in) and (ap_const_logic_1 = outStream_V_data_V_1_ack_out)))))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outStream_V_dest_V_1_ack_out) and (ap_const_logic_1 = outStream_V_dest_V_1_vld_out))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outStream_V_dest_V_1_vld_in) and (ap_const_logic_1 = outStream_V_dest_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_dest_V_1_state)) or ((ap_const_logic_0 = outStream_V_dest_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_dest_V_1_state)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outStream_V_dest_V_1_vld_in) and (ap_const_logic_0 = outStream_V_dest_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_dest_V_1_state)) or ((ap_const_logic_0 = outStream_V_dest_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_dest_V_1_state)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outStream_V_dest_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_dest_V_1_state)) or ((ap_const_logic_1 = outStream_V_dest_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_dest_V_1_state)) or ((ap_const_lv2_3 = outStream_V_dest_V_1_state) and not(((ap_const_logic_1 = outStream_V_dest_V_1_vld_in) and (ap_const_logic_0 = outStream_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = outStream_V_dest_V_1_vld_in) and (ap_const_logic_1 = outStream_V_dest_V_1_ack_out)))))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outStream_V_id_V_1_ack_out) and (ap_const_logic_1 = outStream_V_id_V_1_vld_out))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outStream_V_id_V_1_vld_in) and (ap_const_logic_1 = outStream_V_id_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_id_V_1_state)) or ((ap_const_logic_0 = outStream_V_id_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_id_V_1_state)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outStream_V_id_V_1_vld_in) and (ap_const_logic_0 = outStream_V_id_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_id_V_1_state)) or ((ap_const_logic_0 = outStream_V_id_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_id_V_1_state)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outStream_V_id_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_id_V_1_state)) or ((ap_const_logic_1 = outStream_V_id_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_id_V_1_state)) or ((ap_const_lv2_3 = outStream_V_id_V_1_state) and not(((ap_const_logic_1 = outStream_V_id_V_1_vld_in) and (ap_const_logic_0 = outStream_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = outStream_V_id_V_1_vld_in) and (ap_const_logic_1 = outStream_V_id_V_1_ack_out)))))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outStream_V_keep_V_1_ack_out) and (ap_const_logic_1 = outStream_V_keep_V_1_vld_out))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outStream_V_keep_V_1_vld_in) and (ap_const_logic_1 = outStream_V_keep_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_keep_V_1_state)) or ((ap_const_logic_0 = outStream_V_keep_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_keep_V_1_state)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outStream_V_keep_V_1_vld_in) and (ap_const_logic_0 = outStream_V_keep_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_keep_V_1_state)) or ((ap_const_logic_0 = outStream_V_keep_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_keep_V_1_state)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outStream_V_keep_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_keep_V_1_state)) or ((ap_const_logic_1 = outStream_V_keep_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_keep_V_1_state)) or ((ap_const_lv2_3 = outStream_V_keep_V_1_state) and not(((ap_const_logic_1 = outStream_V_keep_V_1_vld_in) and (ap_const_logic_0 = outStream_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = outStream_V_keep_V_1_vld_in) and (ap_const_logic_1 = outStream_V_keep_V_1_ack_out)))))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outStream_V_last_V_1_ack_out) and (ap_const_logic_1 = outStream_V_last_V_1_vld_out))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outStream_V_last_V_1_vld_in) and (ap_const_logic_1 = outStream_V_last_V_1_ack_in))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outStream_V_last_V_1_vld_in) and (ap_const_logic_1 = outStream_V_last_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_last_V_1_state)) or ((ap_const_logic_0 = outStream_V_last_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_last_V_1_state)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outStream_V_last_V_1_vld_in) and (ap_const_logic_0 = outStream_V_last_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_last_V_1_state)) or ((ap_const_logic_0 = outStream_V_last_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_last_V_1_state)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outStream_V_last_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_last_V_1_state)) or ((ap_const_logic_1 = outStream_V_last_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_last_V_1_state)) or ((ap_const_lv2_3 = outStream_V_last_V_1_state) and not(((ap_const_logic_1 = outStream_V_last_V_1_vld_in) and (ap_const_logic_0 = outStream_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = outStream_V_last_V_1_vld_in) and (ap_const_logic_1 = outStream_V_last_V_1_ack_out)))))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outStream_V_strb_V_1_ack_out) and (ap_const_logic_1 = outStream_V_strb_V_1_vld_out))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outStream_V_strb_V_1_vld_in) and (ap_const_logic_1 = outStream_V_strb_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_strb_V_1_state)) or ((ap_const_logic_0 = outStream_V_strb_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_strb_V_1_state)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outStream_V_strb_V_1_vld_in) and (ap_const_logic_0 = outStream_V_strb_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_strb_V_1_state)) or ((ap_const_logic_0 = outStream_V_strb_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_strb_V_1_state)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outStream_V_strb_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_strb_V_1_state)) or ((ap_const_logic_1 = outStream_V_strb_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_strb_V_1_state)) or ((ap_const_lv2_3 = outStream_V_strb_V_1_state) and not(((ap_const_logic_1 = outStream_V_strb_V_1_vld_in) and (ap_const_logic_0 = outStream_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = outStream_V_strb_V_1_vld_in) and (ap_const_logic_1 = outStream_V_strb_V_1_ack_out)))))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outStream_V_user_V_1_ack_out) and (ap_const_logic_1 = outStream_V_user_V_1_vld_out))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outStream_V_user_V_1_vld_in) and (ap_const_logic_1 = outStream_V_user_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_user_V_1_state)) or ((ap_const_logic_0 = outStream_V_user_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_user_V_1_state)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outStream_V_user_V_1_vld_in) and (ap_const_logic_0 = outStream_V_user_V_1_ack_out) and (ap_const_lv2_3 = outStream_V_user_V_1_state)) or ((ap_const_logic_0 = outStream_V_user_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_user_V_1_state)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outStream_V_user_V_1_vld_in) and (ap_const_lv2_2 = outStream_V_user_V_1_state)) or ((ap_const_logic_1 = outStream_V_user_V_1_ack_out) and (ap_const_lv2_1 = outStream_V_user_V_1_state)) or ((ap_const_lv2_3 = outStream_V_user_V_1_state) and not(((ap_const_logic_1 = outStream_V_user_V_1_vld_in) and (ap_const_logic_0 = outStream_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = outStream_V_user_V_1_vld_in) and (ap_const_logic_1 = outStream_V_user_V_1_ack_out)))))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_601_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                i1_reg_601 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                i1_reg_601 <= i_2_reg_1740;
            end if; 
        end if;
    end process;

    i_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_816_p2))) then 
                i_reg_480 <= i_1_fu_822_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_480 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    result_0_4_reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                result_0_4_reg_712 <= result_9_17_reg_590;
            elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) then 
                result_0_4_reg_712 <= result_0_1_fu_1497_p2;
            end if; 
        end if;
    end process;

    result_1_4_reg_701_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                result_1_4_reg_701 <= result_9_15_reg_579;
            elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) then 
                result_1_4_reg_701 <= result_1_1_fu_1507_p2;
            end if; 
        end if;
    end process;

    result_2_4_reg_690_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                result_2_4_reg_690 <= result_9_13_reg_568;
            elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) then 
                result_2_4_reg_690 <= result_2_1_fu_1517_p2;
            end if; 
        end if;
    end process;

    result_3_4_reg_679_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                result_3_4_reg_679 <= result_9_11_reg_557;
            elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) then 
                result_3_4_reg_679 <= result_3_1_fu_1527_p2;
            end if; 
        end if;
    end process;

    result_4_4_reg_668_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                result_4_4_reg_668 <= result_9_3_reg_546;
            elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) then 
                result_4_4_reg_668 <= result_4_1_fu_1537_p2;
            end if; 
        end if;
    end process;

    result_5_4_reg_657_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                result_5_4_reg_657 <= result_9_20_reg_535;
            elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) then 
                result_5_4_reg_657 <= result_5_1_fu_1547_p2;
            end if; 
        end if;
    end process;

    result_6_4_reg_646_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                result_6_4_reg_646 <= result_9_9_reg_524;
            elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) then 
                result_6_4_reg_646 <= result_6_1_fu_1557_p2;
            end if; 
        end if;
    end process;

    result_7_4_reg_635_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                result_7_4_reg_635 <= result_9_7_reg_513;
            elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) then 
                result_7_4_reg_635 <= result_7_1_fu_1567_p2;
            end if; 
        end if;
    end process;

    result_8_2_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                result_8_2_reg_502 <= result_8_reg_372;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                result_8_2_reg_502 <= result_9_6_fu_1285_p3;
            end if; 
        end if;
    end process;

    result_8_4_reg_624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                result_8_4_reg_624 <= result_8_2_reg_502;
            elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) then 
                result_8_4_reg_624 <= result_8_1_fu_1577_p2;
            end if; 
        end if;
    end process;

    result_9_11_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                result_9_11_reg_557 <= result_3_reg_432;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                result_9_11_reg_557 <= result_9_16_fu_1405_p3;
            end if; 
        end if;
    end process;

    result_9_13_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                result_9_13_reg_568 <= result_2_reg_444;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                result_9_13_reg_568 <= result_9_18_fu_1421_p3;
            end if; 
        end if;
    end process;

    result_9_15_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                result_9_15_reg_579 <= result_1_reg_456;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                result_9_15_reg_579 <= result_9_22_fu_1437_p3;
            end if; 
        end if;
    end process;

    result_9_17_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                result_9_17_reg_590 <= result_0_reg_468;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                result_9_17_reg_590 <= result_9_23_fu_1445_p3;
            end if; 
        end if;
    end process;

    result_9_20_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                result_9_20_reg_535 <= result_5_reg_408;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                result_9_20_reg_535 <= result_9_12_fu_1365_p3;
            end if; 
        end if;
    end process;

    result_9_2_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                result_9_2_reg_491 <= result_9_reg_360;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                result_9_2_reg_491 <= result_9_5_fu_1269_p3;
            end if; 
        end if;
    end process;

    result_9_3_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                result_9_3_reg_546 <= result_4_reg_420;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                result_9_3_reg_546 <= result_9_14_fu_1381_p3;
            end if; 
        end if;
    end process;

    result_9_4_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                result_9_4_reg_613 <= result_9_2_reg_491;
            elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800))) then 
                result_9_4_reg_613 <= result_9_1_fu_1587_p2;
            end if; 
        end if;
    end process;

    result_9_7_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                result_9_7_reg_513 <= result_7_reg_384;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                result_9_7_reg_513 <= result_9_8_fu_1317_p3;
            end if; 
        end if;
    end process;

    result_9_9_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                result_9_9_reg_524 <= result_6_reg_396;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
                result_9_9_reg_524 <= result_9_10_fu_1341_p3;
            end if; 
        end if;
    end process;

    row_reg_723_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
                row_reg_723 <= ap_const_lv6_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond3_fu_1453_p2))) then 
                row_reg_723 <= row_1_fu_1459_p2;
            end if; 
        end if;
    end process;

    writeCount_assign_reg_734_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                writeCount_assign_reg_734 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))))) then 
                writeCount_assign_reg_734 <= col_reg_1918;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then
                ap_pipeline_reg_pp2_iter1_exitcond3_reg_1800 <= exitcond3_reg_1800;
                exitcond3_reg_1800 <= exitcond3_fu_1453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0)))) then
                ap_pipeline_reg_pp2_iter2_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter1_exitcond3_reg_1800;
                ap_pipeline_reg_pp2_iter3_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter2_exitcond3_reg_1800;
                ap_pipeline_reg_pp2_iter4_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter3_exitcond3_reg_1800;
                ap_pipeline_reg_pp2_iter5_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter4_exitcond3_reg_1800;
                ap_pipeline_reg_pp2_iter6_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter5_exitcond3_reg_1800;
                ap_pipeline_reg_pp2_iter7_exitcond3_reg_1800 <= ap_pipeline_reg_pp2_iter6_exitcond3_reg_1800;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))))) then
                ap_pipeline_reg_pp3_iter1_exitcond_reg_1914 <= exitcond_reg_1914;
                exitcond_reg_1914 <= exitcond_fu_1596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then
                col_reg_1918 <= col_fu_1602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                ctrl_read_reg_1673 <= ctrl;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond2_reg_1736 <= exitcond2_fu_1116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then
                i_2_reg_1740 <= i_2_fu_1122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = inStream_V_data_V_0_load_A)) then
                inStream_V_data_V_0_payload_A <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = inStream_V_data_V_0_load_B)) then
                inStream_V_data_V_0_payload_B <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outStream_V_data_V_1_load_A)) then
                outStream_V_data_V_1_payload_A <= data_fu_1665_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outStream_V_data_V_1_load_B)) then
                outStream_V_data_V_1_payload_B <= data_fu_1665_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outStream_V_last_V_1_load_A)) then
                outStream_V_last_V_1_payload_A <= tmp_last_V_fu_1608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outStream_V_last_V_1_load_B)) then
                outStream_V_last_V_1_payload_B <= tmp_last_V_fu_1608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_816_p2))) then
                result_0_reg_468 <= result_0_s_fu_1108_p3;
                result_1_reg_456 <= result_1_s_fu_1100_p3;
                result_2_reg_444 <= newSel20_fu_1084_p3;
                result_3_reg_432 <= newSel18_fu_1068_p3;
                result_4_reg_420 <= newSel15_fu_1044_p3;
                result_5_reg_408 <= newSel13_fu_1028_p3;
                result_6_reg_396 <= newSel10_fu_1004_p3;
                result_7_reg_384 <= newSel7_fu_980_p3;
                result_8_reg_372 <= newSel3_fu_948_p3;
                result_9_reg_360 <= newSel1_fu_932_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                tmp_8_reg_1909 <= tmp_8_fu_1593_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp3_iter1, exitcond_reg_1914, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond_reg_1914, exitcond1_fu_816_p2, exitcond2_fu_1116_p2, ap_enable_reg_pp1_iter0, exitcond3_fu_1453_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter8, exitcond_fu_1596_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter7, ap_condition_1889)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_lv1_0 = exitcond1_fu_816_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond2_fu_1116_p2))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter7)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond3_fu_1453_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter8) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter7))) or (not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = exitcond3_fu_1453_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1)))) and not((not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and not((ap_const_lv1_0 = exitcond_fu_1596_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1))) or (not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and not((ap_const_lv1_0 = exitcond_fu_1596_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp3_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                if (not((ap_condition_1889 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state16 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4 downto 4);

    ap_condition_1889_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in)
    begin
                ap_condition_1889 <= ((outStream_V_data_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_dest_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state20, ap_condition_1889)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state20) and not((ap_condition_1889 = ap_const_boolean_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20, ap_condition_1889)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state20) and not((ap_condition_1889 = ap_const_boolean_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bias_address0 <= i1_cast_fu_1128_p1(4 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_1602_p2 <= std_logic_vector(unsigned(writeCount_assign_phi_fu_738_p4) + unsigned(ap_const_lv4_1));
    data_2_cast_fu_1661_p1 <= std_logic_vector(resize(unsigned(data_2_fu_1653_p3),32));
    data_2_fu_1653_p3 <= 
        ap_const_lv31_0 when (tmp_10_fu_1645_p3(0) = '1') else 
        tmp_9_fu_1641_p1;
    data_fu_1665_p3 <= 
        data_2_cast_fu_1661_p1 when (tmp_8_reg_1909(0) = '1') else 
        data_1_fu_1615_p12;
    exitcond1_fu_816_p2 <= "1" when (i_reg_480 = ap_const_lv4_A) else "0";
    exitcond2_fu_1116_p2 <= "1" when (i1_phi_fu_605_p4 = ap_const_lv4_A) else "0";
    exitcond3_fu_1453_p2 <= "1" when (row_reg_723 = ap_const_lv6_32) else "0";
    exitcond_fu_1596_p2 <= "1" when (writeCount_assign_phi_fu_738_p4 = ap_const_lv4_A) else "0";

    grp_fixed_point_mul_fu_746_ap_ce_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            grp_fixed_point_mul_fu_746_ap_ce <= ap_const_logic_1;
        else 
            grp_fixed_point_mul_fu_746_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fixed_point_mul_fu_753_ap_ce_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            grp_fixed_point_mul_fu_753_ap_ce <= ap_const_logic_1;
        else 
            grp_fixed_point_mul_fu_753_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fixed_point_mul_fu_760_ap_ce_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            grp_fixed_point_mul_fu_760_ap_ce <= ap_const_logic_1;
        else 
            grp_fixed_point_mul_fu_760_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fixed_point_mul_fu_767_ap_ce_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            grp_fixed_point_mul_fu_767_ap_ce <= ap_const_logic_1;
        else 
            grp_fixed_point_mul_fu_767_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fixed_point_mul_fu_774_ap_ce_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            grp_fixed_point_mul_fu_774_ap_ce <= ap_const_logic_1;
        else 
            grp_fixed_point_mul_fu_774_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fixed_point_mul_fu_781_ap_ce_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            grp_fixed_point_mul_fu_781_ap_ce <= ap_const_logic_1;
        else 
            grp_fixed_point_mul_fu_781_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fixed_point_mul_fu_788_ap_ce_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            grp_fixed_point_mul_fu_788_ap_ce <= ap_const_logic_1;
        else 
            grp_fixed_point_mul_fu_788_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fixed_point_mul_fu_795_ap_ce_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            grp_fixed_point_mul_fu_795_ap_ce <= ap_const_logic_1;
        else 
            grp_fixed_point_mul_fu_795_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fixed_point_mul_fu_802_ap_ce_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            grp_fixed_point_mul_fu_802_ap_ce <= ap_const_logic_1;
        else 
            grp_fixed_point_mul_fu_802_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fixed_point_mul_fu_809_ap_ce_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            grp_fixed_point_mul_fu_809_ap_ce <= ap_const_logic_1;
        else 
            grp_fixed_point_mul_fu_809_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    i1_cast_fu_1128_p1 <= std_logic_vector(resize(unsigned(i1_phi_fu_605_p4),32));

    i1_phi_fu_605_p4_assign_proc : process(i1_reg_601, exitcond2_reg_1736, ap_CS_fsm_pp1_stage0, i_2_reg_1740, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond2_reg_1736))) then 
            i1_phi_fu_605_p4 <= i_2_reg_1740;
        else 
            i1_phi_fu_605_p4 <= i1_reg_601;
        end if; 
    end process;

    i_1_fu_822_p2 <= std_logic_vector(unsigned(i_reg_480) + unsigned(ap_const_lv4_1));
    i_2_fu_1122_p2 <= std_logic_vector(unsigned(i1_phi_fu_605_p4) + unsigned(ap_const_lv4_1));

    inStream_TDATA_blk_n_assign_proc : process(inStream_V_data_V_0_state, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800))) then 
            inStream_TDATA_blk_n <= inStream_V_data_V_0_state(0);
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_TREADY <= inStream_V_dest_V_0_state(1);
    inStream_V_data_V_0_ack_in <= inStream_V_data_V_0_state(1);

    inStream_V_data_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            inStream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_data_V_0_data_out_assign_proc : process(inStream_V_data_V_0_payload_A, inStream_V_data_V_0_payload_B, inStream_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = inStream_V_data_V_0_sel)) then 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_B;
        else 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_A;
        end if; 
    end process;

    inStream_V_data_V_0_load_A <= (inStream_V_data_V_0_state_cmp_full and not(inStream_V_data_V_0_sel_wr));
    inStream_V_data_V_0_load_B <= (inStream_V_data_V_0_sel_wr and inStream_V_data_V_0_state_cmp_full);
    inStream_V_data_V_0_sel <= inStream_V_data_V_0_sel_rd;
    inStream_V_data_V_0_state_cmp_full <= '0' when (inStream_V_data_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_data_V_0_vld_in <= inStream_TVALID;
    inStream_V_data_V_0_vld_out <= inStream_V_data_V_0_state(0);

    inStream_V_dest_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    inStream_V_dest_V_0_vld_in <= inStream_TVALID;
    newSel10_fu_1004_p3 <= 
        result_6_reg_396 when (or_cond4_fu_914_p2(0) = '1') else 
        newSel9_fu_996_p3;
    newSel11_fu_1012_p3 <= 
        result_5_reg_408 when (sel_tmp4_fu_852_p2(0) = '1') else 
        ap_const_lv32_0;
    newSel12_fu_1020_p3 <= 
        newSel11_fu_1012_p3 when (or_cond2_fu_894_p2(0) = '1') else 
        result_5_reg_408;
    newSel13_fu_1028_p3 <= 
        result_5_reg_408 when (or_cond4_fu_914_p2(0) = '1') else 
        newSel12_fu_1020_p3;
    newSel14_fu_1036_p3 <= 
        ap_const_lv32_0 when (sel_tmp4_fu_852_p2(0) = '1') else 
        result_4_reg_420;
    newSel15_fu_1044_p3 <= 
        result_4_reg_420 when (or_cond4_fu_914_p2(0) = '1') else 
        newSel14_fu_1036_p3;
    newSel16_fu_1052_p3 <= 
        result_3_reg_432 when (sel_tmp6_fu_864_p2(0) = '1') else 
        ap_const_lv32_0;
    newSel17_fu_1060_p3 <= 
        result_3_reg_432 when (or_cond_fu_882_p2(0) = '1') else 
        newSel16_fu_1052_p3;
    newSel18_fu_1068_p3 <= 
        newSel17_fu_1060_p3 when (or_cond4_fu_914_p2(0) = '1') else 
        result_3_reg_432;
    newSel19_fu_1076_p3 <= 
        ap_const_lv32_0 when (sel_tmp6_fu_864_p2(0) = '1') else 
        result_2_reg_444;
    newSel1_fu_932_p3 <= 
        result_9_reg_360 when (or_cond6_fu_926_p2(0) = '1') else 
        newSel_fu_906_p3;
    newSel20_fu_1084_p3 <= 
        result_2_reg_444 when (or_cond_fu_882_p2(0) = '1') else 
        newSel19_fu_1076_p3;
    newSel21_fu_1243_p3 <= 
        result_9_2_reg_491 when (sel_tmp10_fu_1165_p2(0) = '1') else 
        result_9_24_fu_1159_p2;
    newSel22_fu_1277_p3 <= 
        result_9_24_fu_1159_p2 when (sel_tmp10_fu_1165_p2(0) = '1') else 
        result_8_2_reg_502;
    newSel23_fu_1293_p3 <= 
        result_9_7_reg_513 when (sel_tmp12_fu_1177_p2(0) = '1') else 
        result_9_24_fu_1159_p2;
    newSel24_fu_1301_p3 <= 
        result_9_7_reg_513 when (or_cond9_fu_1231_p2(0) = '1') else 
        newSel23_fu_1293_p3;
    newSel25_fu_1309_p3 <= 
        result_9_7_reg_513 when (or_cond11_fu_1251_p2(0) = '1') else 
        newSel24_fu_1301_p3;
    newSel26_fu_1325_p3 <= 
        result_9_24_fu_1159_p2 when (sel_tmp12_fu_1177_p2(0) = '1') else 
        result_9_9_reg_524;
    newSel27_fu_1333_p3 <= 
        result_9_9_reg_524 when (or_cond9_fu_1231_p2(0) = '1') else 
        newSel26_fu_1325_p3;
    newSel28_fu_1349_p3 <= 
        result_9_20_reg_535 when (sel_tmp14_fu_1189_p2(0) = '1') else 
        result_9_24_fu_1159_p2;
    newSel29_fu_1357_p3 <= 
        newSel28_fu_1349_p3 when (or_cond9_fu_1231_p2(0) = '1') else 
        result_9_20_reg_535;
    newSel2_fu_940_p3 <= 
        ap_const_lv32_0 when (sel_tmp_fu_828_p2(0) = '1') else 
        result_8_reg_372;
    newSel30_fu_1373_p3 <= 
        result_9_24_fu_1159_p2 when (sel_tmp14_fu_1189_p2(0) = '1') else 
        result_9_3_reg_546;
    newSel31_fu_1389_p3 <= 
        result_9_11_reg_557 when (sel_tmp16_fu_1201_p2(0) = '1') else 
        result_9_24_fu_1159_p2;
    newSel32_fu_1397_p3 <= 
        result_9_11_reg_557 when (or_cond7_fu_1219_p2(0) = '1') else 
        newSel31_fu_1389_p3;
    newSel33_fu_1413_p3 <= 
        result_9_24_fu_1159_p2 when (sel_tmp16_fu_1201_p2(0) = '1') else 
        result_9_13_reg_568;
    newSel3_fu_948_p3 <= 
        result_8_reg_372 when (or_cond6_fu_926_p2(0) = '1') else 
        newSel2_fu_940_p3;
    newSel4_fu_956_p3 <= 
        result_7_reg_384 when (sel_tmp2_fu_840_p2(0) = '1') else 
        ap_const_lv32_0;
    newSel5_fu_964_p3 <= 
        result_7_reg_384 when (or_cond2_fu_894_p2(0) = '1') else 
        newSel4_fu_956_p3;
    newSel6_fu_972_p3 <= 
        result_7_reg_384 when (or_cond4_fu_914_p2(0) = '1') else 
        newSel5_fu_964_p3;
    newSel7_fu_980_p3 <= 
        newSel6_fu_972_p3 when (or_cond6_fu_926_p2(0) = '1') else 
        result_7_reg_384;
    newSel8_fu_988_p3 <= 
        ap_const_lv32_0 when (sel_tmp2_fu_840_p2(0) = '1') else 
        result_6_reg_396;
    newSel9_fu_996_p3 <= 
        result_6_reg_396 when (or_cond2_fu_894_p2(0) = '1') else 
        newSel8_fu_988_p3;
    newSel_fu_906_p3 <= 
        result_9_reg_360 when (sel_tmp_fu_828_p2(0) = '1') else 
        ap_const_lv32_0;
    or_cond10_fu_1237_p2 <= (sel_tmp12_fu_1177_p2 or sel_tmp11_fu_1171_p2);
    or_cond11_fu_1251_p2 <= (or_cond7_fu_1219_p2 or or_cond8_fu_1225_p2);
    or_cond12_fu_1257_p2 <= (or_cond9_fu_1231_p2 or or_cond10_fu_1237_p2);
    or_cond13_fu_1263_p2 <= (or_cond11_fu_1251_p2 or or_cond12_fu_1257_p2);
    or_cond1_fu_888_p2 <= (sel_tmp6_fu_864_p2 or sel_tmp5_fu_858_p2);
    or_cond2_fu_894_p2 <= (sel_tmp4_fu_852_p2 or sel_tmp3_fu_846_p2);
    or_cond3_fu_900_p2 <= (sel_tmp2_fu_840_p2 or sel_tmp1_fu_834_p2);
    or_cond4_fu_914_p2 <= (or_cond_fu_882_p2 or or_cond1_fu_888_p2);
    or_cond5_fu_920_p2 <= (or_cond2_fu_894_p2 or or_cond3_fu_900_p2);
    or_cond6_fu_926_p2 <= (or_cond4_fu_914_p2 or or_cond5_fu_920_p2);
    or_cond7_fu_1219_p2 <= (sel_tmp18_fu_1213_p2 or sel_tmp17_fu_1207_p2);
    or_cond8_fu_1225_p2 <= (sel_tmp16_fu_1201_p2 or sel_tmp15_fu_1195_p2);
    or_cond9_fu_1231_p2 <= (sel_tmp14_fu_1189_p2 or sel_tmp13_fu_1183_p2);
    or_cond_fu_882_p2 <= (sel_tmp8_fu_876_p2 or sel_tmp7_fu_870_p2);
    outStream_TDATA <= outStream_V_data_V_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(outStream_V_data_V_1_state, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_reg_1914, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond_reg_1914)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914)))) then 
            outStream_TDATA_blk_n <= outStream_V_data_V_1_state(1);
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_V_1_ack_in <= outStream_V_data_V_1_state(1);
    outStream_V_data_V_1_ack_out <= outStream_TREADY;

    outStream_V_data_V_1_data_out_assign_proc : process(outStream_V_data_V_1_payload_A, outStream_V_data_V_1_payload_B, outStream_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = outStream_V_data_V_1_sel)) then 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_B;
        else 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_A;
        end if; 
    end process;

    outStream_V_data_V_1_load_A <= (outStream_V_data_V_1_state_cmp_full and not(outStream_V_data_V_1_sel_wr));
    outStream_V_data_V_1_load_B <= (outStream_V_data_V_1_sel_wr and outStream_V_data_V_1_state_cmp_full);
    outStream_V_data_V_1_sel <= outStream_V_data_V_1_sel_rd;
    outStream_V_data_V_1_state_cmp_full <= '0' when (outStream_V_data_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_data_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_reg_1914, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond_reg_1914)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))))) then 
            outStream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_data_V_1_vld_out <= outStream_V_data_V_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;
    outStream_V_dest_V_1_data_out <= ap_const_lv6_0;
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;

    outStream_V_dest_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_reg_1914, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond_reg_1914)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))))) then 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;
    outStream_V_id_V_1_data_out <= ap_const_lv5_0;
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;

    outStream_V_id_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_reg_1914, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond_reg_1914)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))))) then 
            outStream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;
    outStream_V_keep_V_1_data_out <= ap_const_lv4_F;
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;

    outStream_V_keep_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_reg_1914, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond_reg_1914)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))))) then 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = outStream_V_last_V_1_sel)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_sel_wr and outStream_V_last_V_1_state_cmp_full);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_last_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_reg_1914, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond_reg_1914)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))))) then 
            outStream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;
    outStream_V_strb_V_1_data_out <= ap_const_lv4_0;
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;

    outStream_V_strb_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_reg_1914, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond_reg_1914)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))))) then 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;
    outStream_V_user_V_1_data_out <= ap_const_lv2_0;
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;

    outStream_V_user_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_reg_1914, ap_enable_reg_pp3_iter2, ap_pipeline_reg_pp3_iter1_exitcond_reg_1914)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and not((((ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp3_iter1_exitcond_reg_1914) and (ap_const_logic_0 = outStream_V_data_V_1_ack_in)))))) then 
            outStream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);
    result_0_1_fu_1497_p2 <= std_logic_vector(signed(result_0_1_trunc_ex_fu_1493_p1) + signed(result_0_4_reg_712));
        result_0_1_trunc_ex_fu_1493_p1 <= std_logic_vector(resize(signed(grp_fixed_point_mul_fu_746_ap_return),32));

    result_0_s_fu_1108_p3 <= 
        ap_const_lv32_0 when (sel_tmp8_fu_876_p2(0) = '1') else 
        result_0_reg_468;
    result_1_1_fu_1507_p2 <= std_logic_vector(signed(result_1_1_trunc_ex_fu_1503_p1) + signed(result_1_4_reg_701));
        result_1_1_trunc_ex_fu_1503_p1 <= std_logic_vector(resize(signed(grp_fixed_point_mul_fu_753_ap_return),32));

    result_1_s_fu_1100_p3 <= 
        result_1_reg_456 when (sel_tmp8_fu_876_p2(0) = '1') else 
        sel_tmp9_fu_1092_p3;
    result_2_1_fu_1517_p2 <= std_logic_vector(signed(result_2_1_trunc_ex_fu_1513_p1) + signed(result_2_4_reg_690));
        result_2_1_trunc_ex_fu_1513_p1 <= std_logic_vector(resize(signed(grp_fixed_point_mul_fu_760_ap_return),32));

    result_3_1_fu_1527_p2 <= std_logic_vector(signed(result_3_1_trunc_ex_fu_1523_p1) + signed(result_3_4_reg_679));
        result_3_1_trunc_ex_fu_1523_p1 <= std_logic_vector(resize(signed(grp_fixed_point_mul_fu_767_ap_return),32));

    result_4_1_fu_1537_p2 <= std_logic_vector(signed(result_4_1_trunc_ex_fu_1533_p1) + signed(result_4_4_reg_668));
        result_4_1_trunc_ex_fu_1533_p1 <= std_logic_vector(resize(signed(grp_fixed_point_mul_fu_774_ap_return),32));

    result_5_1_fu_1547_p2 <= std_logic_vector(signed(result_5_1_trunc_ex_fu_1543_p1) + signed(result_5_4_reg_657));
        result_5_1_trunc_ex_fu_1543_p1 <= std_logic_vector(resize(signed(grp_fixed_point_mul_fu_781_ap_return),32));

    result_6_1_fu_1557_p2 <= std_logic_vector(signed(result_6_1_trunc_ex_fu_1553_p1) + signed(result_6_4_reg_646));
        result_6_1_trunc_ex_fu_1553_p1 <= std_logic_vector(resize(signed(grp_fixed_point_mul_fu_788_ap_return),32));

    result_7_1_fu_1567_p2 <= std_logic_vector(signed(result_7_1_trunc_ex_fu_1563_p1) + signed(result_7_4_reg_635));
        result_7_1_trunc_ex_fu_1563_p1 <= std_logic_vector(resize(signed(grp_fixed_point_mul_fu_795_ap_return),32));

    result_8_1_fu_1577_p2 <= std_logic_vector(signed(result_8_1_trunc_ex_fu_1573_p1) + signed(result_8_4_reg_624));
        result_8_1_trunc_ex_fu_1573_p1 <= std_logic_vector(resize(signed(grp_fixed_point_mul_fu_802_ap_return),32));

    result_9_10_fu_1341_p3 <= 
        result_9_9_reg_524 when (or_cond11_fu_1251_p2(0) = '1') else 
        newSel27_fu_1333_p3;
    result_9_12_fu_1365_p3 <= 
        result_9_20_reg_535 when (or_cond11_fu_1251_p2(0) = '1') else 
        newSel29_fu_1357_p3;
    result_9_14_fu_1381_p3 <= 
        result_9_3_reg_546 when (or_cond11_fu_1251_p2(0) = '1') else 
        newSel30_fu_1373_p3;
    result_9_16_fu_1405_p3 <= 
        newSel32_fu_1397_p3 when (or_cond11_fu_1251_p2(0) = '1') else 
        result_9_11_reg_557;
    result_9_18_fu_1421_p3 <= 
        result_9_13_reg_568 when (or_cond7_fu_1219_p2(0) = '1') else 
        newSel33_fu_1413_p3;
    result_9_1_fu_1587_p2 <= std_logic_vector(signed(result_9_1_trunc_ex_fu_1583_p1) + signed(result_9_4_reg_613));
        result_9_1_trunc_ex_fu_1583_p1 <= std_logic_vector(resize(signed(grp_fixed_point_mul_fu_809_ap_return),32));

    result_9_21_fu_1429_p3 <= 
        result_9_24_fu_1159_p2 when (sel_tmp17_fu_1207_p2(0) = '1') else 
        result_9_15_reg_579;
    result_9_22_fu_1437_p3 <= 
        result_9_15_reg_579 when (sel_tmp18_fu_1213_p2(0) = '1') else 
        result_9_21_fu_1429_p3;
    result_9_23_fu_1445_p3 <= 
        result_9_24_fu_1159_p2 when (sel_tmp18_fu_1213_p2(0) = '1') else 
        result_9_17_reg_590;
    result_9_24_fu_1159_p2 <= std_logic_vector(unsigned(bias_q0) + unsigned(tmp_1_fu_1133_p12));
    result_9_5_fu_1269_p3 <= 
        result_9_2_reg_491 when (or_cond13_fu_1263_p2(0) = '1') else 
        newSel21_fu_1243_p3;
    result_9_6_fu_1285_p3 <= 
        result_8_2_reg_502 when (or_cond13_fu_1263_p2(0) = '1') else 
        newSel22_fu_1277_p3;
    result_9_8_fu_1317_p3 <= 
        newSel25_fu_1309_p3 when (or_cond13_fu_1263_p2(0) = '1') else 
        result_9_7_reg_513;
    row_1_fu_1459_p2 <= std_logic_vector(unsigned(row_reg_723) + unsigned(ap_const_lv6_1));
    row_cast_fu_1465_p1 <= std_logic_vector(resize(unsigned(row_reg_723),32));
    sel_tmp10_fu_1165_p2 <= "1" when (i1_reg_601 = ap_const_lv4_8) else "0";
    sel_tmp11_fu_1171_p2 <= "1" when (i1_reg_601 = ap_const_lv4_7) else "0";
    sel_tmp12_fu_1177_p2 <= "1" when (i1_reg_601 = ap_const_lv4_6) else "0";
    sel_tmp13_fu_1183_p2 <= "1" when (i1_reg_601 = ap_const_lv4_5) else "0";
    sel_tmp14_fu_1189_p2 <= "1" when (i1_reg_601 = ap_const_lv4_4) else "0";
    sel_tmp15_fu_1195_p2 <= "1" when (i1_reg_601 = ap_const_lv4_3) else "0";
    sel_tmp16_fu_1201_p2 <= "1" when (i1_reg_601 = ap_const_lv4_2) else "0";
    sel_tmp17_fu_1207_p2 <= "1" when (i1_reg_601 = ap_const_lv4_1) else "0";
    sel_tmp18_fu_1213_p2 <= "1" when (i1_reg_601 = ap_const_lv4_0) else "0";
    sel_tmp1_fu_834_p2 <= "1" when (i_reg_480 = ap_const_lv4_7) else "0";
    sel_tmp2_fu_840_p2 <= "1" when (i_reg_480 = ap_const_lv4_6) else "0";
    sel_tmp3_fu_846_p2 <= "1" when (i_reg_480 = ap_const_lv4_5) else "0";
    sel_tmp4_fu_852_p2 <= "1" when (i_reg_480 = ap_const_lv4_4) else "0";
    sel_tmp5_fu_858_p2 <= "1" when (i_reg_480 = ap_const_lv4_3) else "0";
    sel_tmp6_fu_864_p2 <= "1" when (i_reg_480 = ap_const_lv4_2) else "0";
    sel_tmp7_fu_870_p2 <= "1" when (i_reg_480 = ap_const_lv4_1) else "0";
    sel_tmp8_fu_876_p2 <= "1" when (i_reg_480 = ap_const_lv4_0) else "0";
    sel_tmp9_fu_1092_p3 <= 
        ap_const_lv32_0 when (sel_tmp7_fu_870_p2(0) = '1') else 
        result_1_reg_456;
    sel_tmp_fu_828_p2 <= "1" when (i_reg_480 = ap_const_lv4_8) else "0";
    tmp_10_fu_1645_p3 <= data_1_fu_1615_p12(31 downto 31);
    tmp_8_fu_1593_p1 <= ctrl_read_reg_1673(1 - 1 downto 0);
    tmp_9_fu_1641_p1 <= data_1_fu_1615_p12(31 - 1 downto 0);
    tmp_last_V_fu_1608_p2 <= "1" when (writeCount_assign_reg_734 = ap_const_lv4_9) else "0";
    weight_0_address0 <= row_cast_fu_1465_p1(6 - 1 downto 0);

    weight_0_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_0_ce0 <= ap_const_logic_1;
        else 
            weight_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_1_address0 <= row_cast_fu_1465_p1(6 - 1 downto 0);

    weight_1_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_1_ce0 <= ap_const_logic_1;
        else 
            weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_2_address0 <= row_cast_fu_1465_p1(6 - 1 downto 0);

    weight_2_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_2_ce0 <= ap_const_logic_1;
        else 
            weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_3_address0 <= row_cast_fu_1465_p1(6 - 1 downto 0);

    weight_3_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_3_ce0 <= ap_const_logic_1;
        else 
            weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_4_address0 <= row_cast_fu_1465_p1(6 - 1 downto 0);

    weight_4_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_4_ce0 <= ap_const_logic_1;
        else 
            weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_5_address0 <= row_cast_fu_1465_p1(6 - 1 downto 0);

    weight_5_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_5_ce0 <= ap_const_logic_1;
        else 
            weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_6_address0 <= row_cast_fu_1465_p1(6 - 1 downto 0);

    weight_6_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_6_ce0 <= ap_const_logic_1;
        else 
            weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_7_address0 <= row_cast_fu_1465_p1(6 - 1 downto 0);

    weight_7_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_7_ce0 <= ap_const_logic_1;
        else 
            weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_8_address0 <= row_cast_fu_1465_p1(6 - 1 downto 0);

    weight_8_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_8_ce0 <= ap_const_logic_1;
        else 
            weight_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_9_address0 <= row_cast_fu_1465_p1(6 - 1 downto 0);

    weight_9_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond3_reg_1800, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond3_reg_1800) and (inStream_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_9_ce0 <= ap_const_logic_1;
        else 
            weight_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    writeCount_assign_phi_fu_738_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_reg_1914, writeCount_assign_reg_734, col_reg_1918)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_reg_1914))) then 
            writeCount_assign_phi_fu_738_p4 <= col_reg_1918;
        else 
            writeCount_assign_phi_fu_738_p4 <= writeCount_assign_reg_734;
        end if; 
    end process;

end behav;
