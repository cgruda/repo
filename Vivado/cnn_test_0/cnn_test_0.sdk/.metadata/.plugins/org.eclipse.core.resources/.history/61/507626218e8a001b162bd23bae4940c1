/**
 * Project 20-1-1-2187
 * CNN accelerator
 *
 * Chaim Gruda
 * Shay Tsabar
 *
 */

/*
 * INCLUDES
 ******************************************************************************
 */

#include <stdio.h>
#include "conv_0.h"
#include "pool_0.h"
#include "cnn_hw.h"
#include "dbg.h"

/*
 * MAIN
 ******************************************************************************
 */


#define MEM_BASE_ADDR 0x01000000
#define TX_BUFFER_BASE (MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE (MEM_BASE_ADDR + 0x00300000)


#define INPUT_DATA_LEN 16
#define OUTPUT_DATA_LEN 16
#define KERNEL_DATA_LEN 9


int main()
{
	int status = XST_SUCCESS;
	struct cnn_hw cnn_hw = {0};

	DBG_LOG_PRINT(TRACE, "hello world\n");


	/******************** temp ***************************/
	u32 *p_dma_buffer_TX = (u32*) TX_BUFFER_BASE;
	u32 *p_dma_buffer_RX = (u32*) RX_BUFFER_BASE;

	u32 kernel_data[KERNEL_DATA_LEN];
	u32 input_data[INPUT_DATA_LEN];
	u32 input_ctrl;

	for (int i = 0; i < INPUT_DATA_LEN; i++) {
		input_data[i] = i;
	}
	for (int i = 0; i < KERNEL_DATA_LEN; i++) {
		kernel_data[i] = 2;
	}
	input_ctrl = 0;
	/*******************************************************/


	status = cnn_hw_init(&cnn_hw);
	if (status != XST_SUCCESS) {
		return status;
	}


	/******************** temp ***************************/
	do {
		conv_0_kernel_set(&cnn_hw.conv_0_hw, kernel_data);
		conv_0_ctrl_set(&cnn_hw.conv_0_hw, input_ctrl);
		for (int i = 0; i < INPUT_DATA_LEN; i++) {
			p_dma_buffer_TX[i] = input_data[i];
		}
		XCnn_Start(&cnn_hw.cnn_0);

		Xil_DCacheFlushRange((u32) p_dma_buffer_TX, INPUT_DATA_LEN * sizeof(u32));
		Xil_DCacheFlushRange((u32) p_dma_buffer_RX, OUTPUT_DATA_LEN * sizeof(u32));

		printf("Sending data to IP core slave\n");
		XAxiDma_SimpleTransfer(&cnn_hw.axiDMA, (u32) p_dma_buffer_TX, INPUT_DATA_LEN * sizeof(u32), XAXIDMA_DMA_TO_DEVICE);

		printf("Receive data from IP core\n");
		XAxiDma_SimpleTransfer(&cnn_hw.axiDMA, (u32) p_dma_buffer_RX, OUTPUT_DATA_LEN * sizeof(u32), XAXIDMA_DEVICE_TO_DMA);
		while (XAxiDma_Busy(&cnn_hw.axiDMA, XAXIDMA_DEVICE_TO_DMA))
			/* wait */ ;

		Xil_DCacheInvalidateRange((u32) p_dma_buffer_RX, OUTPUT_DATA_LEN * sizeof(u32));

		while (!XCnn_IsDone(&cnn_hw.cnn_0))
			/* wait */ ;
		printf("Calculation complete\n");

		for (int i = 0; i < OUTPUT_DATA_LEN; i++) {
			printf("Recv[%d]=0x%08X\n", i, p_dma_buffer_RX[i]);
		}
	} while (0);
	/*******************************************************/




	// cnn sw init

	// simulation init

	// cnn hw set

	// dbg init

	// print menu
	// main loop with user options:
	// 0. exit
	// 1. run HW and get results
	// 2. run SW and get results
	// 3. run programmed simulation
	// 4. ?

	// free resources

	return 0;
}
