/**
 * Project 20-1-1-2187
 * CNN accelerator
 *
 * Chaim Gruda
 * Shay Tsabar
 *
 */

#include "cnn_config.h"
#include "cnn_hw.h"
#include "cnn_sw.h"
#include "cnn_task.h"
#include "fixed_point.h"
#if (PLATFORM == FPGA)
#include "xil_printf.h"
#else
#include <stdio.h>
#endif
#include <stdint.h>
#if (PLATFORM == FPGA)
#include <xparameters.h>
#endif

#if (PLATFORM == FPGA)
void (*cnn_hw_conv_0_kernel_set[CONV_0_KERNEL_LEN])(XCnn_conv_d54x54_k3x3 *InstancePtr, uint32_t Data) = {
	XCnn_conv_d54x54_k3x3_Set_kernel_0,
	XCnn_conv_d54x54_k3x3_Set_kernel_1,
	XCnn_conv_d54x54_k3x3_Set_kernel_2,
	XCnn_conv_d54x54_k3x3_Set_kernel_3,
	XCnn_conv_d54x54_k3x3_Set_kernel_4,
	XCnn_conv_d54x54_k3x3_Set_kernel_5,
	XCnn_conv_d54x54_k3x3_Set_kernel_6,
	XCnn_conv_d54x54_k3x3_Set_kernel_7,
	XCnn_conv_d54x54_k3x3_Set_kernel_8,
};

void (*cnn_hw_conv_1_kernel_set[CONV_1_KERNEL_LEN])(XCnn_conv_d26x26_k3x3 *InstancePtr, uint32_t Data) = {
	XCnn_conv_d26x26_k3x3_Set_kernel_0,
	XCnn_conv_d26x26_k3x3_Set_kernel_1,
	XCnn_conv_d26x26_k3x3_Set_kernel_2,
	XCnn_conv_d26x26_k3x3_Set_kernel_3,
	XCnn_conv_d26x26_k3x3_Set_kernel_4,
	XCnn_conv_d26x26_k3x3_Set_kernel_5,
	XCnn_conv_d26x26_k3x3_Set_kernel_6,
	XCnn_conv_d26x26_k3x3_Set_kernel_7,
	XCnn_conv_d26x26_k3x3_Set_kernel_8,
};


int cnn_hw_init(struct cnn_hw *p_cnn_hw)
{
	int status = XST_SUCCESS;

	status = XCnn_conv_d54x54_k3x3_Initialize(&p_cnn_hw->conv_0, XPAR_CNN_CONV_D54X54_K3X3_0_DEVICE_ID);
	if (status != XST_SUCCESS)
		return status;

	status = XCnn_pool_d52x52_p2x2_Initialize(&p_cnn_hw->pool_0, XPAR_CNN_POOL_D52X52_P2X2_0_DEVICE_ID);
	if (status != XST_SUCCESS)
		return status;

	status = XCnn_conv_d26x26_k3x3_Initialize(&p_cnn_hw->conv_1, XPAR_CNN_CONV_D26X26_K3X3_0_DEVICE_ID);
	if (status != XST_SUCCESS)
		return status;

	status = XCnn_pool_d24x24_p2x2_Initialize(&p_cnn_hw->pool_1, XPAR_CNN_POOL_D24X24_P2X2_0_DEVICE_ID);
	if (status != XST_SUCCESS)
		return status;

	XAxiDma_Config *axiDMA_cfg;
	if (!(axiDMA_cfg = XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID)))
		return XST_FAILURE;
	status = XAxiDma_CfgInitialize(&p_cnn_hw->axiDMA, axiDMA_cfg);
	if (status != XST_SUCCESS)
		return status;

	XAxiDma_IntrDisable(&p_cnn_hw->axiDMA, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&p_cnn_hw->axiDMA, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

	p_cnn_hw->p_dma_buffer_TX = (uint32_t*)TX_BUFFER_BASE;
	p_cnn_hw->p_dma_buffer_RX = (uint32_t*)RX_BUFFER_BASE;

	return status;
}

void cnn_hw_conv_0_set(XCnn_conv_d54x54_k3x3 *InstancePtr, uint32_t ctrl, float *kernel)
{
	XCnn_conv_d54x54_k3x3_Set_ctrl(InstancePtr, ctrl);
	for (int i = 0; i < CONV_0_KERNEL_LEN; i++) {
		cnn_hw_conv_0_kernel_set[i](InstancePtr, float_2_fixed(kernel[i]));
	}
}

void cnn_hw_conv_1_set(XCnn_conv_d26x26_k3x3 *InstancePtr, uint32_t ctrl, float *kernel)
{
	XCnn_conv_d26x26_k3x3_Set_ctrl(InstancePtr, ctrl);
	for (int i = 0; i < CONV_1_KERNEL_LEN; i++) {
		cnn_hw_conv_1_kernel_set[i](InstancePtr, float_2_fixed(kernel[i]));
	}
}

void cnn_hw_pool_0_set(XCnn_pool_d52x52_p2x2 *InstancePtr, uint32_t ctrl)
{
	XCnn_pool_d52x52_p2x2_Set_ctrl(InstancePtr, ctrl);
}

void cnn_hw_pool_1_set(XCnn_pool_d24x24_p2x2 *InstancePtr, uint32_t ctrl)
{
	XCnn_pool_d24x24_p2x2_Set_ctrl(InstancePtr, ctrl);
}

void cnn_hw_eval(struct cnn_hw *cnn_hw, struct cnn_run *cnn_run)
{
	for (int i = 0; i < CNN_INPUT_LEN; i++) {
		cnn_hw->p_dma_buffer_TX[i] = float_2_fixed(cnn_run->input_data[i]);
	}

	XCnn_pool_d24x24_p2x2_Start(&cnn_hw->pool_1);
	XCnn_conv_d26x26_k3x3_Start(&cnn_hw->conv_1);
	XCnn_pool_d52x52_p2x2_Start(&cnn_hw->pool_0);
	XCnn_conv_d54x54_k3x3_Start(&cnn_hw->conv_0);

	Xil_DCacheFlushRange((uint32_t) cnn_hw->p_dma_buffer_TX, CNN_INPUT_LEN * sizeof(uint32_t));
	Xil_DCacheFlushRange((uint32_t) cnn_hw->p_dma_buffer_RX, CNN_OUTPUT_LEN * sizeof(uint32_t));

	capture_time(&cnn_run->tStart);
	XAxiDma_SimpleTransfer(&cnn_hw->axiDMA, (uint32_t)cnn_hw->p_dma_buffer_TX, CNN_INPUT_LEN * sizeof(uint32_t), XAXIDMA_DMA_TO_DEVICE);
	XAxiDma_SimpleTransfer(&cnn_hw->axiDMA, (uint32_t)cnn_hw->p_dma_buffer_RX, CNN_OUTPUT_LEN * sizeof(uint32_t), XAXIDMA_DEVICE_TO_DMA);
	while (XAxiDma_Busy(&cnn_hw->axiDMA, XAXIDMA_DEVICE_TO_DMA));
	Xil_DCacheInvalidateRange((uint32_t) cnn_hw->p_dma_buffer_RX, CNN_OUTPUT_LEN * sizeof(uint32_t));

	while (!XCnn_pool_d24x24_p2x2_IsDone(&cnn_hw->pool_1));

	for (int i = 0; i < POOL_1_OUTPUT_LEN; i++) {
		if (cnn_hw->p_dma_buffer_RX[i]) {
			PRINT_UI("[%d]  ", i);
			fixed_point_print(cnn_hw->p_dma_buffer_RX[i]);
			PRINT_UI("\r\n");
		}
	}

	capture_time(&cnn_run->tEnd);
}

void cnn_hw_reset(struct cnn_hw *cnn_hw)
{
	for (int i = 0; i < CNN_OUTPUT_LEN; i++) {
		cnn_hw->output_data[i] = 0;
	}
}

void cnn_hw_exec(struct cnn_hw *cnn_hw, struct cnn_run *cnn_run, bool verbose)
{
	if (!cnn_run->valid) {
		return;
	}

	cnn_hw_reset(cnn_hw);
	cnn_hw_eval(cnn_hw, cnn_run);
	cnn_result(cnn_hw->output_data, cnn_run);
}
#endif // (PLATFORM == FPGA)

void cnn_hw_set(struct cnn_hw *cnn_hw, struct cnn_config *cnn_conf)
{
#if (PLATFORM == FPGA)
	cnn_hw_conv_0_set(&cnn_hw->conv_0, cnn_conf->conv_0_ctrl, cnn_conf->conv_0_kernel);
	cnn_hw_pool_0_set(&cnn_hw->pool_0, cnn_conf->pool_0_ctrl);
	cnn_hw_conv_1_set(&cnn_hw->conv_1, cnn_conf->conv_1_ctrl, cnn_conf->conv_1_kernel);
	cnn_hw_pool_1_set(&cnn_hw->pool_1, cnn_conf->pool_1_ctrl);
#else
	return;
#endif
}

void cnn_hw_run_single(struct cnn_hw *cnn_hw)
{
	print_header("hardware");
#if (PLATFORM == FPGA)
	struct cnn_run cnn_run = {0};
	cnn_prep_run(&cnn_run, DEFAULT_FILE_PATH, DEFAULT_IDX);
	//print_csv_image("img:", cnn_run.input_data);
	cnn_hw_exec(cnn_hw, &cnn_run, true);
	cnn_run_print_result(&cnn_run);
#else
	PRINT_UI("        unsupported platform \n\r");
#endif
	print_tail();
}

void cnn_hw_run_all(struct cnn_hw *cnn_hw)
{
	print_header("hardware");
#if (PLATFORM == FPGA)
	char csv_data_path[CNN_SIM_DATA_FILE_PATH_MAX_LEN];
	struct cnn_stat all_stat = {0};
	all_stat.idx = -1;
	struct cnn_run cnn_run = {0};

	for (int i = 0; i < 10; i++) {
		struct cnn_stat idx_stat = {0};
		idx_stat.idx = i;
		FILEO *idx_fptr = index_file_open(i);
		if (!idx_fptr) {
			PRINT_UI("failed to open index %d!\n\r", i);
			continue;
		}
		while (next_csv_path_get(idx_fptr, csv_data_path) == 0) {
			if (!(idx_stat.img_cnt % 38)) {
				PRINT_UI(".");
			}
			if (!*csv_data_path) {
				cnn_stat_print_idx(&idx_stat);
				cnn_stat(&all_stat, NULL, &idx_stat);
				break;
			}
			cnn_prep_run(&cnn_run, csv_data_path, i);
			cnn_hw_exec(cnn_hw, &cnn_run, false);
			cnn_stat(&idx_stat, &cnn_run, NULL);
		}
		close_file(idx_fptr);
	}
	PRINT_UI("+++++++++++ summary ++++++++++");
	cnn_stat_print_idx(&all_stat);
	#else
	PRINT_UI("        unsupported platform \n\r");
#endif
	print_tail();
}


