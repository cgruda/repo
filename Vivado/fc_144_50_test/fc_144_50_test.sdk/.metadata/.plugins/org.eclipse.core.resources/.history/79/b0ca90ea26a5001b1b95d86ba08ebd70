/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#define PRINT_UI xil_printf

#include "xcnn_fc_i144_o50.h"
#include <stdint.h>
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "fixed_point.h"
#include "cnn_config.h"
#include <xparameters.h>
#include "xaxidma.h"

#define MEM_BASE_ADDR 0x01000000
#define TX_BUFFER_BASE (MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE (MEM_BASE_ADDR + 0x00300000)


void print_fixed_arr(char *text, uint32_t *data, int len)
{
	PRINT_UI("%s\r\n", text);
	for (int i = 0; i < len; i++) {
		PRINT_UI("[%d] ", i);
		fixed_point_print(data[i]);
		PRINT_UI("\r\n");
	}
}

void print_float_arr(char *text, float *data, int len)
{
	PRINT_UI("%s\r\n", text);
	for (int i = 0; i < len; i++) {
		PRINT_UI("[%d] ", i);
		print_float(data[i]);
		PRINT_UI("\r\n");
	}
}

struct cnn_hw {
	XCnn_fc_i144_o50 fc_0;
	XAxiDma axiDMA;
	uint32_t *p_dma_buffer_TX;
	uint32_t *p_dma_buffer_RX;
	float input_data[FC_0_INPUT_LEN];
	float weight[FC_0_WEIGHT_LEN];
	float bias[FC_0_BIAS_LEN];
	uint32_t ctrl;
};


int cnn_hw_init(struct cnn_hw *p_cnn_hw)
{
	int status = XST_SUCCESS;

	status = XCnn_fc_i144_o50_Initialize(&p_cnn_hw->fc_0, XPAR_CNN_FC_I144_O50_0_DEVICE_ID);
	if (status != XST_SUCCESS)
		return status;

	XAxiDma_Config *axiDMA_cfg;
	if (!(axiDMA_cfg = XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID)))
		return XST_FAILURE;
	status = XAxiDma_CfgInitialize(&p_cnn_hw->axiDMA, axiDMA_cfg);
	if (status != XST_SUCCESS)
		return status;

	XAxiDma_IntrDisable(&p_cnn_hw->axiDMA, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&p_cnn_hw->axiDMA, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

	p_cnn_hw->p_dma_buffer_TX = (uint32_t*)TX_BUFFER_BASE;
	p_cnn_hw->p_dma_buffer_RX = (uint32_t*)RX_BUFFER_BASE;

	return status;
}


u32 (*cnn_hw_fc_0_weight_write[FC_0_WEIGHT_COLS / 2])(XCnn_fc_i144_o50 *InstancePtr, int offset, int *data, int length) = {
	XCnn_fc_i144_o50_Write_weight_0_Words,
	XCnn_fc_i144_o50_Write_weight_1_Words,
	XCnn_fc_i144_o50_Write_weight_2_Words,
	XCnn_fc_i144_o50_Write_weight_3_Words,
	XCnn_fc_i144_o50_Write_weight_4_Words,
	XCnn_fc_i144_o50_Write_weight_5_Words,
	XCnn_fc_i144_o50_Write_weight_6_Words,
	XCnn_fc_i144_o50_Write_weight_7_Words,
	XCnn_fc_i144_o50_Write_weight_8_Words,
	XCnn_fc_i144_o50_Write_weight_9_Words,
	XCnn_fc_i144_o50_Write_weight_10_Words,
	XCnn_fc_i144_o50_Write_weight_11_Words,
	XCnn_fc_i144_o50_Write_weight_12_Words,
	XCnn_fc_i144_o50_Write_weight_13_Words,
	XCnn_fc_i144_o50_Write_weight_14_Words,
	XCnn_fc_i144_o50_Write_weight_15_Words,
	XCnn_fc_i144_o50_Write_weight_16_Words,
	XCnn_fc_i144_o50_Write_weight_17_Words,
	XCnn_fc_i144_o50_Write_weight_18_Words,
	XCnn_fc_i144_o50_Write_weight_19_Words,
	XCnn_fc_i144_o50_Write_weight_20_Words,
	XCnn_fc_i144_o50_Write_weight_21_Words,
	XCnn_fc_i144_o50_Write_weight_22_Words,
	XCnn_fc_i144_o50_Write_weight_23_Words,
	XCnn_fc_i144_o50_Write_weight_24_Words
};

void cnn_hw_fc_0_weight_set(XCnn_fc_i144_o50 *InstancePtr, int row, int col, uint32_t data)
{
	//cnn_hw_fc_0_weight_write[col / 2](InstancePtr, ((FC_0_WEIGHT_ROWS * (col % 2) + row) * 4), (int*)&data, 1);
	cnn_hw_fc_0_weight_write[col / 2](InstancePtr, (((row * 2) + (col % 2)) * 4), (int*)&data, 1);
}

void cnn_hw_fc_0_bias_set(XCnn_fc_i144_o50 *InstancePtr, int col, uint32_t data)
{
	XCnn_fc_i144_o50_Write_bias_Words(InstancePtr, (col * 4), (int*)&data, 1);
}

void cnn_hw_fc_0_set(XCnn_fc_i144_o50 *InstancePtr, uint32_t ctrl, float *weight, float *bias)
{
	XCnn_fc_i144_o50_Set_ctrl(InstancePtr, ctrl);
	for (int i = 0; i < FC_0_BIAS_LEN; i++) {
		cnn_hw_fc_0_bias_set(InstancePtr, i, float_2_fixed(bias[i]));
	}
	for (int i = 0; i < FC_0_WEIGHT_ROWS; i++) {
		for (int j = 0; j < FC_0_WEIGHT_COLS; j++) {
			cnn_hw_fc_0_weight_set(InstancePtr, i, j, float_2_fixed(weight[i * FC_0_WEIGHT_COLS + j]));
		}
	}
}

void cnn_hw_eval(struct cnn_hw *cnn_hw)
{
	for (int i = 0; i < FC_0_INPUT_LEN; i++) {
		cnn_hw->p_dma_buffer_TX[i] = float_2_fixed(cnn_hw->input_data[i]);
	}

	XCnn_fc_i144_o50_Start(&cnn_hw->fc_0);

	Xil_DCacheFlushRange((uint32_t) cnn_hw->p_dma_buffer_TX, FC_0_INPUT_LEN * sizeof(uint32_t));
	Xil_DCacheFlushRange((uint32_t) cnn_hw->p_dma_buffer_RX, FC_0_OUTPUT_LEN * sizeof(uint32_t));

	capture_time(&cnn_run->tStart);
	XAxiDma_SimpleTransfer(&cnn_hw->axiDMA, (uint32_t)cnn_hw->p_dma_buffer_TX, FC_0_INPUT_LEN * sizeof(uint32_t), XAXIDMA_DMA_TO_DEVICE);
	XAxiDma_SimpleTransfer(&cnn_hw->axiDMA, (uint32_t)cnn_hw->p_dma_buffer_RX, FC_0_OUTPUT_LEN * sizeof(uint32_t), XAXIDMA_DEVICE_TO_DMA);
	while (XAxiDma_Busy(&cnn_hw->axiDMA, XAXIDMA_DEVICE_TO_DMA));
	Xil_DCacheInvalidateRange((uint32_t) cnn_hw->p_dma_buffer_RX, FC_0_OUTPUT_LEN * sizeof(uint32_t));

	while (!XCnn_fc_i50_o10_IsDone(&cnn_hw->fc_1));
	print_fixed_arr("fc_0_out:", cnn_hw->p_dma_buffer_RX, FC_0_OUTPUT_LEN);
}


void cnn_hw_set(struct cnn_hw *cnn_hw, struct cnn_config *cnn_conf)
{
	cnn_hw_fc_0_set(&cnn_hw->fc_0, cnn_hw->ctrl, cnn_hw->weight, cnn_hw->bias);
}


int main()
{
    struct cnn_hw hw = {0};

    PRINT_UI("Hello World\n\r");

	init_platform();
    cnn_hw_init(&hw);



    cleanup_platform();
    return 0;
}
