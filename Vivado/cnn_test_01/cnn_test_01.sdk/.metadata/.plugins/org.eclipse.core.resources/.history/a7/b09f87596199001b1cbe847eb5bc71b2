/*
 * main.c
 *
 *  Created on: Mar 18, 2021
 *      Author: cgrud
 */

#include <stdio.h>
#include <xparameters.h>
#include "fixed_point.h"
#include "cnn_config.h"
#include "cnn_hw.h"
#include "stdbool.h"

enum user_choise {
	UC_EXIT,
	UC_RUN_HW
};

// ========================================= TEST DATA SETTER =================================================

void fill_tx_buffer(u32 *buffer, u32 *data)
{
	for (int i = 0; i < CNN_INPUT_LEN; i++) {
		buffer[i] = data[i];
	}
}

int get_user_option()
{
	int choise;
	printf("options:   \n" \
		   "0. exit    \n" \
		   "1. run hw  \n");
	scanf("%d", &choise);
	return choise;
}


int main()
{
	printf("welcome!\n");

	bool exit = false;
	struct cnn_hw cnn_hw;
	struct cnn_config cnn_conf = {0};

	int status = XST_SUCCESS;
	u32 input_data[CNN_INPUT_LEN];
	for (int i = 0; i < CNN_INPUT_LEN; i++) {
		input_data[i] = FLOAT_2_FIXED(2);
	}

	//u32 *p_dma_buffer_TX = (u32*) TX_BUFFER_BASE;
	//u32 *p_dma_buffer_RX = (u32*) RX_BUFFER_BASE;

	status = cnn_hw_init(&cnn_hw);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	cnn_config_init(&cnn_conf);

	do {
		switch (get_user_option()) {
		case UC_EXIT:
			exit = true;
			break;

		case UC_RUN_HW:
			cnn_hw_set(&cnn_hw, &cnn_conf);
			fill_tx_buffer(cnn_hw.p_dma_buffer_TX, input_data);
			cnn_hw_start(&cnn_hw);
			cnn_hw_wait(&cnn_hw);

			Xil_DCacheFlushRange((u32) cnn_hw.p_dma_buffer_TX, CNN_INPUT_LEN * sizeof(u32));
			Xil_DCacheFlushRange((u32) cnn_hw.p_dma_buffer_RX, CNN_OUTPUT_LEN * sizeof(u32));

			XAxiDma_SimpleTransfer(&cnn_hw.axiDMA, (u32) cnn_hw.p_dma_buffer_TX, CNN_INPUT_LEN * sizeof(u32), XAXIDMA_DMA_TO_DEVICE);
			XAxiDma_SimpleTransfer(&cnn_hw.axiDMA, (u32) cnn_hw.p_dma_buffer_RX, CNN_OUTPUT_LEN * sizeof(u32), XAXIDMA_DEVICE_TO_DMA);
			while (XAxiDma_Busy(&cnn_hw.axiDMA, XAXIDMA_DEVICE_TO_DMA));

			Xil_DCacheInvalidateRange((u32) cnn_hw.p_dma_buffer_RX, CNN_OUTPUT_LEN * sizeof(u32));


			for (int i = 0; i < CNN_OUTPUT_ROWS; i++) {
				for (int j = 0; j < CNN_OUTPUT_ROWS; j++) {
					fixed_point_print(cnn_hw.p_dma_buffer_RX[i]);
				}
				printf("\n");
			}
			break;

		default:
			printf("action not supported\n");
			break;
		}

	} while (!exit);

	printf("goodby!\n");

	return 0;
}



