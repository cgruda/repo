/**
 * Project 20-1-1-2187
 * CNN accelerator
 *
 * Chaim Gruda
 * Shay Tsabar
 *
 */


/*
 * INCLUDES
 ******************************************************************************
 */
#include <stdio.h>
#include <xparameters.h>
#include "xmy_filter_buffer.h"
#include "xaxidma.h"
#include "xtime_l.h"

/*
 * DEFINES
 ******************************************************************************
 */

#define MEM_BASE_ADDR 0x01000000
#define TX_BUFFER_BASE (MEM_BASE_ADDR+0x00100000)
#define RX_BUFFER_BASE (MEM_BASE_ADDR+0x00300000)
#define SIZE_ARR 10000

/*
 * GLOBAL VARS
 ******************************************************************************
 */

XMy_filter_buffer my_filter_buffer;
XMy_filter_buffer_Config *my_filter_buffer_cfg;
XAxiDma axiDMA;
XAxiDma_Config *axiDMA_cfg;

int inStreamData[SIZE_ARR];
int PS_result[SIZE_ARR];

/*
 * FUNCTIONS
 ******************************************************************************
 */

void initPeripherals() {
	printf("initializing doGain\n");
	my_filter_buffer_cfg = XMy_filter_buffer_LookupConfig(XPAR_MY_FILTER_BUFFER_0_DEVICE_ID);
	if (my_filter_buffer_cfg) {
		int status = XMy_filter_buffer_CfgInitialize(&my_filter_buffer, my_filter_buffer_cfg);
		if (status != XST_SUCCESS)
			printf("Error initializing doGain core\n");
	}

	printf("initializing AxiDMA\n");
	axiDMA_cfg = XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID);
	if (axiDMA_cfg) {
		int status = XAxiDma_CfgInitialize(&axiDMA, axiDMA_cfg);
		if (status != XST_SUCCESS)
			printf("Error initializing AxiDMA core\n");
	}

	XAxiDma_IntrDisable(&axiDMA, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&axiDMA, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
}

int main() {
	//int *m_dma_buffer_TX = (int*) TX_BUFFER_BASE;
	int *m_dma_buffer_RX = (int*) RX_BUFFER_BASE;
	XTime tStartPL, tEndPL;
	XTime tStartPS, tEndPS;

	initPeripherals();

	for (int idx = 0; idx < SIZE_ARR; idx++) {
		inStreamData[idx] = idx;
	}


	do {
		int gain = 5;
		//printf("Input gain: ");
		//scanf("%d", &gain);
		XDogain_Set_gain(&doGain, gain);
		XDogain_Start(&doGain);

		Xil_DCacheFlushRange((u32) inStreamData, SIZE_ARR * sizeof(int));
		Xil_DCacheFlushRange((u32) m_dma_buffer_RX, SIZE_ARR * sizeof(int));

		printf("Sending data to IP core slave\n");
		XTime_GetTime(&tStartPL);
		XAxiDma_SimpleTransfer(&axiDMA, (u32) inStreamData, SIZE_ARR * sizeof(int), XAXIDMA_DMA_TO_DEVICE);
		//printf("Receive data from IP core\n");
		XAxiDma_SimpleTransfer(&axiDMA, (u32) m_dma_buffer_RX, SIZE_ARR * sizeof(int), XAXIDMA_DEVICE_TO_DMA);
		while (XAxiDma_Busy(&axiDMA, XAXIDMA_DEVICE_TO_DMA));
		Xil_DCacheInvalidateRange((u32) m_dma_buffer_RX, SIZE_ARR * sizeof(int));
		while (!XDogain_IsDone(&doGain));
		XTime_GetTime(&tEndPL);

		printf("OutputPL took %llu clock cycles. \n", 2*(tEndPL-tStartPL));

		//printf("Calculation complete\n");
		XTime_GetTime(&tStartPS);
		for (int idx = 0; idx < SIZE_ARR; idx++) {
			PS_result[idx] = idx * gain;
			//printf("Recv[%d]=%d\n", idx, m_dma_buffer_RX[idx]);
		}
		XTime_GetTime(&tEndPS);

		printf("OutputPS took %llu clock cycles. \n", 2*(tEndPS-tStartPS));

	} while (0);

	return 0;
}


