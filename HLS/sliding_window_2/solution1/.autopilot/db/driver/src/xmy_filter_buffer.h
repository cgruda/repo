// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XMY_FILTER_BUFFER_H
#define XMY_FILTER_BUFFER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xmy_filter_buffer_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Ctrl_BaseAddress;
    u32 Kernel_bus_BaseAddress;
} XMy_filter_buffer_Config;
#endif

typedef struct {
    u32 Ctrl_BaseAddress;
    u32 Kernel_bus_BaseAddress;
    u32 IsReady;
} XMy_filter_buffer;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XMy_filter_buffer_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XMy_filter_buffer_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XMy_filter_buffer_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XMy_filter_buffer_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XMy_filter_buffer_Initialize(XMy_filter_buffer *InstancePtr, u16 DeviceId);
XMy_filter_buffer_Config* XMy_filter_buffer_LookupConfig(u16 DeviceId);
int XMy_filter_buffer_CfgInitialize(XMy_filter_buffer *InstancePtr, XMy_filter_buffer_Config *ConfigPtr);
#else
int XMy_filter_buffer_Initialize(XMy_filter_buffer *InstancePtr, const char* InstanceName);
int XMy_filter_buffer_Release(XMy_filter_buffer *InstancePtr);
#endif

void XMy_filter_buffer_Start(XMy_filter_buffer *InstancePtr);
u32 XMy_filter_buffer_IsDone(XMy_filter_buffer *InstancePtr);
u32 XMy_filter_buffer_IsIdle(XMy_filter_buffer *InstancePtr);
u32 XMy_filter_buffer_IsReady(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_EnableAutoRestart(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_DisableAutoRestart(XMy_filter_buffer *InstancePtr);

void XMy_filter_buffer_Set_kernel_0(XMy_filter_buffer *InstancePtr, u32 Data);
u32 XMy_filter_buffer_Get_kernel_0(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_Set_kernel_1(XMy_filter_buffer *InstancePtr, u32 Data);
u32 XMy_filter_buffer_Get_kernel_1(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_Set_kernel_2(XMy_filter_buffer *InstancePtr, u32 Data);
u32 XMy_filter_buffer_Get_kernel_2(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_Set_kernel_3(XMy_filter_buffer *InstancePtr, u32 Data);
u32 XMy_filter_buffer_Get_kernel_3(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_Set_kernel_4(XMy_filter_buffer *InstancePtr, u32 Data);
u32 XMy_filter_buffer_Get_kernel_4(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_Set_kernel_5(XMy_filter_buffer *InstancePtr, u32 Data);
u32 XMy_filter_buffer_Get_kernel_5(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_Set_kernel_6(XMy_filter_buffer *InstancePtr, u32 Data);
u32 XMy_filter_buffer_Get_kernel_6(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_Set_kernel_7(XMy_filter_buffer *InstancePtr, u32 Data);
u32 XMy_filter_buffer_Get_kernel_7(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_Set_kernel_8(XMy_filter_buffer *InstancePtr, u32 Data);
u32 XMy_filter_buffer_Get_kernel_8(XMy_filter_buffer *InstancePtr);

void XMy_filter_buffer_InterruptGlobalEnable(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_InterruptGlobalDisable(XMy_filter_buffer *InstancePtr);
void XMy_filter_buffer_InterruptEnable(XMy_filter_buffer *InstancePtr, u32 Mask);
void XMy_filter_buffer_InterruptDisable(XMy_filter_buffer *InstancePtr, u32 Mask);
void XMy_filter_buffer_InterruptClear(XMy_filter_buffer *InstancePtr, u32 Mask);
u32 XMy_filter_buffer_InterruptGetEnabled(XMy_filter_buffer *InstancePtr);
u32 XMy_filter_buffer_InterruptGetStatus(XMy_filter_buffer *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
