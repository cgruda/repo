// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module my_filter_buffer_KERNEL_BUS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 8,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    // user signals
    output wire [7:0]                    kernel_0,
    output wire [7:0]                    kernel_1,
    output wire [7:0]                    kernel_2,
    output wire [7:0]                    kernel_3,
    output wire [7:0]                    kernel_4,
    output wire [7:0]                    kernel_5,
    output wire [7:0]                    kernel_6,
    output wire [7:0]                    kernel_7,
    output wire [7:0]                    kernel_8,
    output wire [7:0]                    bias_0,
    output wire [7:0]                    bias_1,
    output wire [7:0]                    bias_2,
    output wire [7:0]                    bias_3,
    output wire [7:0]                    bias_4,
    output wire [7:0]                    bias_5,
    output wire [7:0]                    bias_6,
    output wire [7:0]                    bias_7,
    output wire [7:0]                    bias_8
);
//------------------------Address Info-------------------
// 0x00 : reserved
// 0x04 : reserved
// 0x08 : reserved
// 0x0c : reserved
// 0x10 : Data signal of kernel_0
//        bit 7~0 - kernel_0[7:0] (Read/Write)
//        others  - reserved
// 0x14 : reserved
// 0x18 : Data signal of kernel_1
//        bit 7~0 - kernel_1[7:0] (Read/Write)
//        others  - reserved
// 0x1c : reserved
// 0x20 : Data signal of kernel_2
//        bit 7~0 - kernel_2[7:0] (Read/Write)
//        others  - reserved
// 0x24 : reserved
// 0x28 : Data signal of kernel_3
//        bit 7~0 - kernel_3[7:0] (Read/Write)
//        others  - reserved
// 0x2c : reserved
// 0x30 : Data signal of kernel_4
//        bit 7~0 - kernel_4[7:0] (Read/Write)
//        others  - reserved
// 0x34 : reserved
// 0x38 : Data signal of kernel_5
//        bit 7~0 - kernel_5[7:0] (Read/Write)
//        others  - reserved
// 0x3c : reserved
// 0x40 : Data signal of kernel_6
//        bit 7~0 - kernel_6[7:0] (Read/Write)
//        others  - reserved
// 0x44 : reserved
// 0x48 : Data signal of kernel_7
//        bit 7~0 - kernel_7[7:0] (Read/Write)
//        others  - reserved
// 0x4c : reserved
// 0x50 : Data signal of kernel_8
//        bit 7~0 - kernel_8[7:0] (Read/Write)
//        others  - reserved
// 0x54 : reserved
// 0x58 : Data signal of bias_0
//        bit 7~0 - bias_0[7:0] (Read/Write)
//        others  - reserved
// 0x5c : reserved
// 0x60 : Data signal of bias_1
//        bit 7~0 - bias_1[7:0] (Read/Write)
//        others  - reserved
// 0x64 : reserved
// 0x68 : Data signal of bias_2
//        bit 7~0 - bias_2[7:0] (Read/Write)
//        others  - reserved
// 0x6c : reserved
// 0x70 : Data signal of bias_3
//        bit 7~0 - bias_3[7:0] (Read/Write)
//        others  - reserved
// 0x74 : reserved
// 0x78 : Data signal of bias_4
//        bit 7~0 - bias_4[7:0] (Read/Write)
//        others  - reserved
// 0x7c : reserved
// 0x80 : Data signal of bias_5
//        bit 7~0 - bias_5[7:0] (Read/Write)
//        others  - reserved
// 0x84 : reserved
// 0x88 : Data signal of bias_6
//        bit 7~0 - bias_6[7:0] (Read/Write)
//        others  - reserved
// 0x8c : reserved
// 0x90 : Data signal of bias_7
//        bit 7~0 - bias_7[7:0] (Read/Write)
//        others  - reserved
// 0x94 : reserved
// 0x98 : Data signal of bias_8
//        bit 7~0 - bias_8[7:0] (Read/Write)
//        others  - reserved
// 0x9c : reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_KERNEL_0_DATA_0 = 8'h10,
    ADDR_KERNEL_0_CTRL   = 8'h14,
    ADDR_KERNEL_1_DATA_0 = 8'h18,
    ADDR_KERNEL_1_CTRL   = 8'h1c,
    ADDR_KERNEL_2_DATA_0 = 8'h20,
    ADDR_KERNEL_2_CTRL   = 8'h24,
    ADDR_KERNEL_3_DATA_0 = 8'h28,
    ADDR_KERNEL_3_CTRL   = 8'h2c,
    ADDR_KERNEL_4_DATA_0 = 8'h30,
    ADDR_KERNEL_4_CTRL   = 8'h34,
    ADDR_KERNEL_5_DATA_0 = 8'h38,
    ADDR_KERNEL_5_CTRL   = 8'h3c,
    ADDR_KERNEL_6_DATA_0 = 8'h40,
    ADDR_KERNEL_6_CTRL   = 8'h44,
    ADDR_KERNEL_7_DATA_0 = 8'h48,
    ADDR_KERNEL_7_CTRL   = 8'h4c,
    ADDR_KERNEL_8_DATA_0 = 8'h50,
    ADDR_KERNEL_8_CTRL   = 8'h54,
    ADDR_BIAS_0_DATA_0   = 8'h58,
    ADDR_BIAS_0_CTRL     = 8'h5c,
    ADDR_BIAS_1_DATA_0   = 8'h60,
    ADDR_BIAS_1_CTRL     = 8'h64,
    ADDR_BIAS_2_DATA_0   = 8'h68,
    ADDR_BIAS_2_CTRL     = 8'h6c,
    ADDR_BIAS_3_DATA_0   = 8'h70,
    ADDR_BIAS_3_CTRL     = 8'h74,
    ADDR_BIAS_4_DATA_0   = 8'h78,
    ADDR_BIAS_4_CTRL     = 8'h7c,
    ADDR_BIAS_5_DATA_0   = 8'h80,
    ADDR_BIAS_5_CTRL     = 8'h84,
    ADDR_BIAS_6_DATA_0   = 8'h88,
    ADDR_BIAS_6_CTRL     = 8'h8c,
    ADDR_BIAS_7_DATA_0   = 8'h90,
    ADDR_BIAS_7_CTRL     = 8'h94,
    ADDR_BIAS_8_DATA_0   = 8'h98,
    ADDR_BIAS_8_CTRL     = 8'h9c,
    WRIDLE               = 2'd0,
    WRDATA               = 2'd1,
    WRRESP               = 2'd2,
    RDIDLE               = 2'd0,
    RDDATA               = 2'd1,
    ADDR_BITS         = 8;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg  [7:0]                    int_kernel_0;
    reg  [7:0]                    int_kernel_1;
    reg  [7:0]                    int_kernel_2;
    reg  [7:0]                    int_kernel_3;
    reg  [7:0]                    int_kernel_4;
    reg  [7:0]                    int_kernel_5;
    reg  [7:0]                    int_kernel_6;
    reg  [7:0]                    int_kernel_7;
    reg  [7:0]                    int_kernel_8;
    reg  [7:0]                    int_bias_0;
    reg  [7:0]                    int_bias_1;
    reg  [7:0]                    int_bias_2;
    reg  [7:0]                    int_bias_3;
    reg  [7:0]                    int_bias_4;
    reg  [7:0]                    int_bias_5;
    reg  [7:0]                    int_bias_6;
    reg  [7:0]                    int_bias_7;
    reg  [7:0]                    int_bias_8;

//------------------------Instantiation------------------

//------------------------AXI write fsm------------------
assign AWREADY = (~ARESET) & (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRIDLE;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (~ARESET) && (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDIDLE;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_KERNEL_0_DATA_0: begin
                    rdata <= int_kernel_0[7:0];
                end
                ADDR_KERNEL_1_DATA_0: begin
                    rdata <= int_kernel_1[7:0];
                end
                ADDR_KERNEL_2_DATA_0: begin
                    rdata <= int_kernel_2[7:0];
                end
                ADDR_KERNEL_3_DATA_0: begin
                    rdata <= int_kernel_3[7:0];
                end
                ADDR_KERNEL_4_DATA_0: begin
                    rdata <= int_kernel_4[7:0];
                end
                ADDR_KERNEL_5_DATA_0: begin
                    rdata <= int_kernel_5[7:0];
                end
                ADDR_KERNEL_6_DATA_0: begin
                    rdata <= int_kernel_6[7:0];
                end
                ADDR_KERNEL_7_DATA_0: begin
                    rdata <= int_kernel_7[7:0];
                end
                ADDR_KERNEL_8_DATA_0: begin
                    rdata <= int_kernel_8[7:0];
                end
                ADDR_BIAS_0_DATA_0: begin
                    rdata <= int_bias_0[7:0];
                end
                ADDR_BIAS_1_DATA_0: begin
                    rdata <= int_bias_1[7:0];
                end
                ADDR_BIAS_2_DATA_0: begin
                    rdata <= int_bias_2[7:0];
                end
                ADDR_BIAS_3_DATA_0: begin
                    rdata <= int_bias_3[7:0];
                end
                ADDR_BIAS_4_DATA_0: begin
                    rdata <= int_bias_4[7:0];
                end
                ADDR_BIAS_5_DATA_0: begin
                    rdata <= int_bias_5[7:0];
                end
                ADDR_BIAS_6_DATA_0: begin
                    rdata <= int_bias_6[7:0];
                end
                ADDR_BIAS_7_DATA_0: begin
                    rdata <= int_bias_7[7:0];
                end
                ADDR_BIAS_8_DATA_0: begin
                    rdata <= int_bias_8[7:0];
                end
            endcase
        end
    end
end


//------------------------Register logic-----------------
assign kernel_0 = int_kernel_0;
assign kernel_1 = int_kernel_1;
assign kernel_2 = int_kernel_2;
assign kernel_3 = int_kernel_3;
assign kernel_4 = int_kernel_4;
assign kernel_5 = int_kernel_5;
assign kernel_6 = int_kernel_6;
assign kernel_7 = int_kernel_7;
assign kernel_8 = int_kernel_8;
assign bias_0   = int_bias_0;
assign bias_1   = int_bias_1;
assign bias_2   = int_bias_2;
assign bias_3   = int_bias_3;
assign bias_4   = int_bias_4;
assign bias_5   = int_bias_5;
assign bias_6   = int_bias_6;
assign bias_7   = int_bias_7;
assign bias_8   = int_bias_8;
// int_kernel_0[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_kernel_0[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KERNEL_0_DATA_0)
            int_kernel_0[7:0] <= (WDATA[31:0] & wmask) | (int_kernel_0[7:0] & ~wmask);
    end
end

// int_kernel_1[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_kernel_1[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KERNEL_1_DATA_0)
            int_kernel_1[7:0] <= (WDATA[31:0] & wmask) | (int_kernel_1[7:0] & ~wmask);
    end
end

// int_kernel_2[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_kernel_2[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KERNEL_2_DATA_0)
            int_kernel_2[7:0] <= (WDATA[31:0] & wmask) | (int_kernel_2[7:0] & ~wmask);
    end
end

// int_kernel_3[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_kernel_3[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KERNEL_3_DATA_0)
            int_kernel_3[7:0] <= (WDATA[31:0] & wmask) | (int_kernel_3[7:0] & ~wmask);
    end
end

// int_kernel_4[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_kernel_4[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KERNEL_4_DATA_0)
            int_kernel_4[7:0] <= (WDATA[31:0] & wmask) | (int_kernel_4[7:0] & ~wmask);
    end
end

// int_kernel_5[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_kernel_5[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KERNEL_5_DATA_0)
            int_kernel_5[7:0] <= (WDATA[31:0] & wmask) | (int_kernel_5[7:0] & ~wmask);
    end
end

// int_kernel_6[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_kernel_6[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KERNEL_6_DATA_0)
            int_kernel_6[7:0] <= (WDATA[31:0] & wmask) | (int_kernel_6[7:0] & ~wmask);
    end
end

// int_kernel_7[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_kernel_7[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KERNEL_7_DATA_0)
            int_kernel_7[7:0] <= (WDATA[31:0] & wmask) | (int_kernel_7[7:0] & ~wmask);
    end
end

// int_kernel_8[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_kernel_8[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KERNEL_8_DATA_0)
            int_kernel_8[7:0] <= (WDATA[31:0] & wmask) | (int_kernel_8[7:0] & ~wmask);
    end
end

// int_bias_0[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_0[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BIAS_0_DATA_0)
            int_bias_0[7:0] <= (WDATA[31:0] & wmask) | (int_bias_0[7:0] & ~wmask);
    end
end

// int_bias_1[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_1[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BIAS_1_DATA_0)
            int_bias_1[7:0] <= (WDATA[31:0] & wmask) | (int_bias_1[7:0] & ~wmask);
    end
end

// int_bias_2[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_2[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BIAS_2_DATA_0)
            int_bias_2[7:0] <= (WDATA[31:0] & wmask) | (int_bias_2[7:0] & ~wmask);
    end
end

// int_bias_3[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_3[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BIAS_3_DATA_0)
            int_bias_3[7:0] <= (WDATA[31:0] & wmask) | (int_bias_3[7:0] & ~wmask);
    end
end

// int_bias_4[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_4[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BIAS_4_DATA_0)
            int_bias_4[7:0] <= (WDATA[31:0] & wmask) | (int_bias_4[7:0] & ~wmask);
    end
end

// int_bias_5[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_5[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BIAS_5_DATA_0)
            int_bias_5[7:0] <= (WDATA[31:0] & wmask) | (int_bias_5[7:0] & ~wmask);
    end
end

// int_bias_6[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_6[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BIAS_6_DATA_0)
            int_bias_6[7:0] <= (WDATA[31:0] & wmask) | (int_bias_6[7:0] & ~wmask);
    end
end

// int_bias_7[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_7[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BIAS_7_DATA_0)
            int_bias_7[7:0] <= (WDATA[31:0] & wmask) | (int_bias_7[7:0] & ~wmask);
    end
end

// int_bias_8[7:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_8[7:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_BIAS_8_DATA_0)
            int_bias_8[7:0] <= (WDATA[31:0] & wmask) | (int_bias_8[7:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------

endmodule
