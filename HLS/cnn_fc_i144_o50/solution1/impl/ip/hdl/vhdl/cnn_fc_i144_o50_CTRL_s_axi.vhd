-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity cnn_fc_i144_o50_CTRL_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 16;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    weight_0_address0     :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_0_ce0          :in   STD_LOGIC;
    weight_0_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_1_address0     :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_1_ce0          :in   STD_LOGIC;
    weight_1_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_2_address0     :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_2_ce0          :in   STD_LOGIC;
    weight_2_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_3_address0     :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_3_ce0          :in   STD_LOGIC;
    weight_3_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_4_address0     :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_4_ce0          :in   STD_LOGIC;
    weight_4_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_5_address0     :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_5_ce0          :in   STD_LOGIC;
    weight_5_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_6_address0     :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_6_ce0          :in   STD_LOGIC;
    weight_6_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_7_address0     :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_7_ce0          :in   STD_LOGIC;
    weight_7_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_8_address0     :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_8_ce0          :in   STD_LOGIC;
    weight_8_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_9_address0     :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_9_ce0          :in   STD_LOGIC;
    weight_9_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_10_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_10_ce0         :in   STD_LOGIC;
    weight_10_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_11_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_11_ce0         :in   STD_LOGIC;
    weight_11_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_12_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_12_ce0         :in   STD_LOGIC;
    weight_12_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_13_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_13_ce0         :in   STD_LOGIC;
    weight_13_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_14_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_14_ce0         :in   STD_LOGIC;
    weight_14_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_15_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_15_ce0         :in   STD_LOGIC;
    weight_15_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_16_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_16_ce0         :in   STD_LOGIC;
    weight_16_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_17_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_17_ce0         :in   STD_LOGIC;
    weight_17_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_18_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_18_ce0         :in   STD_LOGIC;
    weight_18_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_19_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_19_ce0         :in   STD_LOGIC;
    weight_19_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_20_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_20_ce0         :in   STD_LOGIC;
    weight_20_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_21_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_21_ce0         :in   STD_LOGIC;
    weight_21_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_22_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_22_ce0         :in   STD_LOGIC;
    weight_22_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_23_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_23_ce0         :in   STD_LOGIC;
    weight_23_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_24_address0    :in   STD_LOGIC_VECTOR(8 downto 0);
    weight_24_ce0         :in   STD_LOGIC;
    weight_24_q0          :out  STD_LOGIC_VECTOR(31 downto 0);
    bias_address0         :in   STD_LOGIC_VECTOR(5 downto 0);
    bias_ce0              :in   STD_LOGIC;
    bias_q0               :out  STD_LOGIC_VECTOR(31 downto 0);
    ctrl                  :out  STD_LOGIC_VECTOR(31 downto 0)
);
end entity cnn_fc_i144_o50_CTRL_s_axi;

-- ------------------------Address Info-------------------
-- 0x0000 : Control signals
--          bit 0  - ap_start (Read/Write/COH)
--          bit 1  - ap_done (Read/COR)
--          bit 2  - ap_idle (Read)
--          bit 3  - ap_ready (Read)
--          bit 7  - auto_restart (Read/Write)
--          others - reserved
-- 0x0004 : Global Interrupt Enable Register
--          bit 0  - Global Interrupt Enable (Read/Write)
--          others - reserved
-- 0x0008 : IP Interrupt Enable Register (Read/Write)
--          bit 0  - Channel 0 (ap_done)
--          bit 1  - Channel 1 (ap_ready)
--          others - reserved
-- 0x000c : IP Interrupt Status Register (Read/TOW)
--          bit 0  - Channel 0 (ap_done)
--          bit 1  - Channel 1 (ap_ready)
--          others - reserved
-- 0xd100 : Data signal of ctrl
--          bit 31~0 - ctrl[31:0] (Read/Write)
-- 0xd104 : reserved
-- 0x0800 ~
-- 0x0fff : Memory 'weight_0' (288 * 32b)
--          Word n : bit [31:0] - weight_0[n]
-- 0x1000 ~
-- 0x17ff : Memory 'weight_1' (288 * 32b)
--          Word n : bit [31:0] - weight_1[n]
-- 0x1800 ~
-- 0x1fff : Memory 'weight_2' (288 * 32b)
--          Word n : bit [31:0] - weight_2[n]
-- 0x2000 ~
-- 0x27ff : Memory 'weight_3' (288 * 32b)
--          Word n : bit [31:0] - weight_3[n]
-- 0x2800 ~
-- 0x2fff : Memory 'weight_4' (288 * 32b)
--          Word n : bit [31:0] - weight_4[n]
-- 0x3000 ~
-- 0x37ff : Memory 'weight_5' (288 * 32b)
--          Word n : bit [31:0] - weight_5[n]
-- 0x3800 ~
-- 0x3fff : Memory 'weight_6' (288 * 32b)
--          Word n : bit [31:0] - weight_6[n]
-- 0x4000 ~
-- 0x47ff : Memory 'weight_7' (288 * 32b)
--          Word n : bit [31:0] - weight_7[n]
-- 0x4800 ~
-- 0x4fff : Memory 'weight_8' (288 * 32b)
--          Word n : bit [31:0] - weight_8[n]
-- 0x5000 ~
-- 0x57ff : Memory 'weight_9' (288 * 32b)
--          Word n : bit [31:0] - weight_9[n]
-- 0x5800 ~
-- 0x5fff : Memory 'weight_10' (288 * 32b)
--          Word n : bit [31:0] - weight_10[n]
-- 0x6000 ~
-- 0x67ff : Memory 'weight_11' (288 * 32b)
--          Word n : bit [31:0] - weight_11[n]
-- 0x6800 ~
-- 0x6fff : Memory 'weight_12' (288 * 32b)
--          Word n : bit [31:0] - weight_12[n]
-- 0x7000 ~
-- 0x77ff : Memory 'weight_13' (288 * 32b)
--          Word n : bit [31:0] - weight_13[n]
-- 0x7800 ~
-- 0x7fff : Memory 'weight_14' (288 * 32b)
--          Word n : bit [31:0] - weight_14[n]
-- 0x8000 ~
-- 0x87ff : Memory 'weight_15' (288 * 32b)
--          Word n : bit [31:0] - weight_15[n]
-- 0x8800 ~
-- 0x8fff : Memory 'weight_16' (288 * 32b)
--          Word n : bit [31:0] - weight_16[n]
-- 0x9000 ~
-- 0x97ff : Memory 'weight_17' (288 * 32b)
--          Word n : bit [31:0] - weight_17[n]
-- 0x9800 ~
-- 0x9fff : Memory 'weight_18' (288 * 32b)
--          Word n : bit [31:0] - weight_18[n]
-- 0xa000 ~
-- 0xa7ff : Memory 'weight_19' (288 * 32b)
--          Word n : bit [31:0] - weight_19[n]
-- 0xa800 ~
-- 0xafff : Memory 'weight_20' (288 * 32b)
--          Word n : bit [31:0] - weight_20[n]
-- 0xb000 ~
-- 0xb7ff : Memory 'weight_21' (288 * 32b)
--          Word n : bit [31:0] - weight_21[n]
-- 0xb800 ~
-- 0xbfff : Memory 'weight_22' (288 * 32b)
--          Word n : bit [31:0] - weight_22[n]
-- 0xc000 ~
-- 0xc7ff : Memory 'weight_23' (288 * 32b)
--          Word n : bit [31:0] - weight_23[n]
-- 0xc800 ~
-- 0xcfff : Memory 'weight_24' (288 * 32b)
--          Word n : bit [31:0] - weight_24[n]
-- 0xd000 ~
-- 0xd0ff : Memory 'bias' (50 * 32b)
--          Word n : bit [31:0] - bias[n]
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of cnn_fc_i144_o50_CTRL_s_axi is
    type states is (wridle, wrdata, wrresp, rdidle, rddata);  -- read and write fsm states
    signal wstate, wnext, rstate, rnext: states;
    constant ADDR_AP_CTRL        : INTEGER := 16#0000#;
    constant ADDR_GIE            : INTEGER := 16#0004#;
    constant ADDR_IER            : INTEGER := 16#0008#;
    constant ADDR_ISR            : INTEGER := 16#000c#;
    constant ADDR_CTRL_DATA_0    : INTEGER := 16#d100#;
    constant ADDR_CTRL_CTRL      : INTEGER := 16#d104#;
    constant ADDR_WEIGHT_0_BASE  : INTEGER := 16#0800#;
    constant ADDR_WEIGHT_0_HIGH  : INTEGER := 16#0fff#;
    constant ADDR_WEIGHT_1_BASE  : INTEGER := 16#1000#;
    constant ADDR_WEIGHT_1_HIGH  : INTEGER := 16#17ff#;
    constant ADDR_WEIGHT_2_BASE  : INTEGER := 16#1800#;
    constant ADDR_WEIGHT_2_HIGH  : INTEGER := 16#1fff#;
    constant ADDR_WEIGHT_3_BASE  : INTEGER := 16#2000#;
    constant ADDR_WEIGHT_3_HIGH  : INTEGER := 16#27ff#;
    constant ADDR_WEIGHT_4_BASE  : INTEGER := 16#2800#;
    constant ADDR_WEIGHT_4_HIGH  : INTEGER := 16#2fff#;
    constant ADDR_WEIGHT_5_BASE  : INTEGER := 16#3000#;
    constant ADDR_WEIGHT_5_HIGH  : INTEGER := 16#37ff#;
    constant ADDR_WEIGHT_6_BASE  : INTEGER := 16#3800#;
    constant ADDR_WEIGHT_6_HIGH  : INTEGER := 16#3fff#;
    constant ADDR_WEIGHT_7_BASE  : INTEGER := 16#4000#;
    constant ADDR_WEIGHT_7_HIGH  : INTEGER := 16#47ff#;
    constant ADDR_WEIGHT_8_BASE  : INTEGER := 16#4800#;
    constant ADDR_WEIGHT_8_HIGH  : INTEGER := 16#4fff#;
    constant ADDR_WEIGHT_9_BASE  : INTEGER := 16#5000#;
    constant ADDR_WEIGHT_9_HIGH  : INTEGER := 16#57ff#;
    constant ADDR_WEIGHT_10_BASE : INTEGER := 16#5800#;
    constant ADDR_WEIGHT_10_HIGH : INTEGER := 16#5fff#;
    constant ADDR_WEIGHT_11_BASE : INTEGER := 16#6000#;
    constant ADDR_WEIGHT_11_HIGH : INTEGER := 16#67ff#;
    constant ADDR_WEIGHT_12_BASE : INTEGER := 16#6800#;
    constant ADDR_WEIGHT_12_HIGH : INTEGER := 16#6fff#;
    constant ADDR_WEIGHT_13_BASE : INTEGER := 16#7000#;
    constant ADDR_WEIGHT_13_HIGH : INTEGER := 16#77ff#;
    constant ADDR_WEIGHT_14_BASE : INTEGER := 16#7800#;
    constant ADDR_WEIGHT_14_HIGH : INTEGER := 16#7fff#;
    constant ADDR_WEIGHT_15_BASE : INTEGER := 16#8000#;
    constant ADDR_WEIGHT_15_HIGH : INTEGER := 16#87ff#;
    constant ADDR_WEIGHT_16_BASE : INTEGER := 16#8800#;
    constant ADDR_WEIGHT_16_HIGH : INTEGER := 16#8fff#;
    constant ADDR_WEIGHT_17_BASE : INTEGER := 16#9000#;
    constant ADDR_WEIGHT_17_HIGH : INTEGER := 16#97ff#;
    constant ADDR_WEIGHT_18_BASE : INTEGER := 16#9800#;
    constant ADDR_WEIGHT_18_HIGH : INTEGER := 16#9fff#;
    constant ADDR_WEIGHT_19_BASE : INTEGER := 16#a000#;
    constant ADDR_WEIGHT_19_HIGH : INTEGER := 16#a7ff#;
    constant ADDR_WEIGHT_20_BASE : INTEGER := 16#a800#;
    constant ADDR_WEIGHT_20_HIGH : INTEGER := 16#afff#;
    constant ADDR_WEIGHT_21_BASE : INTEGER := 16#b000#;
    constant ADDR_WEIGHT_21_HIGH : INTEGER := 16#b7ff#;
    constant ADDR_WEIGHT_22_BASE : INTEGER := 16#b800#;
    constant ADDR_WEIGHT_22_HIGH : INTEGER := 16#bfff#;
    constant ADDR_WEIGHT_23_BASE : INTEGER := 16#c000#;
    constant ADDR_WEIGHT_23_HIGH : INTEGER := 16#c7ff#;
    constant ADDR_WEIGHT_24_BASE : INTEGER := 16#c800#;
    constant ADDR_WEIGHT_24_HIGH : INTEGER := 16#cfff#;
    constant ADDR_BIAS_BASE      : INTEGER := 16#d000#;
    constant ADDR_BIAS_HIGH      : INTEGER := 16#d0ff#;
    constant ADDR_BITS         : INTEGER := 16;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC;
    signal int_ap_start        : STD_LOGIC;
    signal int_auto_restart    : STD_LOGIC;
    signal int_gie             : STD_LOGIC;
    signal int_ier             : UNSIGNED(1 downto 0);
    signal int_isr             : UNSIGNED(1 downto 0);
    signal int_ctrl            : UNSIGNED(31 downto 0);
    -- memory signals
    signal int_weight_0_address0 : UNSIGNED(8 downto 0);
    signal int_weight_0_ce0    : STD_LOGIC;
    signal int_weight_0_we0    : STD_LOGIC;
    signal int_weight_0_be0    : UNSIGNED(3 downto 0);
    signal int_weight_0_d0     : UNSIGNED(31 downto 0);
    signal int_weight_0_q0     : UNSIGNED(31 downto 0);
    signal int_weight_0_address1 : UNSIGNED(8 downto 0);
    signal int_weight_0_ce1    : STD_LOGIC;
    signal int_weight_0_we1    : STD_LOGIC;
    signal int_weight_0_be1    : UNSIGNED(3 downto 0);
    signal int_weight_0_d1     : UNSIGNED(31 downto 0);
    signal int_weight_0_q1     : UNSIGNED(31 downto 0);
    signal int_weight_0_read   : STD_LOGIC;
    signal int_weight_0_write  : STD_LOGIC;
    signal int_weight_1_address0 : UNSIGNED(8 downto 0);
    signal int_weight_1_ce0    : STD_LOGIC;
    signal int_weight_1_we0    : STD_LOGIC;
    signal int_weight_1_be0    : UNSIGNED(3 downto 0);
    signal int_weight_1_d0     : UNSIGNED(31 downto 0);
    signal int_weight_1_q0     : UNSIGNED(31 downto 0);
    signal int_weight_1_address1 : UNSIGNED(8 downto 0);
    signal int_weight_1_ce1    : STD_LOGIC;
    signal int_weight_1_we1    : STD_LOGIC;
    signal int_weight_1_be1    : UNSIGNED(3 downto 0);
    signal int_weight_1_d1     : UNSIGNED(31 downto 0);
    signal int_weight_1_q1     : UNSIGNED(31 downto 0);
    signal int_weight_1_read   : STD_LOGIC;
    signal int_weight_1_write  : STD_LOGIC;
    signal int_weight_2_address0 : UNSIGNED(8 downto 0);
    signal int_weight_2_ce0    : STD_LOGIC;
    signal int_weight_2_we0    : STD_LOGIC;
    signal int_weight_2_be0    : UNSIGNED(3 downto 0);
    signal int_weight_2_d0     : UNSIGNED(31 downto 0);
    signal int_weight_2_q0     : UNSIGNED(31 downto 0);
    signal int_weight_2_address1 : UNSIGNED(8 downto 0);
    signal int_weight_2_ce1    : STD_LOGIC;
    signal int_weight_2_we1    : STD_LOGIC;
    signal int_weight_2_be1    : UNSIGNED(3 downto 0);
    signal int_weight_2_d1     : UNSIGNED(31 downto 0);
    signal int_weight_2_q1     : UNSIGNED(31 downto 0);
    signal int_weight_2_read   : STD_LOGIC;
    signal int_weight_2_write  : STD_LOGIC;
    signal int_weight_3_address0 : UNSIGNED(8 downto 0);
    signal int_weight_3_ce0    : STD_LOGIC;
    signal int_weight_3_we0    : STD_LOGIC;
    signal int_weight_3_be0    : UNSIGNED(3 downto 0);
    signal int_weight_3_d0     : UNSIGNED(31 downto 0);
    signal int_weight_3_q0     : UNSIGNED(31 downto 0);
    signal int_weight_3_address1 : UNSIGNED(8 downto 0);
    signal int_weight_3_ce1    : STD_LOGIC;
    signal int_weight_3_we1    : STD_LOGIC;
    signal int_weight_3_be1    : UNSIGNED(3 downto 0);
    signal int_weight_3_d1     : UNSIGNED(31 downto 0);
    signal int_weight_3_q1     : UNSIGNED(31 downto 0);
    signal int_weight_3_read   : STD_LOGIC;
    signal int_weight_3_write  : STD_LOGIC;
    signal int_weight_4_address0 : UNSIGNED(8 downto 0);
    signal int_weight_4_ce0    : STD_LOGIC;
    signal int_weight_4_we0    : STD_LOGIC;
    signal int_weight_4_be0    : UNSIGNED(3 downto 0);
    signal int_weight_4_d0     : UNSIGNED(31 downto 0);
    signal int_weight_4_q0     : UNSIGNED(31 downto 0);
    signal int_weight_4_address1 : UNSIGNED(8 downto 0);
    signal int_weight_4_ce1    : STD_LOGIC;
    signal int_weight_4_we1    : STD_LOGIC;
    signal int_weight_4_be1    : UNSIGNED(3 downto 0);
    signal int_weight_4_d1     : UNSIGNED(31 downto 0);
    signal int_weight_4_q1     : UNSIGNED(31 downto 0);
    signal int_weight_4_read   : STD_LOGIC;
    signal int_weight_4_write  : STD_LOGIC;
    signal int_weight_5_address0 : UNSIGNED(8 downto 0);
    signal int_weight_5_ce0    : STD_LOGIC;
    signal int_weight_5_we0    : STD_LOGIC;
    signal int_weight_5_be0    : UNSIGNED(3 downto 0);
    signal int_weight_5_d0     : UNSIGNED(31 downto 0);
    signal int_weight_5_q0     : UNSIGNED(31 downto 0);
    signal int_weight_5_address1 : UNSIGNED(8 downto 0);
    signal int_weight_5_ce1    : STD_LOGIC;
    signal int_weight_5_we1    : STD_LOGIC;
    signal int_weight_5_be1    : UNSIGNED(3 downto 0);
    signal int_weight_5_d1     : UNSIGNED(31 downto 0);
    signal int_weight_5_q1     : UNSIGNED(31 downto 0);
    signal int_weight_5_read   : STD_LOGIC;
    signal int_weight_5_write  : STD_LOGIC;
    signal int_weight_6_address0 : UNSIGNED(8 downto 0);
    signal int_weight_6_ce0    : STD_LOGIC;
    signal int_weight_6_we0    : STD_LOGIC;
    signal int_weight_6_be0    : UNSIGNED(3 downto 0);
    signal int_weight_6_d0     : UNSIGNED(31 downto 0);
    signal int_weight_6_q0     : UNSIGNED(31 downto 0);
    signal int_weight_6_address1 : UNSIGNED(8 downto 0);
    signal int_weight_6_ce1    : STD_LOGIC;
    signal int_weight_6_we1    : STD_LOGIC;
    signal int_weight_6_be1    : UNSIGNED(3 downto 0);
    signal int_weight_6_d1     : UNSIGNED(31 downto 0);
    signal int_weight_6_q1     : UNSIGNED(31 downto 0);
    signal int_weight_6_read   : STD_LOGIC;
    signal int_weight_6_write  : STD_LOGIC;
    signal int_weight_7_address0 : UNSIGNED(8 downto 0);
    signal int_weight_7_ce0    : STD_LOGIC;
    signal int_weight_7_we0    : STD_LOGIC;
    signal int_weight_7_be0    : UNSIGNED(3 downto 0);
    signal int_weight_7_d0     : UNSIGNED(31 downto 0);
    signal int_weight_7_q0     : UNSIGNED(31 downto 0);
    signal int_weight_7_address1 : UNSIGNED(8 downto 0);
    signal int_weight_7_ce1    : STD_LOGIC;
    signal int_weight_7_we1    : STD_LOGIC;
    signal int_weight_7_be1    : UNSIGNED(3 downto 0);
    signal int_weight_7_d1     : UNSIGNED(31 downto 0);
    signal int_weight_7_q1     : UNSIGNED(31 downto 0);
    signal int_weight_7_read   : STD_LOGIC;
    signal int_weight_7_write  : STD_LOGIC;
    signal int_weight_8_address0 : UNSIGNED(8 downto 0);
    signal int_weight_8_ce0    : STD_LOGIC;
    signal int_weight_8_we0    : STD_LOGIC;
    signal int_weight_8_be0    : UNSIGNED(3 downto 0);
    signal int_weight_8_d0     : UNSIGNED(31 downto 0);
    signal int_weight_8_q0     : UNSIGNED(31 downto 0);
    signal int_weight_8_address1 : UNSIGNED(8 downto 0);
    signal int_weight_8_ce1    : STD_LOGIC;
    signal int_weight_8_we1    : STD_LOGIC;
    signal int_weight_8_be1    : UNSIGNED(3 downto 0);
    signal int_weight_8_d1     : UNSIGNED(31 downto 0);
    signal int_weight_8_q1     : UNSIGNED(31 downto 0);
    signal int_weight_8_read   : STD_LOGIC;
    signal int_weight_8_write  : STD_LOGIC;
    signal int_weight_9_address0 : UNSIGNED(8 downto 0);
    signal int_weight_9_ce0    : STD_LOGIC;
    signal int_weight_9_we0    : STD_LOGIC;
    signal int_weight_9_be0    : UNSIGNED(3 downto 0);
    signal int_weight_9_d0     : UNSIGNED(31 downto 0);
    signal int_weight_9_q0     : UNSIGNED(31 downto 0);
    signal int_weight_9_address1 : UNSIGNED(8 downto 0);
    signal int_weight_9_ce1    : STD_LOGIC;
    signal int_weight_9_we1    : STD_LOGIC;
    signal int_weight_9_be1    : UNSIGNED(3 downto 0);
    signal int_weight_9_d1     : UNSIGNED(31 downto 0);
    signal int_weight_9_q1     : UNSIGNED(31 downto 0);
    signal int_weight_9_read   : STD_LOGIC;
    signal int_weight_9_write  : STD_LOGIC;
    signal int_weight_10_address0 : UNSIGNED(8 downto 0);
    signal int_weight_10_ce0   : STD_LOGIC;
    signal int_weight_10_we0   : STD_LOGIC;
    signal int_weight_10_be0   : UNSIGNED(3 downto 0);
    signal int_weight_10_d0    : UNSIGNED(31 downto 0);
    signal int_weight_10_q0    : UNSIGNED(31 downto 0);
    signal int_weight_10_address1 : UNSIGNED(8 downto 0);
    signal int_weight_10_ce1   : STD_LOGIC;
    signal int_weight_10_we1   : STD_LOGIC;
    signal int_weight_10_be1   : UNSIGNED(3 downto 0);
    signal int_weight_10_d1    : UNSIGNED(31 downto 0);
    signal int_weight_10_q1    : UNSIGNED(31 downto 0);
    signal int_weight_10_read  : STD_LOGIC;
    signal int_weight_10_write : STD_LOGIC;
    signal int_weight_11_address0 : UNSIGNED(8 downto 0);
    signal int_weight_11_ce0   : STD_LOGIC;
    signal int_weight_11_we0   : STD_LOGIC;
    signal int_weight_11_be0   : UNSIGNED(3 downto 0);
    signal int_weight_11_d0    : UNSIGNED(31 downto 0);
    signal int_weight_11_q0    : UNSIGNED(31 downto 0);
    signal int_weight_11_address1 : UNSIGNED(8 downto 0);
    signal int_weight_11_ce1   : STD_LOGIC;
    signal int_weight_11_we1   : STD_LOGIC;
    signal int_weight_11_be1   : UNSIGNED(3 downto 0);
    signal int_weight_11_d1    : UNSIGNED(31 downto 0);
    signal int_weight_11_q1    : UNSIGNED(31 downto 0);
    signal int_weight_11_read  : STD_LOGIC;
    signal int_weight_11_write : STD_LOGIC;
    signal int_weight_12_address0 : UNSIGNED(8 downto 0);
    signal int_weight_12_ce0   : STD_LOGIC;
    signal int_weight_12_we0   : STD_LOGIC;
    signal int_weight_12_be0   : UNSIGNED(3 downto 0);
    signal int_weight_12_d0    : UNSIGNED(31 downto 0);
    signal int_weight_12_q0    : UNSIGNED(31 downto 0);
    signal int_weight_12_address1 : UNSIGNED(8 downto 0);
    signal int_weight_12_ce1   : STD_LOGIC;
    signal int_weight_12_we1   : STD_LOGIC;
    signal int_weight_12_be1   : UNSIGNED(3 downto 0);
    signal int_weight_12_d1    : UNSIGNED(31 downto 0);
    signal int_weight_12_q1    : UNSIGNED(31 downto 0);
    signal int_weight_12_read  : STD_LOGIC;
    signal int_weight_12_write : STD_LOGIC;
    signal int_weight_13_address0 : UNSIGNED(8 downto 0);
    signal int_weight_13_ce0   : STD_LOGIC;
    signal int_weight_13_we0   : STD_LOGIC;
    signal int_weight_13_be0   : UNSIGNED(3 downto 0);
    signal int_weight_13_d0    : UNSIGNED(31 downto 0);
    signal int_weight_13_q0    : UNSIGNED(31 downto 0);
    signal int_weight_13_address1 : UNSIGNED(8 downto 0);
    signal int_weight_13_ce1   : STD_LOGIC;
    signal int_weight_13_we1   : STD_LOGIC;
    signal int_weight_13_be1   : UNSIGNED(3 downto 0);
    signal int_weight_13_d1    : UNSIGNED(31 downto 0);
    signal int_weight_13_q1    : UNSIGNED(31 downto 0);
    signal int_weight_13_read  : STD_LOGIC;
    signal int_weight_13_write : STD_LOGIC;
    signal int_weight_14_address0 : UNSIGNED(8 downto 0);
    signal int_weight_14_ce0   : STD_LOGIC;
    signal int_weight_14_we0   : STD_LOGIC;
    signal int_weight_14_be0   : UNSIGNED(3 downto 0);
    signal int_weight_14_d0    : UNSIGNED(31 downto 0);
    signal int_weight_14_q0    : UNSIGNED(31 downto 0);
    signal int_weight_14_address1 : UNSIGNED(8 downto 0);
    signal int_weight_14_ce1   : STD_LOGIC;
    signal int_weight_14_we1   : STD_LOGIC;
    signal int_weight_14_be1   : UNSIGNED(3 downto 0);
    signal int_weight_14_d1    : UNSIGNED(31 downto 0);
    signal int_weight_14_q1    : UNSIGNED(31 downto 0);
    signal int_weight_14_read  : STD_LOGIC;
    signal int_weight_14_write : STD_LOGIC;
    signal int_weight_15_address0 : UNSIGNED(8 downto 0);
    signal int_weight_15_ce0   : STD_LOGIC;
    signal int_weight_15_we0   : STD_LOGIC;
    signal int_weight_15_be0   : UNSIGNED(3 downto 0);
    signal int_weight_15_d0    : UNSIGNED(31 downto 0);
    signal int_weight_15_q0    : UNSIGNED(31 downto 0);
    signal int_weight_15_address1 : UNSIGNED(8 downto 0);
    signal int_weight_15_ce1   : STD_LOGIC;
    signal int_weight_15_we1   : STD_LOGIC;
    signal int_weight_15_be1   : UNSIGNED(3 downto 0);
    signal int_weight_15_d1    : UNSIGNED(31 downto 0);
    signal int_weight_15_q1    : UNSIGNED(31 downto 0);
    signal int_weight_15_read  : STD_LOGIC;
    signal int_weight_15_write : STD_LOGIC;
    signal int_weight_16_address0 : UNSIGNED(8 downto 0);
    signal int_weight_16_ce0   : STD_LOGIC;
    signal int_weight_16_we0   : STD_LOGIC;
    signal int_weight_16_be0   : UNSIGNED(3 downto 0);
    signal int_weight_16_d0    : UNSIGNED(31 downto 0);
    signal int_weight_16_q0    : UNSIGNED(31 downto 0);
    signal int_weight_16_address1 : UNSIGNED(8 downto 0);
    signal int_weight_16_ce1   : STD_LOGIC;
    signal int_weight_16_we1   : STD_LOGIC;
    signal int_weight_16_be1   : UNSIGNED(3 downto 0);
    signal int_weight_16_d1    : UNSIGNED(31 downto 0);
    signal int_weight_16_q1    : UNSIGNED(31 downto 0);
    signal int_weight_16_read  : STD_LOGIC;
    signal int_weight_16_write : STD_LOGIC;
    signal int_weight_17_address0 : UNSIGNED(8 downto 0);
    signal int_weight_17_ce0   : STD_LOGIC;
    signal int_weight_17_we0   : STD_LOGIC;
    signal int_weight_17_be0   : UNSIGNED(3 downto 0);
    signal int_weight_17_d0    : UNSIGNED(31 downto 0);
    signal int_weight_17_q0    : UNSIGNED(31 downto 0);
    signal int_weight_17_address1 : UNSIGNED(8 downto 0);
    signal int_weight_17_ce1   : STD_LOGIC;
    signal int_weight_17_we1   : STD_LOGIC;
    signal int_weight_17_be1   : UNSIGNED(3 downto 0);
    signal int_weight_17_d1    : UNSIGNED(31 downto 0);
    signal int_weight_17_q1    : UNSIGNED(31 downto 0);
    signal int_weight_17_read  : STD_LOGIC;
    signal int_weight_17_write : STD_LOGIC;
    signal int_weight_18_address0 : UNSIGNED(8 downto 0);
    signal int_weight_18_ce0   : STD_LOGIC;
    signal int_weight_18_we0   : STD_LOGIC;
    signal int_weight_18_be0   : UNSIGNED(3 downto 0);
    signal int_weight_18_d0    : UNSIGNED(31 downto 0);
    signal int_weight_18_q0    : UNSIGNED(31 downto 0);
    signal int_weight_18_address1 : UNSIGNED(8 downto 0);
    signal int_weight_18_ce1   : STD_LOGIC;
    signal int_weight_18_we1   : STD_LOGIC;
    signal int_weight_18_be1   : UNSIGNED(3 downto 0);
    signal int_weight_18_d1    : UNSIGNED(31 downto 0);
    signal int_weight_18_q1    : UNSIGNED(31 downto 0);
    signal int_weight_18_read  : STD_LOGIC;
    signal int_weight_18_write : STD_LOGIC;
    signal int_weight_19_address0 : UNSIGNED(8 downto 0);
    signal int_weight_19_ce0   : STD_LOGIC;
    signal int_weight_19_we0   : STD_LOGIC;
    signal int_weight_19_be0   : UNSIGNED(3 downto 0);
    signal int_weight_19_d0    : UNSIGNED(31 downto 0);
    signal int_weight_19_q0    : UNSIGNED(31 downto 0);
    signal int_weight_19_address1 : UNSIGNED(8 downto 0);
    signal int_weight_19_ce1   : STD_LOGIC;
    signal int_weight_19_we1   : STD_LOGIC;
    signal int_weight_19_be1   : UNSIGNED(3 downto 0);
    signal int_weight_19_d1    : UNSIGNED(31 downto 0);
    signal int_weight_19_q1    : UNSIGNED(31 downto 0);
    signal int_weight_19_read  : STD_LOGIC;
    signal int_weight_19_write : STD_LOGIC;
    signal int_weight_20_address0 : UNSIGNED(8 downto 0);
    signal int_weight_20_ce0   : STD_LOGIC;
    signal int_weight_20_we0   : STD_LOGIC;
    signal int_weight_20_be0   : UNSIGNED(3 downto 0);
    signal int_weight_20_d0    : UNSIGNED(31 downto 0);
    signal int_weight_20_q0    : UNSIGNED(31 downto 0);
    signal int_weight_20_address1 : UNSIGNED(8 downto 0);
    signal int_weight_20_ce1   : STD_LOGIC;
    signal int_weight_20_we1   : STD_LOGIC;
    signal int_weight_20_be1   : UNSIGNED(3 downto 0);
    signal int_weight_20_d1    : UNSIGNED(31 downto 0);
    signal int_weight_20_q1    : UNSIGNED(31 downto 0);
    signal int_weight_20_read  : STD_LOGIC;
    signal int_weight_20_write : STD_LOGIC;
    signal int_weight_21_address0 : UNSIGNED(8 downto 0);
    signal int_weight_21_ce0   : STD_LOGIC;
    signal int_weight_21_we0   : STD_LOGIC;
    signal int_weight_21_be0   : UNSIGNED(3 downto 0);
    signal int_weight_21_d0    : UNSIGNED(31 downto 0);
    signal int_weight_21_q0    : UNSIGNED(31 downto 0);
    signal int_weight_21_address1 : UNSIGNED(8 downto 0);
    signal int_weight_21_ce1   : STD_LOGIC;
    signal int_weight_21_we1   : STD_LOGIC;
    signal int_weight_21_be1   : UNSIGNED(3 downto 0);
    signal int_weight_21_d1    : UNSIGNED(31 downto 0);
    signal int_weight_21_q1    : UNSIGNED(31 downto 0);
    signal int_weight_21_read  : STD_LOGIC;
    signal int_weight_21_write : STD_LOGIC;
    signal int_weight_22_address0 : UNSIGNED(8 downto 0);
    signal int_weight_22_ce0   : STD_LOGIC;
    signal int_weight_22_we0   : STD_LOGIC;
    signal int_weight_22_be0   : UNSIGNED(3 downto 0);
    signal int_weight_22_d0    : UNSIGNED(31 downto 0);
    signal int_weight_22_q0    : UNSIGNED(31 downto 0);
    signal int_weight_22_address1 : UNSIGNED(8 downto 0);
    signal int_weight_22_ce1   : STD_LOGIC;
    signal int_weight_22_we1   : STD_LOGIC;
    signal int_weight_22_be1   : UNSIGNED(3 downto 0);
    signal int_weight_22_d1    : UNSIGNED(31 downto 0);
    signal int_weight_22_q1    : UNSIGNED(31 downto 0);
    signal int_weight_22_read  : STD_LOGIC;
    signal int_weight_22_write : STD_LOGIC;
    signal int_weight_23_address0 : UNSIGNED(8 downto 0);
    signal int_weight_23_ce0   : STD_LOGIC;
    signal int_weight_23_we0   : STD_LOGIC;
    signal int_weight_23_be0   : UNSIGNED(3 downto 0);
    signal int_weight_23_d0    : UNSIGNED(31 downto 0);
    signal int_weight_23_q0    : UNSIGNED(31 downto 0);
    signal int_weight_23_address1 : UNSIGNED(8 downto 0);
    signal int_weight_23_ce1   : STD_LOGIC;
    signal int_weight_23_we1   : STD_LOGIC;
    signal int_weight_23_be1   : UNSIGNED(3 downto 0);
    signal int_weight_23_d1    : UNSIGNED(31 downto 0);
    signal int_weight_23_q1    : UNSIGNED(31 downto 0);
    signal int_weight_23_read  : STD_LOGIC;
    signal int_weight_23_write : STD_LOGIC;
    signal int_weight_24_address0 : UNSIGNED(8 downto 0);
    signal int_weight_24_ce0   : STD_LOGIC;
    signal int_weight_24_we0   : STD_LOGIC;
    signal int_weight_24_be0   : UNSIGNED(3 downto 0);
    signal int_weight_24_d0    : UNSIGNED(31 downto 0);
    signal int_weight_24_q0    : UNSIGNED(31 downto 0);
    signal int_weight_24_address1 : UNSIGNED(8 downto 0);
    signal int_weight_24_ce1   : STD_LOGIC;
    signal int_weight_24_we1   : STD_LOGIC;
    signal int_weight_24_be1   : UNSIGNED(3 downto 0);
    signal int_weight_24_d1    : UNSIGNED(31 downto 0);
    signal int_weight_24_q1    : UNSIGNED(31 downto 0);
    signal int_weight_24_read  : STD_LOGIC;
    signal int_weight_24_write : STD_LOGIC;
    signal int_bias_address0   : UNSIGNED(5 downto 0);
    signal int_bias_ce0        : STD_LOGIC;
    signal int_bias_we0        : STD_LOGIC;
    signal int_bias_be0        : UNSIGNED(3 downto 0);
    signal int_bias_d0         : UNSIGNED(31 downto 0);
    signal int_bias_q0         : UNSIGNED(31 downto 0);
    signal int_bias_address1   : UNSIGNED(5 downto 0);
    signal int_bias_ce1        : STD_LOGIC;
    signal int_bias_we1        : STD_LOGIC;
    signal int_bias_be1        : UNSIGNED(3 downto 0);
    signal int_bias_d1         : UNSIGNED(31 downto 0);
    signal int_bias_q1         : UNSIGNED(31 downto 0);
    signal int_bias_read       : STD_LOGIC;
    signal int_bias_write      : STD_LOGIC;

    component cnn_fc_i144_o50_CTRL_s_axi_ram is
        generic (
            BYTES   : INTEGER :=4;
            DEPTH   : INTEGER :=256;
            AWIDTH  : INTEGER :=8);
        port (
            clk0    : in  STD_LOGIC;
            address0: in  UNSIGNED(AWIDTH-1 downto 0);
            ce0     : in  STD_LOGIC;
            we0     : in  STD_LOGIC;
            be0     : in  UNSIGNED(BYTES-1 downto 0);
            d0      : in  UNSIGNED(BYTES*8-1 downto 0);
            q0      : out UNSIGNED(BYTES*8-1 downto 0);
            clk1    : in  STD_LOGIC;
            address1: in  UNSIGNED(AWIDTH-1 downto 0);
            ce1     : in  STD_LOGIC;
            we1     : in  STD_LOGIC;
            be1     : in  UNSIGNED(BYTES-1 downto 0);
            d1      : in  UNSIGNED(BYTES*8-1 downto 0);
            q1      : out UNSIGNED(BYTES*8-1 downto 0));
    end component cnn_fc_i144_o50_CTRL_s_axi_ram;

    function log2 (x : INTEGER) return INTEGER is
        variable n, m : INTEGER;
    begin
        n := 1;
        m := 2;
        while m < x loop
            n := n + 1;
            m := m * 2;
        end loop;
        return n;
    end function log2;

begin
-- ----------------------- Instantiation------------------
-- int_weight_0
int_weight_0 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_0_address0,
     ce0      => int_weight_0_ce0,
     we0      => int_weight_0_we0,
     be0      => int_weight_0_be0,
     d0       => int_weight_0_d0,
     q0       => int_weight_0_q0,
     clk1     => ACLK,
     address1 => int_weight_0_address1,
     ce1      => int_weight_0_ce1,
     we1      => int_weight_0_we1,
     be1      => int_weight_0_be1,
     d1       => int_weight_0_d1,
     q1       => int_weight_0_q1);
-- int_weight_1
int_weight_1 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_1_address0,
     ce0      => int_weight_1_ce0,
     we0      => int_weight_1_we0,
     be0      => int_weight_1_be0,
     d0       => int_weight_1_d0,
     q0       => int_weight_1_q0,
     clk1     => ACLK,
     address1 => int_weight_1_address1,
     ce1      => int_weight_1_ce1,
     we1      => int_weight_1_we1,
     be1      => int_weight_1_be1,
     d1       => int_weight_1_d1,
     q1       => int_weight_1_q1);
-- int_weight_2
int_weight_2 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_2_address0,
     ce0      => int_weight_2_ce0,
     we0      => int_weight_2_we0,
     be0      => int_weight_2_be0,
     d0       => int_weight_2_d0,
     q0       => int_weight_2_q0,
     clk1     => ACLK,
     address1 => int_weight_2_address1,
     ce1      => int_weight_2_ce1,
     we1      => int_weight_2_we1,
     be1      => int_weight_2_be1,
     d1       => int_weight_2_d1,
     q1       => int_weight_2_q1);
-- int_weight_3
int_weight_3 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_3_address0,
     ce0      => int_weight_3_ce0,
     we0      => int_weight_3_we0,
     be0      => int_weight_3_be0,
     d0       => int_weight_3_d0,
     q0       => int_weight_3_q0,
     clk1     => ACLK,
     address1 => int_weight_3_address1,
     ce1      => int_weight_3_ce1,
     we1      => int_weight_3_we1,
     be1      => int_weight_3_be1,
     d1       => int_weight_3_d1,
     q1       => int_weight_3_q1);
-- int_weight_4
int_weight_4 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_4_address0,
     ce0      => int_weight_4_ce0,
     we0      => int_weight_4_we0,
     be0      => int_weight_4_be0,
     d0       => int_weight_4_d0,
     q0       => int_weight_4_q0,
     clk1     => ACLK,
     address1 => int_weight_4_address1,
     ce1      => int_weight_4_ce1,
     we1      => int_weight_4_we1,
     be1      => int_weight_4_be1,
     d1       => int_weight_4_d1,
     q1       => int_weight_4_q1);
-- int_weight_5
int_weight_5 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_5_address0,
     ce0      => int_weight_5_ce0,
     we0      => int_weight_5_we0,
     be0      => int_weight_5_be0,
     d0       => int_weight_5_d0,
     q0       => int_weight_5_q0,
     clk1     => ACLK,
     address1 => int_weight_5_address1,
     ce1      => int_weight_5_ce1,
     we1      => int_weight_5_we1,
     be1      => int_weight_5_be1,
     d1       => int_weight_5_d1,
     q1       => int_weight_5_q1);
-- int_weight_6
int_weight_6 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_6_address0,
     ce0      => int_weight_6_ce0,
     we0      => int_weight_6_we0,
     be0      => int_weight_6_be0,
     d0       => int_weight_6_d0,
     q0       => int_weight_6_q0,
     clk1     => ACLK,
     address1 => int_weight_6_address1,
     ce1      => int_weight_6_ce1,
     we1      => int_weight_6_we1,
     be1      => int_weight_6_be1,
     d1       => int_weight_6_d1,
     q1       => int_weight_6_q1);
-- int_weight_7
int_weight_7 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_7_address0,
     ce0      => int_weight_7_ce0,
     we0      => int_weight_7_we0,
     be0      => int_weight_7_be0,
     d0       => int_weight_7_d0,
     q0       => int_weight_7_q0,
     clk1     => ACLK,
     address1 => int_weight_7_address1,
     ce1      => int_weight_7_ce1,
     we1      => int_weight_7_we1,
     be1      => int_weight_7_be1,
     d1       => int_weight_7_d1,
     q1       => int_weight_7_q1);
-- int_weight_8
int_weight_8 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_8_address0,
     ce0      => int_weight_8_ce0,
     we0      => int_weight_8_we0,
     be0      => int_weight_8_be0,
     d0       => int_weight_8_d0,
     q0       => int_weight_8_q0,
     clk1     => ACLK,
     address1 => int_weight_8_address1,
     ce1      => int_weight_8_ce1,
     we1      => int_weight_8_we1,
     be1      => int_weight_8_be1,
     d1       => int_weight_8_d1,
     q1       => int_weight_8_q1);
-- int_weight_9
int_weight_9 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_9_address0,
     ce0      => int_weight_9_ce0,
     we0      => int_weight_9_we0,
     be0      => int_weight_9_be0,
     d0       => int_weight_9_d0,
     q0       => int_weight_9_q0,
     clk1     => ACLK,
     address1 => int_weight_9_address1,
     ce1      => int_weight_9_ce1,
     we1      => int_weight_9_we1,
     be1      => int_weight_9_be1,
     d1       => int_weight_9_d1,
     q1       => int_weight_9_q1);
-- int_weight_10
int_weight_10 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_10_address0,
     ce0      => int_weight_10_ce0,
     we0      => int_weight_10_we0,
     be0      => int_weight_10_be0,
     d0       => int_weight_10_d0,
     q0       => int_weight_10_q0,
     clk1     => ACLK,
     address1 => int_weight_10_address1,
     ce1      => int_weight_10_ce1,
     we1      => int_weight_10_we1,
     be1      => int_weight_10_be1,
     d1       => int_weight_10_d1,
     q1       => int_weight_10_q1);
-- int_weight_11
int_weight_11 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_11_address0,
     ce0      => int_weight_11_ce0,
     we0      => int_weight_11_we0,
     be0      => int_weight_11_be0,
     d0       => int_weight_11_d0,
     q0       => int_weight_11_q0,
     clk1     => ACLK,
     address1 => int_weight_11_address1,
     ce1      => int_weight_11_ce1,
     we1      => int_weight_11_we1,
     be1      => int_weight_11_be1,
     d1       => int_weight_11_d1,
     q1       => int_weight_11_q1);
-- int_weight_12
int_weight_12 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_12_address0,
     ce0      => int_weight_12_ce0,
     we0      => int_weight_12_we0,
     be0      => int_weight_12_be0,
     d0       => int_weight_12_d0,
     q0       => int_weight_12_q0,
     clk1     => ACLK,
     address1 => int_weight_12_address1,
     ce1      => int_weight_12_ce1,
     we1      => int_weight_12_we1,
     be1      => int_weight_12_be1,
     d1       => int_weight_12_d1,
     q1       => int_weight_12_q1);
-- int_weight_13
int_weight_13 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_13_address0,
     ce0      => int_weight_13_ce0,
     we0      => int_weight_13_we0,
     be0      => int_weight_13_be0,
     d0       => int_weight_13_d0,
     q0       => int_weight_13_q0,
     clk1     => ACLK,
     address1 => int_weight_13_address1,
     ce1      => int_weight_13_ce1,
     we1      => int_weight_13_we1,
     be1      => int_weight_13_be1,
     d1       => int_weight_13_d1,
     q1       => int_weight_13_q1);
-- int_weight_14
int_weight_14 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_14_address0,
     ce0      => int_weight_14_ce0,
     we0      => int_weight_14_we0,
     be0      => int_weight_14_be0,
     d0       => int_weight_14_d0,
     q0       => int_weight_14_q0,
     clk1     => ACLK,
     address1 => int_weight_14_address1,
     ce1      => int_weight_14_ce1,
     we1      => int_weight_14_we1,
     be1      => int_weight_14_be1,
     d1       => int_weight_14_d1,
     q1       => int_weight_14_q1);
-- int_weight_15
int_weight_15 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_15_address0,
     ce0      => int_weight_15_ce0,
     we0      => int_weight_15_we0,
     be0      => int_weight_15_be0,
     d0       => int_weight_15_d0,
     q0       => int_weight_15_q0,
     clk1     => ACLK,
     address1 => int_weight_15_address1,
     ce1      => int_weight_15_ce1,
     we1      => int_weight_15_we1,
     be1      => int_weight_15_be1,
     d1       => int_weight_15_d1,
     q1       => int_weight_15_q1);
-- int_weight_16
int_weight_16 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_16_address0,
     ce0      => int_weight_16_ce0,
     we0      => int_weight_16_we0,
     be0      => int_weight_16_be0,
     d0       => int_weight_16_d0,
     q0       => int_weight_16_q0,
     clk1     => ACLK,
     address1 => int_weight_16_address1,
     ce1      => int_weight_16_ce1,
     we1      => int_weight_16_we1,
     be1      => int_weight_16_be1,
     d1       => int_weight_16_d1,
     q1       => int_weight_16_q1);
-- int_weight_17
int_weight_17 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_17_address0,
     ce0      => int_weight_17_ce0,
     we0      => int_weight_17_we0,
     be0      => int_weight_17_be0,
     d0       => int_weight_17_d0,
     q0       => int_weight_17_q0,
     clk1     => ACLK,
     address1 => int_weight_17_address1,
     ce1      => int_weight_17_ce1,
     we1      => int_weight_17_we1,
     be1      => int_weight_17_be1,
     d1       => int_weight_17_d1,
     q1       => int_weight_17_q1);
-- int_weight_18
int_weight_18 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_18_address0,
     ce0      => int_weight_18_ce0,
     we0      => int_weight_18_we0,
     be0      => int_weight_18_be0,
     d0       => int_weight_18_d0,
     q0       => int_weight_18_q0,
     clk1     => ACLK,
     address1 => int_weight_18_address1,
     ce1      => int_weight_18_ce1,
     we1      => int_weight_18_we1,
     be1      => int_weight_18_be1,
     d1       => int_weight_18_d1,
     q1       => int_weight_18_q1);
-- int_weight_19
int_weight_19 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_19_address0,
     ce0      => int_weight_19_ce0,
     we0      => int_weight_19_we0,
     be0      => int_weight_19_be0,
     d0       => int_weight_19_d0,
     q0       => int_weight_19_q0,
     clk1     => ACLK,
     address1 => int_weight_19_address1,
     ce1      => int_weight_19_ce1,
     we1      => int_weight_19_we1,
     be1      => int_weight_19_be1,
     d1       => int_weight_19_d1,
     q1       => int_weight_19_q1);
-- int_weight_20
int_weight_20 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_20_address0,
     ce0      => int_weight_20_ce0,
     we0      => int_weight_20_we0,
     be0      => int_weight_20_be0,
     d0       => int_weight_20_d0,
     q0       => int_weight_20_q0,
     clk1     => ACLK,
     address1 => int_weight_20_address1,
     ce1      => int_weight_20_ce1,
     we1      => int_weight_20_we1,
     be1      => int_weight_20_be1,
     d1       => int_weight_20_d1,
     q1       => int_weight_20_q1);
-- int_weight_21
int_weight_21 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_21_address0,
     ce0      => int_weight_21_ce0,
     we0      => int_weight_21_we0,
     be0      => int_weight_21_be0,
     d0       => int_weight_21_d0,
     q0       => int_weight_21_q0,
     clk1     => ACLK,
     address1 => int_weight_21_address1,
     ce1      => int_weight_21_ce1,
     we1      => int_weight_21_we1,
     be1      => int_weight_21_be1,
     d1       => int_weight_21_d1,
     q1       => int_weight_21_q1);
-- int_weight_22
int_weight_22 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_22_address0,
     ce0      => int_weight_22_ce0,
     we0      => int_weight_22_we0,
     be0      => int_weight_22_be0,
     d0       => int_weight_22_d0,
     q0       => int_weight_22_q0,
     clk1     => ACLK,
     address1 => int_weight_22_address1,
     ce1      => int_weight_22_ce1,
     we1      => int_weight_22_we1,
     be1      => int_weight_22_be1,
     d1       => int_weight_22_d1,
     q1       => int_weight_22_q1);
-- int_weight_23
int_weight_23 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_23_address0,
     ce0      => int_weight_23_ce0,
     we0      => int_weight_23_we0,
     be0      => int_weight_23_be0,
     d0       => int_weight_23_d0,
     q0       => int_weight_23_q0,
     clk1     => ACLK,
     address1 => int_weight_23_address1,
     ce1      => int_weight_23_ce1,
     we1      => int_weight_23_we1,
     be1      => int_weight_23_be1,
     d1       => int_weight_23_d1,
     q1       => int_weight_23_q1);
-- int_weight_24
int_weight_24 : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 288,
     AWIDTH   => log2(288))
port map (
     clk0     => ACLK,
     address0 => int_weight_24_address0,
     ce0      => int_weight_24_ce0,
     we0      => int_weight_24_we0,
     be0      => int_weight_24_be0,
     d0       => int_weight_24_d0,
     q0       => int_weight_24_q0,
     clk1     => ACLK,
     address1 => int_weight_24_address1,
     ce1      => int_weight_24_ce1,
     we1      => int_weight_24_we1,
     be1      => int_weight_24_be1,
     d1       => int_weight_24_d1,
     q1       => int_weight_24_q1);
-- int_bias
int_bias : cnn_fc_i144_o50_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_bias_address0,
     ce0      => int_bias_ce0,
     we0      => int_bias_we0,
     be0      => int_bias_be0,
     d0       => int_bias_d0,
     q0       => int_bias_q0,
     clk1     => ACLK,
     address1 => int_bias_address1,
     ce1      => int_bias_ce1,
     we1      => int_bias_we1,
     be1      => int_bias_be1,
     d1       => int_bias_d1,
     q1       => int_bias_q1);

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  not ARESET and AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wridle;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= not ARESET and ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) and (int_weight_0_read = '0') and (int_weight_1_read = '0') and (int_weight_2_read = '0') and (int_weight_3_read = '0') and (int_weight_4_read = '0') and (int_weight_5_read = '0') and (int_weight_6_read = '0') and (int_weight_7_read = '0') and (int_weight_8_read = '0') and (int_weight_9_read = '0') and (int_weight_10_read = '0') and (int_weight_11_read = '0') and (int_weight_12_read = '0') and (int_weight_13_read = '0') and (int_weight_14_read = '0') and (int_weight_15_read = '0') and (int_weight_16_read = '0') and (int_weight_17_read = '0') and (int_weight_18_read = '0') and (int_weight_19_read = '0') and (int_weight_20_read = '0') and (int_weight_21_read = '0') and (int_weight_22_read = '0') and (int_weight_23_read = '0') and (int_weight_24_read = '0') and (int_bias_read = '0') else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdidle;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_AP_CTRL =>
                        rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                    when ADDR_GIE =>
                        rdata_data <= (0 => int_gie, others => '0');
                    when ADDR_IER =>
                        rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                    when ADDR_ISR =>
                        rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                    when ADDR_CTRL_DATA_0 =>
                        rdata_data <= RESIZE(int_ctrl(31 downto 0), 32);
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                elsif (int_weight_0_read = '1') then
                    rdata_data <= int_weight_0_q1;
                elsif (int_weight_1_read = '1') then
                    rdata_data <= int_weight_1_q1;
                elsif (int_weight_2_read = '1') then
                    rdata_data <= int_weight_2_q1;
                elsif (int_weight_3_read = '1') then
                    rdata_data <= int_weight_3_q1;
                elsif (int_weight_4_read = '1') then
                    rdata_data <= int_weight_4_q1;
                elsif (int_weight_5_read = '1') then
                    rdata_data <= int_weight_5_q1;
                elsif (int_weight_6_read = '1') then
                    rdata_data <= int_weight_6_q1;
                elsif (int_weight_7_read = '1') then
                    rdata_data <= int_weight_7_q1;
                elsif (int_weight_8_read = '1') then
                    rdata_data <= int_weight_8_q1;
                elsif (int_weight_9_read = '1') then
                    rdata_data <= int_weight_9_q1;
                elsif (int_weight_10_read = '1') then
                    rdata_data <= int_weight_10_q1;
                elsif (int_weight_11_read = '1') then
                    rdata_data <= int_weight_11_q1;
                elsif (int_weight_12_read = '1') then
                    rdata_data <= int_weight_12_q1;
                elsif (int_weight_13_read = '1') then
                    rdata_data <= int_weight_13_q1;
                elsif (int_weight_14_read = '1') then
                    rdata_data <= int_weight_14_q1;
                elsif (int_weight_15_read = '1') then
                    rdata_data <= int_weight_15_q1;
                elsif (int_weight_16_read = '1') then
                    rdata_data <= int_weight_16_q1;
                elsif (int_weight_17_read = '1') then
                    rdata_data <= int_weight_17_q1;
                elsif (int_weight_18_read = '1') then
                    rdata_data <= int_weight_18_q1;
                elsif (int_weight_19_read = '1') then
                    rdata_data <= int_weight_19_q1;
                elsif (int_weight_20_read = '1') then
                    rdata_data <= int_weight_20_q1;
                elsif (int_weight_21_read = '1') then
                    rdata_data <= int_weight_21_q1;
                elsif (int_weight_22_read = '1') then
                    rdata_data <= int_weight_22_q1;
                elsif (int_weight_23_read = '1') then
                    rdata_data <= int_weight_23_q1;
                elsif (int_weight_24_read = '1') then
                    rdata_data <= int_weight_24_q1;
                elsif (int_bias_read = '1') then
                    rdata_data <= int_bias_q1;
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;
    int_ap_idle          <= ap_idle;
    int_ap_ready         <= ap_ready;
    ctrl                 <= STD_LOGIC_VECTOR(int_ctrl);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (int_ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CTRL_DATA_0) then
                    int_ctrl(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_ctrl(31 downto 0));
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------
    -- weight_0
    int_weight_0_address0 <= UNSIGNED(weight_0_address0);
    int_weight_0_ce0     <= weight_0_ce0;
    int_weight_0_we0     <= '0';
    int_weight_0_be0     <= (others => '0');
    int_weight_0_d0      <= (others => '0');
    weight_0_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_0_q0, 32));
    int_weight_0_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_0_ce1     <= '1' when ar_hs = '1' or (int_weight_0_write = '1' and WVALID  = '1') else '0';
    int_weight_0_we1     <= '1' when int_weight_0_write = '1' and WVALID = '1' else '0';
    int_weight_0_be1     <= UNSIGNED(WSTRB);
    int_weight_0_d1      <= UNSIGNED(WDATA);
    -- weight_1
    int_weight_1_address0 <= UNSIGNED(weight_1_address0);
    int_weight_1_ce0     <= weight_1_ce0;
    int_weight_1_we0     <= '0';
    int_weight_1_be0     <= (others => '0');
    int_weight_1_d0      <= (others => '0');
    weight_1_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_1_q0, 32));
    int_weight_1_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_1_ce1     <= '1' when ar_hs = '1' or (int_weight_1_write = '1' and WVALID  = '1') else '0';
    int_weight_1_we1     <= '1' when int_weight_1_write = '1' and WVALID = '1' else '0';
    int_weight_1_be1     <= UNSIGNED(WSTRB);
    int_weight_1_d1      <= UNSIGNED(WDATA);
    -- weight_2
    int_weight_2_address0 <= UNSIGNED(weight_2_address0);
    int_weight_2_ce0     <= weight_2_ce0;
    int_weight_2_we0     <= '0';
    int_weight_2_be0     <= (others => '0');
    int_weight_2_d0      <= (others => '0');
    weight_2_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_2_q0, 32));
    int_weight_2_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_2_ce1     <= '1' when ar_hs = '1' or (int_weight_2_write = '1' and WVALID  = '1') else '0';
    int_weight_2_we1     <= '1' when int_weight_2_write = '1' and WVALID = '1' else '0';
    int_weight_2_be1     <= UNSIGNED(WSTRB);
    int_weight_2_d1      <= UNSIGNED(WDATA);
    -- weight_3
    int_weight_3_address0 <= UNSIGNED(weight_3_address0);
    int_weight_3_ce0     <= weight_3_ce0;
    int_weight_3_we0     <= '0';
    int_weight_3_be0     <= (others => '0');
    int_weight_3_d0      <= (others => '0');
    weight_3_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_3_q0, 32));
    int_weight_3_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_3_ce1     <= '1' when ar_hs = '1' or (int_weight_3_write = '1' and WVALID  = '1') else '0';
    int_weight_3_we1     <= '1' when int_weight_3_write = '1' and WVALID = '1' else '0';
    int_weight_3_be1     <= UNSIGNED(WSTRB);
    int_weight_3_d1      <= UNSIGNED(WDATA);
    -- weight_4
    int_weight_4_address0 <= UNSIGNED(weight_4_address0);
    int_weight_4_ce0     <= weight_4_ce0;
    int_weight_4_we0     <= '0';
    int_weight_4_be0     <= (others => '0');
    int_weight_4_d0      <= (others => '0');
    weight_4_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_4_q0, 32));
    int_weight_4_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_4_ce1     <= '1' when ar_hs = '1' or (int_weight_4_write = '1' and WVALID  = '1') else '0';
    int_weight_4_we1     <= '1' when int_weight_4_write = '1' and WVALID = '1' else '0';
    int_weight_4_be1     <= UNSIGNED(WSTRB);
    int_weight_4_d1      <= UNSIGNED(WDATA);
    -- weight_5
    int_weight_5_address0 <= UNSIGNED(weight_5_address0);
    int_weight_5_ce0     <= weight_5_ce0;
    int_weight_5_we0     <= '0';
    int_weight_5_be0     <= (others => '0');
    int_weight_5_d0      <= (others => '0');
    weight_5_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_5_q0, 32));
    int_weight_5_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_5_ce1     <= '1' when ar_hs = '1' or (int_weight_5_write = '1' and WVALID  = '1') else '0';
    int_weight_5_we1     <= '1' when int_weight_5_write = '1' and WVALID = '1' else '0';
    int_weight_5_be1     <= UNSIGNED(WSTRB);
    int_weight_5_d1      <= UNSIGNED(WDATA);
    -- weight_6
    int_weight_6_address0 <= UNSIGNED(weight_6_address0);
    int_weight_6_ce0     <= weight_6_ce0;
    int_weight_6_we0     <= '0';
    int_weight_6_be0     <= (others => '0');
    int_weight_6_d0      <= (others => '0');
    weight_6_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_6_q0, 32));
    int_weight_6_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_6_ce1     <= '1' when ar_hs = '1' or (int_weight_6_write = '1' and WVALID  = '1') else '0';
    int_weight_6_we1     <= '1' when int_weight_6_write = '1' and WVALID = '1' else '0';
    int_weight_6_be1     <= UNSIGNED(WSTRB);
    int_weight_6_d1      <= UNSIGNED(WDATA);
    -- weight_7
    int_weight_7_address0 <= UNSIGNED(weight_7_address0);
    int_weight_7_ce0     <= weight_7_ce0;
    int_weight_7_we0     <= '0';
    int_weight_7_be0     <= (others => '0');
    int_weight_7_d0      <= (others => '0');
    weight_7_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_7_q0, 32));
    int_weight_7_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_7_ce1     <= '1' when ar_hs = '1' or (int_weight_7_write = '1' and WVALID  = '1') else '0';
    int_weight_7_we1     <= '1' when int_weight_7_write = '1' and WVALID = '1' else '0';
    int_weight_7_be1     <= UNSIGNED(WSTRB);
    int_weight_7_d1      <= UNSIGNED(WDATA);
    -- weight_8
    int_weight_8_address0 <= UNSIGNED(weight_8_address0);
    int_weight_8_ce0     <= weight_8_ce0;
    int_weight_8_we0     <= '0';
    int_weight_8_be0     <= (others => '0');
    int_weight_8_d0      <= (others => '0');
    weight_8_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_8_q0, 32));
    int_weight_8_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_8_ce1     <= '1' when ar_hs = '1' or (int_weight_8_write = '1' and WVALID  = '1') else '0';
    int_weight_8_we1     <= '1' when int_weight_8_write = '1' and WVALID = '1' else '0';
    int_weight_8_be1     <= UNSIGNED(WSTRB);
    int_weight_8_d1      <= UNSIGNED(WDATA);
    -- weight_9
    int_weight_9_address0 <= UNSIGNED(weight_9_address0);
    int_weight_9_ce0     <= weight_9_ce0;
    int_weight_9_we0     <= '0';
    int_weight_9_be0     <= (others => '0');
    int_weight_9_d0      <= (others => '0');
    weight_9_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_9_q0, 32));
    int_weight_9_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_9_ce1     <= '1' when ar_hs = '1' or (int_weight_9_write = '1' and WVALID  = '1') else '0';
    int_weight_9_we1     <= '1' when int_weight_9_write = '1' and WVALID = '1' else '0';
    int_weight_9_be1     <= UNSIGNED(WSTRB);
    int_weight_9_d1      <= UNSIGNED(WDATA);
    -- weight_10
    int_weight_10_address0 <= UNSIGNED(weight_10_address0);
    int_weight_10_ce0    <= weight_10_ce0;
    int_weight_10_we0    <= '0';
    int_weight_10_be0    <= (others => '0');
    int_weight_10_d0     <= (others => '0');
    weight_10_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_10_q0, 32));
    int_weight_10_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_10_ce1    <= '1' when ar_hs = '1' or (int_weight_10_write = '1' and WVALID  = '1') else '0';
    int_weight_10_we1    <= '1' when int_weight_10_write = '1' and WVALID = '1' else '0';
    int_weight_10_be1    <= UNSIGNED(WSTRB);
    int_weight_10_d1     <= UNSIGNED(WDATA);
    -- weight_11
    int_weight_11_address0 <= UNSIGNED(weight_11_address0);
    int_weight_11_ce0    <= weight_11_ce0;
    int_weight_11_we0    <= '0';
    int_weight_11_be0    <= (others => '0');
    int_weight_11_d0     <= (others => '0');
    weight_11_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_11_q0, 32));
    int_weight_11_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_11_ce1    <= '1' when ar_hs = '1' or (int_weight_11_write = '1' and WVALID  = '1') else '0';
    int_weight_11_we1    <= '1' when int_weight_11_write = '1' and WVALID = '1' else '0';
    int_weight_11_be1    <= UNSIGNED(WSTRB);
    int_weight_11_d1     <= UNSIGNED(WDATA);
    -- weight_12
    int_weight_12_address0 <= UNSIGNED(weight_12_address0);
    int_weight_12_ce0    <= weight_12_ce0;
    int_weight_12_we0    <= '0';
    int_weight_12_be0    <= (others => '0');
    int_weight_12_d0     <= (others => '0');
    weight_12_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_12_q0, 32));
    int_weight_12_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_12_ce1    <= '1' when ar_hs = '1' or (int_weight_12_write = '1' and WVALID  = '1') else '0';
    int_weight_12_we1    <= '1' when int_weight_12_write = '1' and WVALID = '1' else '0';
    int_weight_12_be1    <= UNSIGNED(WSTRB);
    int_weight_12_d1     <= UNSIGNED(WDATA);
    -- weight_13
    int_weight_13_address0 <= UNSIGNED(weight_13_address0);
    int_weight_13_ce0    <= weight_13_ce0;
    int_weight_13_we0    <= '0';
    int_weight_13_be0    <= (others => '0');
    int_weight_13_d0     <= (others => '0');
    weight_13_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_13_q0, 32));
    int_weight_13_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_13_ce1    <= '1' when ar_hs = '1' or (int_weight_13_write = '1' and WVALID  = '1') else '0';
    int_weight_13_we1    <= '1' when int_weight_13_write = '1' and WVALID = '1' else '0';
    int_weight_13_be1    <= UNSIGNED(WSTRB);
    int_weight_13_d1     <= UNSIGNED(WDATA);
    -- weight_14
    int_weight_14_address0 <= UNSIGNED(weight_14_address0);
    int_weight_14_ce0    <= weight_14_ce0;
    int_weight_14_we0    <= '0';
    int_weight_14_be0    <= (others => '0');
    int_weight_14_d0     <= (others => '0');
    weight_14_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_14_q0, 32));
    int_weight_14_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_14_ce1    <= '1' when ar_hs = '1' or (int_weight_14_write = '1' and WVALID  = '1') else '0';
    int_weight_14_we1    <= '1' when int_weight_14_write = '1' and WVALID = '1' else '0';
    int_weight_14_be1    <= UNSIGNED(WSTRB);
    int_weight_14_d1     <= UNSIGNED(WDATA);
    -- weight_15
    int_weight_15_address0 <= UNSIGNED(weight_15_address0);
    int_weight_15_ce0    <= weight_15_ce0;
    int_weight_15_we0    <= '0';
    int_weight_15_be0    <= (others => '0');
    int_weight_15_d0     <= (others => '0');
    weight_15_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_15_q0, 32));
    int_weight_15_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_15_ce1    <= '1' when ar_hs = '1' or (int_weight_15_write = '1' and WVALID  = '1') else '0';
    int_weight_15_we1    <= '1' when int_weight_15_write = '1' and WVALID = '1' else '0';
    int_weight_15_be1    <= UNSIGNED(WSTRB);
    int_weight_15_d1     <= UNSIGNED(WDATA);
    -- weight_16
    int_weight_16_address0 <= UNSIGNED(weight_16_address0);
    int_weight_16_ce0    <= weight_16_ce0;
    int_weight_16_we0    <= '0';
    int_weight_16_be0    <= (others => '0');
    int_weight_16_d0     <= (others => '0');
    weight_16_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_16_q0, 32));
    int_weight_16_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_16_ce1    <= '1' when ar_hs = '1' or (int_weight_16_write = '1' and WVALID  = '1') else '0';
    int_weight_16_we1    <= '1' when int_weight_16_write = '1' and WVALID = '1' else '0';
    int_weight_16_be1    <= UNSIGNED(WSTRB);
    int_weight_16_d1     <= UNSIGNED(WDATA);
    -- weight_17
    int_weight_17_address0 <= UNSIGNED(weight_17_address0);
    int_weight_17_ce0    <= weight_17_ce0;
    int_weight_17_we0    <= '0';
    int_weight_17_be0    <= (others => '0');
    int_weight_17_d0     <= (others => '0');
    weight_17_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_17_q0, 32));
    int_weight_17_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_17_ce1    <= '1' when ar_hs = '1' or (int_weight_17_write = '1' and WVALID  = '1') else '0';
    int_weight_17_we1    <= '1' when int_weight_17_write = '1' and WVALID = '1' else '0';
    int_weight_17_be1    <= UNSIGNED(WSTRB);
    int_weight_17_d1     <= UNSIGNED(WDATA);
    -- weight_18
    int_weight_18_address0 <= UNSIGNED(weight_18_address0);
    int_weight_18_ce0    <= weight_18_ce0;
    int_weight_18_we0    <= '0';
    int_weight_18_be0    <= (others => '0');
    int_weight_18_d0     <= (others => '0');
    weight_18_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_18_q0, 32));
    int_weight_18_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_18_ce1    <= '1' when ar_hs = '1' or (int_weight_18_write = '1' and WVALID  = '1') else '0';
    int_weight_18_we1    <= '1' when int_weight_18_write = '1' and WVALID = '1' else '0';
    int_weight_18_be1    <= UNSIGNED(WSTRB);
    int_weight_18_d1     <= UNSIGNED(WDATA);
    -- weight_19
    int_weight_19_address0 <= UNSIGNED(weight_19_address0);
    int_weight_19_ce0    <= weight_19_ce0;
    int_weight_19_we0    <= '0';
    int_weight_19_be0    <= (others => '0');
    int_weight_19_d0     <= (others => '0');
    weight_19_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_19_q0, 32));
    int_weight_19_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_19_ce1    <= '1' when ar_hs = '1' or (int_weight_19_write = '1' and WVALID  = '1') else '0';
    int_weight_19_we1    <= '1' when int_weight_19_write = '1' and WVALID = '1' else '0';
    int_weight_19_be1    <= UNSIGNED(WSTRB);
    int_weight_19_d1     <= UNSIGNED(WDATA);
    -- weight_20
    int_weight_20_address0 <= UNSIGNED(weight_20_address0);
    int_weight_20_ce0    <= weight_20_ce0;
    int_weight_20_we0    <= '0';
    int_weight_20_be0    <= (others => '0');
    int_weight_20_d0     <= (others => '0');
    weight_20_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_20_q0, 32));
    int_weight_20_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_20_ce1    <= '1' when ar_hs = '1' or (int_weight_20_write = '1' and WVALID  = '1') else '0';
    int_weight_20_we1    <= '1' when int_weight_20_write = '1' and WVALID = '1' else '0';
    int_weight_20_be1    <= UNSIGNED(WSTRB);
    int_weight_20_d1     <= UNSIGNED(WDATA);
    -- weight_21
    int_weight_21_address0 <= UNSIGNED(weight_21_address0);
    int_weight_21_ce0    <= weight_21_ce0;
    int_weight_21_we0    <= '0';
    int_weight_21_be0    <= (others => '0');
    int_weight_21_d0     <= (others => '0');
    weight_21_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_21_q0, 32));
    int_weight_21_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_21_ce1    <= '1' when ar_hs = '1' or (int_weight_21_write = '1' and WVALID  = '1') else '0';
    int_weight_21_we1    <= '1' when int_weight_21_write = '1' and WVALID = '1' else '0';
    int_weight_21_be1    <= UNSIGNED(WSTRB);
    int_weight_21_d1     <= UNSIGNED(WDATA);
    -- weight_22
    int_weight_22_address0 <= UNSIGNED(weight_22_address0);
    int_weight_22_ce0    <= weight_22_ce0;
    int_weight_22_we0    <= '0';
    int_weight_22_be0    <= (others => '0');
    int_weight_22_d0     <= (others => '0');
    weight_22_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_22_q0, 32));
    int_weight_22_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_22_ce1    <= '1' when ar_hs = '1' or (int_weight_22_write = '1' and WVALID  = '1') else '0';
    int_weight_22_we1    <= '1' when int_weight_22_write = '1' and WVALID = '1' else '0';
    int_weight_22_be1    <= UNSIGNED(WSTRB);
    int_weight_22_d1     <= UNSIGNED(WDATA);
    -- weight_23
    int_weight_23_address0 <= UNSIGNED(weight_23_address0);
    int_weight_23_ce0    <= weight_23_ce0;
    int_weight_23_we0    <= '0';
    int_weight_23_be0    <= (others => '0');
    int_weight_23_d0     <= (others => '0');
    weight_23_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_23_q0, 32));
    int_weight_23_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_23_ce1    <= '1' when ar_hs = '1' or (int_weight_23_write = '1' and WVALID  = '1') else '0';
    int_weight_23_we1    <= '1' when int_weight_23_write = '1' and WVALID = '1' else '0';
    int_weight_23_be1    <= UNSIGNED(WSTRB);
    int_weight_23_d1     <= UNSIGNED(WDATA);
    -- weight_24
    int_weight_24_address0 <= UNSIGNED(weight_24_address0);
    int_weight_24_ce0    <= weight_24_ce0;
    int_weight_24_we0    <= '0';
    int_weight_24_be0    <= (others => '0');
    int_weight_24_d0     <= (others => '0');
    weight_24_q0         <= STD_LOGIC_VECTOR(RESIZE(int_weight_24_q0, 32));
    int_weight_24_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_weight_24_ce1    <= '1' when ar_hs = '1' or (int_weight_24_write = '1' and WVALID  = '1') else '0';
    int_weight_24_we1    <= '1' when int_weight_24_write = '1' and WVALID = '1' else '0';
    int_weight_24_be1    <= UNSIGNED(WSTRB);
    int_weight_24_d1     <= UNSIGNED(WDATA);
    -- bias
    int_bias_address0    <= UNSIGNED(bias_address0);
    int_bias_ce0         <= bias_ce0;
    int_bias_we0         <= '0';
    int_bias_be0         <= (others => '0');
    int_bias_d0          <= (others => '0');
    bias_q0              <= STD_LOGIC_VECTOR(RESIZE(int_bias_q0, 32));
    int_bias_address1    <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_bias_ce1         <= '1' when ar_hs = '1' or (int_bias_write = '1' and WVALID  = '1') else '0';
    int_bias_we1         <= '1' when int_bias_write = '1' and WVALID = '1' else '0';
    int_bias_be1         <= UNSIGNED(WSTRB);
    int_bias_d1          <= UNSIGNED(WDATA);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_0_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_0_BASE and raddr <= ADDR_WEIGHT_0_HIGH) then
                    int_weight_0_read <= '1';
                else
                    int_weight_0_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_0_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_0_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_0_HIGH) then
                    int_weight_0_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_0_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_1_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_1_BASE and raddr <= ADDR_WEIGHT_1_HIGH) then
                    int_weight_1_read <= '1';
                else
                    int_weight_1_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_1_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_1_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_1_HIGH) then
                    int_weight_1_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_1_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_2_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_2_BASE and raddr <= ADDR_WEIGHT_2_HIGH) then
                    int_weight_2_read <= '1';
                else
                    int_weight_2_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_2_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_2_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_2_HIGH) then
                    int_weight_2_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_2_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_3_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_3_BASE and raddr <= ADDR_WEIGHT_3_HIGH) then
                    int_weight_3_read <= '1';
                else
                    int_weight_3_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_3_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_3_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_3_HIGH) then
                    int_weight_3_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_3_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_4_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_4_BASE and raddr <= ADDR_WEIGHT_4_HIGH) then
                    int_weight_4_read <= '1';
                else
                    int_weight_4_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_4_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_4_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_4_HIGH) then
                    int_weight_4_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_4_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_5_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_5_BASE and raddr <= ADDR_WEIGHT_5_HIGH) then
                    int_weight_5_read <= '1';
                else
                    int_weight_5_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_5_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_5_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_5_HIGH) then
                    int_weight_5_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_5_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_6_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_6_BASE and raddr <= ADDR_WEIGHT_6_HIGH) then
                    int_weight_6_read <= '1';
                else
                    int_weight_6_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_6_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_6_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_6_HIGH) then
                    int_weight_6_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_6_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_7_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_7_BASE and raddr <= ADDR_WEIGHT_7_HIGH) then
                    int_weight_7_read <= '1';
                else
                    int_weight_7_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_7_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_7_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_7_HIGH) then
                    int_weight_7_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_7_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_8_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_8_BASE and raddr <= ADDR_WEIGHT_8_HIGH) then
                    int_weight_8_read <= '1';
                else
                    int_weight_8_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_8_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_8_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_8_HIGH) then
                    int_weight_8_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_8_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_9_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_9_BASE and raddr <= ADDR_WEIGHT_9_HIGH) then
                    int_weight_9_read <= '1';
                else
                    int_weight_9_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_9_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_9_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_9_HIGH) then
                    int_weight_9_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_9_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_10_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_10_BASE and raddr <= ADDR_WEIGHT_10_HIGH) then
                    int_weight_10_read <= '1';
                else
                    int_weight_10_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_10_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_10_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_10_HIGH) then
                    int_weight_10_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_10_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_11_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_11_BASE and raddr <= ADDR_WEIGHT_11_HIGH) then
                    int_weight_11_read <= '1';
                else
                    int_weight_11_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_11_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_11_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_11_HIGH) then
                    int_weight_11_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_11_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_12_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_12_BASE and raddr <= ADDR_WEIGHT_12_HIGH) then
                    int_weight_12_read <= '1';
                else
                    int_weight_12_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_12_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_12_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_12_HIGH) then
                    int_weight_12_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_12_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_13_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_13_BASE and raddr <= ADDR_WEIGHT_13_HIGH) then
                    int_weight_13_read <= '1';
                else
                    int_weight_13_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_13_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_13_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_13_HIGH) then
                    int_weight_13_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_13_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_14_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_14_BASE and raddr <= ADDR_WEIGHT_14_HIGH) then
                    int_weight_14_read <= '1';
                else
                    int_weight_14_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_14_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_14_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_14_HIGH) then
                    int_weight_14_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_14_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_15_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_15_BASE and raddr <= ADDR_WEIGHT_15_HIGH) then
                    int_weight_15_read <= '1';
                else
                    int_weight_15_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_15_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_15_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_15_HIGH) then
                    int_weight_15_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_15_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_16_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_16_BASE and raddr <= ADDR_WEIGHT_16_HIGH) then
                    int_weight_16_read <= '1';
                else
                    int_weight_16_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_16_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_16_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_16_HIGH) then
                    int_weight_16_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_16_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_17_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_17_BASE and raddr <= ADDR_WEIGHT_17_HIGH) then
                    int_weight_17_read <= '1';
                else
                    int_weight_17_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_17_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_17_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_17_HIGH) then
                    int_weight_17_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_17_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_18_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_18_BASE and raddr <= ADDR_WEIGHT_18_HIGH) then
                    int_weight_18_read <= '1';
                else
                    int_weight_18_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_18_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_18_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_18_HIGH) then
                    int_weight_18_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_18_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_19_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_19_BASE and raddr <= ADDR_WEIGHT_19_HIGH) then
                    int_weight_19_read <= '1';
                else
                    int_weight_19_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_19_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_19_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_19_HIGH) then
                    int_weight_19_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_19_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_20_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_20_BASE and raddr <= ADDR_WEIGHT_20_HIGH) then
                    int_weight_20_read <= '1';
                else
                    int_weight_20_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_20_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_20_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_20_HIGH) then
                    int_weight_20_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_20_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_21_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_21_BASE and raddr <= ADDR_WEIGHT_21_HIGH) then
                    int_weight_21_read <= '1';
                else
                    int_weight_21_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_21_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_21_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_21_HIGH) then
                    int_weight_21_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_21_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_22_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_22_BASE and raddr <= ADDR_WEIGHT_22_HIGH) then
                    int_weight_22_read <= '1';
                else
                    int_weight_22_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_22_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_22_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_22_HIGH) then
                    int_weight_22_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_22_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_23_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_23_BASE and raddr <= ADDR_WEIGHT_23_HIGH) then
                    int_weight_23_read <= '1';
                else
                    int_weight_23_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_23_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_23_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_23_HIGH) then
                    int_weight_23_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_23_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_24_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_24_BASE and raddr <= ADDR_WEIGHT_24_HIGH) then
                    int_weight_24_read <= '1';
                else
                    int_weight_24_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_24_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_24_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_24_HIGH) then
                    int_weight_24_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_24_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_bias_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BIAS_BASE and raddr <= ADDR_BIAS_HIGH) then
                    int_bias_read <= '1';
                else
                    int_bias_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_bias_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BIAS_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BIAS_HIGH) then
                    int_bias_write <= '1';
                elsif (WVALID = '1') then
                    int_bias_write <= '0';
                end if;
            end if;
        end if;
    end process;


end architecture behave;

library IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.all;

entity cnn_fc_i144_o50_CTRL_s_axi_ram is
    generic (
        BYTES   : INTEGER :=4;
        DEPTH   : INTEGER :=256;
        AWIDTH  : INTEGER :=8);
    port (
        clk0    : in  STD_LOGIC;
        address0: in  UNSIGNED(AWIDTH-1 downto 0);
        ce0     : in  STD_LOGIC;
        we0     : in  STD_LOGIC;
        be0     : in  UNSIGNED(BYTES-1 downto 0);
        d0      : in  UNSIGNED(BYTES*8-1 downto 0);
        q0      : out UNSIGNED(BYTES*8-1 downto 0);
        clk1    : in  STD_LOGIC;
        address1: in  UNSIGNED(AWIDTH-1 downto 0);
        ce1     : in  STD_LOGIC;
        we1     : in  STD_LOGIC;
        be1     : in  UNSIGNED(BYTES-1 downto 0);
        d1      : in  UNSIGNED(BYTES*8-1 downto 0);
        q1      : out UNSIGNED(BYTES*8-1 downto 0));

end entity cnn_fc_i144_o50_CTRL_s_axi_ram;

architecture behave of cnn_fc_i144_o50_CTRL_s_axi_ram is
    signal address0_tmp : UNSIGNED(AWIDTH-1 downto 0);
    signal address1_tmp : UNSIGNED(AWIDTH-1 downto 0);
    type RAM_T is array (0 to DEPTH - 1) of UNSIGNED(BYTES*8 - 1 downto 0);
    shared variable mem : RAM_T := (others => (others => '0'));
begin

    process (address0)
    begin
    address0_tmp <= address0;
    --synthesis translate_off
          if (address0 > DEPTH-1) then
              address0_tmp <= (others => '0');
          else
              address0_tmp <= address0;
          end if;
    --synthesis translate_on
    end process;

    process (address1)
    begin
    address1_tmp <= address1;
    --synthesis translate_off
          if (address1 > DEPTH-1) then
              address1_tmp <= (others => '0');
          else
              address1_tmp <= address1;
          end if;
    --synthesis translate_on
    end process;

    --read port 0
    process (clk0) begin
        if (clk0'event and clk0 = '1') then
            if (ce0 = '1') then
                q0 <= mem(to_integer(address0_tmp));
            end if;
        end if;
    end process;

    --read port 1
    process (clk1) begin
        if (clk1'event and clk1 = '1') then
            if (ce1 = '1') then
                q1 <= mem(to_integer(address1_tmp));
            end if;
        end if;
    end process;

    gen_write : for i in 0 to BYTES - 1 generate
    begin
        --write port 0
        process (clk0)
        begin
            if (clk0'event and clk0 = '1') then
                if (ce0 = '1' and we0 = '1' and be0(i) = '1') then
                    mem(to_integer(address0_tmp))(8*i+7 downto 8*i) := d0(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

        --write port 1
        process (clk1)
        begin
            if (clk1'event and clk1 = '1') then
                if (ce1 = '1' and we1 = '1' and be1(i) = '1') then
                    mem(to_integer(address1_tmp))(8*i+7 downto 8*i) := d1(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

    end generate;

end architecture behave;


