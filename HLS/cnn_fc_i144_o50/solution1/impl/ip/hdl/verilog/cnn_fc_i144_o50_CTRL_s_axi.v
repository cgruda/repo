// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module cnn_fc_i144_o50_CTRL_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 16,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [8:0]                    weight_0_address0,
    input  wire                          weight_0_ce0,
    output wire [31:0]                   weight_0_q0,
    input  wire [8:0]                    weight_1_address0,
    input  wire                          weight_1_ce0,
    output wire [31:0]                   weight_1_q0,
    input  wire [8:0]                    weight_2_address0,
    input  wire                          weight_2_ce0,
    output wire [31:0]                   weight_2_q0,
    input  wire [8:0]                    weight_3_address0,
    input  wire                          weight_3_ce0,
    output wire [31:0]                   weight_3_q0,
    input  wire [8:0]                    weight_4_address0,
    input  wire                          weight_4_ce0,
    output wire [31:0]                   weight_4_q0,
    input  wire [8:0]                    weight_5_address0,
    input  wire                          weight_5_ce0,
    output wire [31:0]                   weight_5_q0,
    input  wire [8:0]                    weight_6_address0,
    input  wire                          weight_6_ce0,
    output wire [31:0]                   weight_6_q0,
    input  wire [8:0]                    weight_7_address0,
    input  wire                          weight_7_ce0,
    output wire [31:0]                   weight_7_q0,
    input  wire [8:0]                    weight_8_address0,
    input  wire                          weight_8_ce0,
    output wire [31:0]                   weight_8_q0,
    input  wire [8:0]                    weight_9_address0,
    input  wire                          weight_9_ce0,
    output wire [31:0]                   weight_9_q0,
    input  wire [8:0]                    weight_10_address0,
    input  wire                          weight_10_ce0,
    output wire [31:0]                   weight_10_q0,
    input  wire [8:0]                    weight_11_address0,
    input  wire                          weight_11_ce0,
    output wire [31:0]                   weight_11_q0,
    input  wire [8:0]                    weight_12_address0,
    input  wire                          weight_12_ce0,
    output wire [31:0]                   weight_12_q0,
    input  wire [8:0]                    weight_13_address0,
    input  wire                          weight_13_ce0,
    output wire [31:0]                   weight_13_q0,
    input  wire [8:0]                    weight_14_address0,
    input  wire                          weight_14_ce0,
    output wire [31:0]                   weight_14_q0,
    input  wire [8:0]                    weight_15_address0,
    input  wire                          weight_15_ce0,
    output wire [31:0]                   weight_15_q0,
    input  wire [8:0]                    weight_16_address0,
    input  wire                          weight_16_ce0,
    output wire [31:0]                   weight_16_q0,
    input  wire [8:0]                    weight_17_address0,
    input  wire                          weight_17_ce0,
    output wire [31:0]                   weight_17_q0,
    input  wire [8:0]                    weight_18_address0,
    input  wire                          weight_18_ce0,
    output wire [31:0]                   weight_18_q0,
    input  wire [8:0]                    weight_19_address0,
    input  wire                          weight_19_ce0,
    output wire [31:0]                   weight_19_q0,
    input  wire [8:0]                    weight_20_address0,
    input  wire                          weight_20_ce0,
    output wire [31:0]                   weight_20_q0,
    input  wire [8:0]                    weight_21_address0,
    input  wire                          weight_21_ce0,
    output wire [31:0]                   weight_21_q0,
    input  wire [8:0]                    weight_22_address0,
    input  wire                          weight_22_ce0,
    output wire [31:0]                   weight_22_q0,
    input  wire [8:0]                    weight_23_address0,
    input  wire                          weight_23_ce0,
    output wire [31:0]                   weight_23_q0,
    input  wire [8:0]                    weight_24_address0,
    input  wire                          weight_24_ce0,
    output wire [31:0]                   weight_24_q0,
    input  wire [5:0]                    bias_address0,
    input  wire                          bias_ce0,
    output wire [31:0]                   bias_q0,
    output wire [31:0]                   ctrl
);
//------------------------Address Info-------------------
// 0x0000 : Control signals
//          bit 0  - ap_start (Read/Write/COH)
//          bit 1  - ap_done (Read/COR)
//          bit 2  - ap_idle (Read)
//          bit 3  - ap_ready (Read)
//          bit 7  - auto_restart (Read/Write)
//          others - reserved
// 0x0004 : Global Interrupt Enable Register
//          bit 0  - Global Interrupt Enable (Read/Write)
//          others - reserved
// 0x0008 : IP Interrupt Enable Register (Read/Write)
//          bit 0  - Channel 0 (ap_done)
//          bit 1  - Channel 1 (ap_ready)
//          others - reserved
// 0x000c : IP Interrupt Status Register (Read/TOW)
//          bit 0  - Channel 0 (ap_done)
//          bit 1  - Channel 1 (ap_ready)
//          others - reserved
// 0xd100 : Data signal of ctrl
//          bit 31~0 - ctrl[31:0] (Read/Write)
// 0xd104 : reserved
// 0x0800 ~
// 0x0fff : Memory 'weight_0' (288 * 32b)
//          Word n : bit [31:0] - weight_0[n]
// 0x1000 ~
// 0x17ff : Memory 'weight_1' (288 * 32b)
//          Word n : bit [31:0] - weight_1[n]
// 0x1800 ~
// 0x1fff : Memory 'weight_2' (288 * 32b)
//          Word n : bit [31:0] - weight_2[n]
// 0x2000 ~
// 0x27ff : Memory 'weight_3' (288 * 32b)
//          Word n : bit [31:0] - weight_3[n]
// 0x2800 ~
// 0x2fff : Memory 'weight_4' (288 * 32b)
//          Word n : bit [31:0] - weight_4[n]
// 0x3000 ~
// 0x37ff : Memory 'weight_5' (288 * 32b)
//          Word n : bit [31:0] - weight_5[n]
// 0x3800 ~
// 0x3fff : Memory 'weight_6' (288 * 32b)
//          Word n : bit [31:0] - weight_6[n]
// 0x4000 ~
// 0x47ff : Memory 'weight_7' (288 * 32b)
//          Word n : bit [31:0] - weight_7[n]
// 0x4800 ~
// 0x4fff : Memory 'weight_8' (288 * 32b)
//          Word n : bit [31:0] - weight_8[n]
// 0x5000 ~
// 0x57ff : Memory 'weight_9' (288 * 32b)
//          Word n : bit [31:0] - weight_9[n]
// 0x5800 ~
// 0x5fff : Memory 'weight_10' (288 * 32b)
//          Word n : bit [31:0] - weight_10[n]
// 0x6000 ~
// 0x67ff : Memory 'weight_11' (288 * 32b)
//          Word n : bit [31:0] - weight_11[n]
// 0x6800 ~
// 0x6fff : Memory 'weight_12' (288 * 32b)
//          Word n : bit [31:0] - weight_12[n]
// 0x7000 ~
// 0x77ff : Memory 'weight_13' (288 * 32b)
//          Word n : bit [31:0] - weight_13[n]
// 0x7800 ~
// 0x7fff : Memory 'weight_14' (288 * 32b)
//          Word n : bit [31:0] - weight_14[n]
// 0x8000 ~
// 0x87ff : Memory 'weight_15' (288 * 32b)
//          Word n : bit [31:0] - weight_15[n]
// 0x8800 ~
// 0x8fff : Memory 'weight_16' (288 * 32b)
//          Word n : bit [31:0] - weight_16[n]
// 0x9000 ~
// 0x97ff : Memory 'weight_17' (288 * 32b)
//          Word n : bit [31:0] - weight_17[n]
// 0x9800 ~
// 0x9fff : Memory 'weight_18' (288 * 32b)
//          Word n : bit [31:0] - weight_18[n]
// 0xa000 ~
// 0xa7ff : Memory 'weight_19' (288 * 32b)
//          Word n : bit [31:0] - weight_19[n]
// 0xa800 ~
// 0xafff : Memory 'weight_20' (288 * 32b)
//          Word n : bit [31:0] - weight_20[n]
// 0xb000 ~
// 0xb7ff : Memory 'weight_21' (288 * 32b)
//          Word n : bit [31:0] - weight_21[n]
// 0xb800 ~
// 0xbfff : Memory 'weight_22' (288 * 32b)
//          Word n : bit [31:0] - weight_22[n]
// 0xc000 ~
// 0xc7ff : Memory 'weight_23' (288 * 32b)
//          Word n : bit [31:0] - weight_23[n]
// 0xc800 ~
// 0xcfff : Memory 'weight_24' (288 * 32b)
//          Word n : bit [31:0] - weight_24[n]
// 0xd000 ~
// 0xd0ff : Memory 'bias' (50 * 32b)
//          Word n : bit [31:0] - bias[n]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL        = 16'h0000,
    ADDR_GIE            = 16'h0004,
    ADDR_IER            = 16'h0008,
    ADDR_ISR            = 16'h000c,
    ADDR_CTRL_DATA_0    = 16'hd100,
    ADDR_CTRL_CTRL      = 16'hd104,
    ADDR_WEIGHT_0_BASE  = 16'h0800,
    ADDR_WEIGHT_0_HIGH  = 16'h0fff,
    ADDR_WEIGHT_1_BASE  = 16'h1000,
    ADDR_WEIGHT_1_HIGH  = 16'h17ff,
    ADDR_WEIGHT_2_BASE  = 16'h1800,
    ADDR_WEIGHT_2_HIGH  = 16'h1fff,
    ADDR_WEIGHT_3_BASE  = 16'h2000,
    ADDR_WEIGHT_3_HIGH  = 16'h27ff,
    ADDR_WEIGHT_4_BASE  = 16'h2800,
    ADDR_WEIGHT_4_HIGH  = 16'h2fff,
    ADDR_WEIGHT_5_BASE  = 16'h3000,
    ADDR_WEIGHT_5_HIGH  = 16'h37ff,
    ADDR_WEIGHT_6_BASE  = 16'h3800,
    ADDR_WEIGHT_6_HIGH  = 16'h3fff,
    ADDR_WEIGHT_7_BASE  = 16'h4000,
    ADDR_WEIGHT_7_HIGH  = 16'h47ff,
    ADDR_WEIGHT_8_BASE  = 16'h4800,
    ADDR_WEIGHT_8_HIGH  = 16'h4fff,
    ADDR_WEIGHT_9_BASE  = 16'h5000,
    ADDR_WEIGHT_9_HIGH  = 16'h57ff,
    ADDR_WEIGHT_10_BASE = 16'h5800,
    ADDR_WEIGHT_10_HIGH = 16'h5fff,
    ADDR_WEIGHT_11_BASE = 16'h6000,
    ADDR_WEIGHT_11_HIGH = 16'h67ff,
    ADDR_WEIGHT_12_BASE = 16'h6800,
    ADDR_WEIGHT_12_HIGH = 16'h6fff,
    ADDR_WEIGHT_13_BASE = 16'h7000,
    ADDR_WEIGHT_13_HIGH = 16'h77ff,
    ADDR_WEIGHT_14_BASE = 16'h7800,
    ADDR_WEIGHT_14_HIGH = 16'h7fff,
    ADDR_WEIGHT_15_BASE = 16'h8000,
    ADDR_WEIGHT_15_HIGH = 16'h87ff,
    ADDR_WEIGHT_16_BASE = 16'h8800,
    ADDR_WEIGHT_16_HIGH = 16'h8fff,
    ADDR_WEIGHT_17_BASE = 16'h9000,
    ADDR_WEIGHT_17_HIGH = 16'h97ff,
    ADDR_WEIGHT_18_BASE = 16'h9800,
    ADDR_WEIGHT_18_HIGH = 16'h9fff,
    ADDR_WEIGHT_19_BASE = 16'ha000,
    ADDR_WEIGHT_19_HIGH = 16'ha7ff,
    ADDR_WEIGHT_20_BASE = 16'ha800,
    ADDR_WEIGHT_20_HIGH = 16'hafff,
    ADDR_WEIGHT_21_BASE = 16'hb000,
    ADDR_WEIGHT_21_HIGH = 16'hb7ff,
    ADDR_WEIGHT_22_BASE = 16'hb800,
    ADDR_WEIGHT_22_HIGH = 16'hbfff,
    ADDR_WEIGHT_23_BASE = 16'hc000,
    ADDR_WEIGHT_23_HIGH = 16'hc7ff,
    ADDR_WEIGHT_24_BASE = 16'hc800,
    ADDR_WEIGHT_24_HIGH = 16'hcfff,
    ADDR_BIAS_BASE      = 16'hd000,
    ADDR_BIAS_HIGH      = 16'hd0ff,
    WRIDLE              = 2'd0,
    WRDATA              = 2'd1,
    WRRESP              = 2'd2,
    RDIDLE              = 2'd0,
    RDDATA              = 2'd1,
    ADDR_BITS         = 16;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done;
    reg                           int_ap_start;
    reg                           int_auto_restart;
    reg                           int_gie;
    reg  [1:0]                    int_ier;
    reg  [1:0]                    int_isr;
    reg  [31:0]                   int_ctrl;
    // memory signals
    wire [8:0]                    int_weight_0_address0;
    wire                          int_weight_0_ce0;
    wire                          int_weight_0_we0;
    wire [3:0]                    int_weight_0_be0;
    wire [31:0]                   int_weight_0_d0;
    wire [31:0]                   int_weight_0_q0;
    wire [8:0]                    int_weight_0_address1;
    wire                          int_weight_0_ce1;
    wire                          int_weight_0_we1;
    wire [3:0]                    int_weight_0_be1;
    wire [31:0]                   int_weight_0_d1;
    wire [31:0]                   int_weight_0_q1;
    reg                           int_weight_0_read;
    reg                           int_weight_0_write;
    wire [8:0]                    int_weight_1_address0;
    wire                          int_weight_1_ce0;
    wire                          int_weight_1_we0;
    wire [3:0]                    int_weight_1_be0;
    wire [31:0]                   int_weight_1_d0;
    wire [31:0]                   int_weight_1_q0;
    wire [8:0]                    int_weight_1_address1;
    wire                          int_weight_1_ce1;
    wire                          int_weight_1_we1;
    wire [3:0]                    int_weight_1_be1;
    wire [31:0]                   int_weight_1_d1;
    wire [31:0]                   int_weight_1_q1;
    reg                           int_weight_1_read;
    reg                           int_weight_1_write;
    wire [8:0]                    int_weight_2_address0;
    wire                          int_weight_2_ce0;
    wire                          int_weight_2_we0;
    wire [3:0]                    int_weight_2_be0;
    wire [31:0]                   int_weight_2_d0;
    wire [31:0]                   int_weight_2_q0;
    wire [8:0]                    int_weight_2_address1;
    wire                          int_weight_2_ce1;
    wire                          int_weight_2_we1;
    wire [3:0]                    int_weight_2_be1;
    wire [31:0]                   int_weight_2_d1;
    wire [31:0]                   int_weight_2_q1;
    reg                           int_weight_2_read;
    reg                           int_weight_2_write;
    wire [8:0]                    int_weight_3_address0;
    wire                          int_weight_3_ce0;
    wire                          int_weight_3_we0;
    wire [3:0]                    int_weight_3_be0;
    wire [31:0]                   int_weight_3_d0;
    wire [31:0]                   int_weight_3_q0;
    wire [8:0]                    int_weight_3_address1;
    wire                          int_weight_3_ce1;
    wire                          int_weight_3_we1;
    wire [3:0]                    int_weight_3_be1;
    wire [31:0]                   int_weight_3_d1;
    wire [31:0]                   int_weight_3_q1;
    reg                           int_weight_3_read;
    reg                           int_weight_3_write;
    wire [8:0]                    int_weight_4_address0;
    wire                          int_weight_4_ce0;
    wire                          int_weight_4_we0;
    wire [3:0]                    int_weight_4_be0;
    wire [31:0]                   int_weight_4_d0;
    wire [31:0]                   int_weight_4_q0;
    wire [8:0]                    int_weight_4_address1;
    wire                          int_weight_4_ce1;
    wire                          int_weight_4_we1;
    wire [3:0]                    int_weight_4_be1;
    wire [31:0]                   int_weight_4_d1;
    wire [31:0]                   int_weight_4_q1;
    reg                           int_weight_4_read;
    reg                           int_weight_4_write;
    wire [8:0]                    int_weight_5_address0;
    wire                          int_weight_5_ce0;
    wire                          int_weight_5_we0;
    wire [3:0]                    int_weight_5_be0;
    wire [31:0]                   int_weight_5_d0;
    wire [31:0]                   int_weight_5_q0;
    wire [8:0]                    int_weight_5_address1;
    wire                          int_weight_5_ce1;
    wire                          int_weight_5_we1;
    wire [3:0]                    int_weight_5_be1;
    wire [31:0]                   int_weight_5_d1;
    wire [31:0]                   int_weight_5_q1;
    reg                           int_weight_5_read;
    reg                           int_weight_5_write;
    wire [8:0]                    int_weight_6_address0;
    wire                          int_weight_6_ce0;
    wire                          int_weight_6_we0;
    wire [3:0]                    int_weight_6_be0;
    wire [31:0]                   int_weight_6_d0;
    wire [31:0]                   int_weight_6_q0;
    wire [8:0]                    int_weight_6_address1;
    wire                          int_weight_6_ce1;
    wire                          int_weight_6_we1;
    wire [3:0]                    int_weight_6_be1;
    wire [31:0]                   int_weight_6_d1;
    wire [31:0]                   int_weight_6_q1;
    reg                           int_weight_6_read;
    reg                           int_weight_6_write;
    wire [8:0]                    int_weight_7_address0;
    wire                          int_weight_7_ce0;
    wire                          int_weight_7_we0;
    wire [3:0]                    int_weight_7_be0;
    wire [31:0]                   int_weight_7_d0;
    wire [31:0]                   int_weight_7_q0;
    wire [8:0]                    int_weight_7_address1;
    wire                          int_weight_7_ce1;
    wire                          int_weight_7_we1;
    wire [3:0]                    int_weight_7_be1;
    wire [31:0]                   int_weight_7_d1;
    wire [31:0]                   int_weight_7_q1;
    reg                           int_weight_7_read;
    reg                           int_weight_7_write;
    wire [8:0]                    int_weight_8_address0;
    wire                          int_weight_8_ce0;
    wire                          int_weight_8_we0;
    wire [3:0]                    int_weight_8_be0;
    wire [31:0]                   int_weight_8_d0;
    wire [31:0]                   int_weight_8_q0;
    wire [8:0]                    int_weight_8_address1;
    wire                          int_weight_8_ce1;
    wire                          int_weight_8_we1;
    wire [3:0]                    int_weight_8_be1;
    wire [31:0]                   int_weight_8_d1;
    wire [31:0]                   int_weight_8_q1;
    reg                           int_weight_8_read;
    reg                           int_weight_8_write;
    wire [8:0]                    int_weight_9_address0;
    wire                          int_weight_9_ce0;
    wire                          int_weight_9_we0;
    wire [3:0]                    int_weight_9_be0;
    wire [31:0]                   int_weight_9_d0;
    wire [31:0]                   int_weight_9_q0;
    wire [8:0]                    int_weight_9_address1;
    wire                          int_weight_9_ce1;
    wire                          int_weight_9_we1;
    wire [3:0]                    int_weight_9_be1;
    wire [31:0]                   int_weight_9_d1;
    wire [31:0]                   int_weight_9_q1;
    reg                           int_weight_9_read;
    reg                           int_weight_9_write;
    wire [8:0]                    int_weight_10_address0;
    wire                          int_weight_10_ce0;
    wire                          int_weight_10_we0;
    wire [3:0]                    int_weight_10_be0;
    wire [31:0]                   int_weight_10_d0;
    wire [31:0]                   int_weight_10_q0;
    wire [8:0]                    int_weight_10_address1;
    wire                          int_weight_10_ce1;
    wire                          int_weight_10_we1;
    wire [3:0]                    int_weight_10_be1;
    wire [31:0]                   int_weight_10_d1;
    wire [31:0]                   int_weight_10_q1;
    reg                           int_weight_10_read;
    reg                           int_weight_10_write;
    wire [8:0]                    int_weight_11_address0;
    wire                          int_weight_11_ce0;
    wire                          int_weight_11_we0;
    wire [3:0]                    int_weight_11_be0;
    wire [31:0]                   int_weight_11_d0;
    wire [31:0]                   int_weight_11_q0;
    wire [8:0]                    int_weight_11_address1;
    wire                          int_weight_11_ce1;
    wire                          int_weight_11_we1;
    wire [3:0]                    int_weight_11_be1;
    wire [31:0]                   int_weight_11_d1;
    wire [31:0]                   int_weight_11_q1;
    reg                           int_weight_11_read;
    reg                           int_weight_11_write;
    wire [8:0]                    int_weight_12_address0;
    wire                          int_weight_12_ce0;
    wire                          int_weight_12_we0;
    wire [3:0]                    int_weight_12_be0;
    wire [31:0]                   int_weight_12_d0;
    wire [31:0]                   int_weight_12_q0;
    wire [8:0]                    int_weight_12_address1;
    wire                          int_weight_12_ce1;
    wire                          int_weight_12_we1;
    wire [3:0]                    int_weight_12_be1;
    wire [31:0]                   int_weight_12_d1;
    wire [31:0]                   int_weight_12_q1;
    reg                           int_weight_12_read;
    reg                           int_weight_12_write;
    wire [8:0]                    int_weight_13_address0;
    wire                          int_weight_13_ce0;
    wire                          int_weight_13_we0;
    wire [3:0]                    int_weight_13_be0;
    wire [31:0]                   int_weight_13_d0;
    wire [31:0]                   int_weight_13_q0;
    wire [8:0]                    int_weight_13_address1;
    wire                          int_weight_13_ce1;
    wire                          int_weight_13_we1;
    wire [3:0]                    int_weight_13_be1;
    wire [31:0]                   int_weight_13_d1;
    wire [31:0]                   int_weight_13_q1;
    reg                           int_weight_13_read;
    reg                           int_weight_13_write;
    wire [8:0]                    int_weight_14_address0;
    wire                          int_weight_14_ce0;
    wire                          int_weight_14_we0;
    wire [3:0]                    int_weight_14_be0;
    wire [31:0]                   int_weight_14_d0;
    wire [31:0]                   int_weight_14_q0;
    wire [8:0]                    int_weight_14_address1;
    wire                          int_weight_14_ce1;
    wire                          int_weight_14_we1;
    wire [3:0]                    int_weight_14_be1;
    wire [31:0]                   int_weight_14_d1;
    wire [31:0]                   int_weight_14_q1;
    reg                           int_weight_14_read;
    reg                           int_weight_14_write;
    wire [8:0]                    int_weight_15_address0;
    wire                          int_weight_15_ce0;
    wire                          int_weight_15_we0;
    wire [3:0]                    int_weight_15_be0;
    wire [31:0]                   int_weight_15_d0;
    wire [31:0]                   int_weight_15_q0;
    wire [8:0]                    int_weight_15_address1;
    wire                          int_weight_15_ce1;
    wire                          int_weight_15_we1;
    wire [3:0]                    int_weight_15_be1;
    wire [31:0]                   int_weight_15_d1;
    wire [31:0]                   int_weight_15_q1;
    reg                           int_weight_15_read;
    reg                           int_weight_15_write;
    wire [8:0]                    int_weight_16_address0;
    wire                          int_weight_16_ce0;
    wire                          int_weight_16_we0;
    wire [3:0]                    int_weight_16_be0;
    wire [31:0]                   int_weight_16_d0;
    wire [31:0]                   int_weight_16_q0;
    wire [8:0]                    int_weight_16_address1;
    wire                          int_weight_16_ce1;
    wire                          int_weight_16_we1;
    wire [3:0]                    int_weight_16_be1;
    wire [31:0]                   int_weight_16_d1;
    wire [31:0]                   int_weight_16_q1;
    reg                           int_weight_16_read;
    reg                           int_weight_16_write;
    wire [8:0]                    int_weight_17_address0;
    wire                          int_weight_17_ce0;
    wire                          int_weight_17_we0;
    wire [3:0]                    int_weight_17_be0;
    wire [31:0]                   int_weight_17_d0;
    wire [31:0]                   int_weight_17_q0;
    wire [8:0]                    int_weight_17_address1;
    wire                          int_weight_17_ce1;
    wire                          int_weight_17_we1;
    wire [3:0]                    int_weight_17_be1;
    wire [31:0]                   int_weight_17_d1;
    wire [31:0]                   int_weight_17_q1;
    reg                           int_weight_17_read;
    reg                           int_weight_17_write;
    wire [8:0]                    int_weight_18_address0;
    wire                          int_weight_18_ce0;
    wire                          int_weight_18_we0;
    wire [3:0]                    int_weight_18_be0;
    wire [31:0]                   int_weight_18_d0;
    wire [31:0]                   int_weight_18_q0;
    wire [8:0]                    int_weight_18_address1;
    wire                          int_weight_18_ce1;
    wire                          int_weight_18_we1;
    wire [3:0]                    int_weight_18_be1;
    wire [31:0]                   int_weight_18_d1;
    wire [31:0]                   int_weight_18_q1;
    reg                           int_weight_18_read;
    reg                           int_weight_18_write;
    wire [8:0]                    int_weight_19_address0;
    wire                          int_weight_19_ce0;
    wire                          int_weight_19_we0;
    wire [3:0]                    int_weight_19_be0;
    wire [31:0]                   int_weight_19_d0;
    wire [31:0]                   int_weight_19_q0;
    wire [8:0]                    int_weight_19_address1;
    wire                          int_weight_19_ce1;
    wire                          int_weight_19_we1;
    wire [3:0]                    int_weight_19_be1;
    wire [31:0]                   int_weight_19_d1;
    wire [31:0]                   int_weight_19_q1;
    reg                           int_weight_19_read;
    reg                           int_weight_19_write;
    wire [8:0]                    int_weight_20_address0;
    wire                          int_weight_20_ce0;
    wire                          int_weight_20_we0;
    wire [3:0]                    int_weight_20_be0;
    wire [31:0]                   int_weight_20_d0;
    wire [31:0]                   int_weight_20_q0;
    wire [8:0]                    int_weight_20_address1;
    wire                          int_weight_20_ce1;
    wire                          int_weight_20_we1;
    wire [3:0]                    int_weight_20_be1;
    wire [31:0]                   int_weight_20_d1;
    wire [31:0]                   int_weight_20_q1;
    reg                           int_weight_20_read;
    reg                           int_weight_20_write;
    wire [8:0]                    int_weight_21_address0;
    wire                          int_weight_21_ce0;
    wire                          int_weight_21_we0;
    wire [3:0]                    int_weight_21_be0;
    wire [31:0]                   int_weight_21_d0;
    wire [31:0]                   int_weight_21_q0;
    wire [8:0]                    int_weight_21_address1;
    wire                          int_weight_21_ce1;
    wire                          int_weight_21_we1;
    wire [3:0]                    int_weight_21_be1;
    wire [31:0]                   int_weight_21_d1;
    wire [31:0]                   int_weight_21_q1;
    reg                           int_weight_21_read;
    reg                           int_weight_21_write;
    wire [8:0]                    int_weight_22_address0;
    wire                          int_weight_22_ce0;
    wire                          int_weight_22_we0;
    wire [3:0]                    int_weight_22_be0;
    wire [31:0]                   int_weight_22_d0;
    wire [31:0]                   int_weight_22_q0;
    wire [8:0]                    int_weight_22_address1;
    wire                          int_weight_22_ce1;
    wire                          int_weight_22_we1;
    wire [3:0]                    int_weight_22_be1;
    wire [31:0]                   int_weight_22_d1;
    wire [31:0]                   int_weight_22_q1;
    reg                           int_weight_22_read;
    reg                           int_weight_22_write;
    wire [8:0]                    int_weight_23_address0;
    wire                          int_weight_23_ce0;
    wire                          int_weight_23_we0;
    wire [3:0]                    int_weight_23_be0;
    wire [31:0]                   int_weight_23_d0;
    wire [31:0]                   int_weight_23_q0;
    wire [8:0]                    int_weight_23_address1;
    wire                          int_weight_23_ce1;
    wire                          int_weight_23_we1;
    wire [3:0]                    int_weight_23_be1;
    wire [31:0]                   int_weight_23_d1;
    wire [31:0]                   int_weight_23_q1;
    reg                           int_weight_23_read;
    reg                           int_weight_23_write;
    wire [8:0]                    int_weight_24_address0;
    wire                          int_weight_24_ce0;
    wire                          int_weight_24_we0;
    wire [3:0]                    int_weight_24_be0;
    wire [31:0]                   int_weight_24_d0;
    wire [31:0]                   int_weight_24_q0;
    wire [8:0]                    int_weight_24_address1;
    wire                          int_weight_24_ce1;
    wire                          int_weight_24_we1;
    wire [3:0]                    int_weight_24_be1;
    wire [31:0]                   int_weight_24_d1;
    wire [31:0]                   int_weight_24_q1;
    reg                           int_weight_24_read;
    reg                           int_weight_24_write;
    wire [5:0]                    int_bias_address0;
    wire                          int_bias_ce0;
    wire                          int_bias_we0;
    wire [3:0]                    int_bias_be0;
    wire [31:0]                   int_bias_d0;
    wire [31:0]                   int_bias_q0;
    wire [5:0]                    int_bias_address1;
    wire                          int_bias_ce1;
    wire                          int_bias_we1;
    wire [3:0]                    int_bias_be1;
    wire [31:0]                   int_bias_d1;
    wire [31:0]                   int_bias_q1;
    reg                           int_bias_read;
    reg                           int_bias_write;

//------------------------Instantiation------------------
// int_weight_0
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_0 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_0_address0 ),
    .ce0      ( int_weight_0_ce0 ),
    .we0      ( int_weight_0_we0 ),
    .be0      ( int_weight_0_be0 ),
    .d0       ( int_weight_0_d0 ),
    .q0       ( int_weight_0_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_0_address1 ),
    .ce1      ( int_weight_0_ce1 ),
    .we1      ( int_weight_0_we1 ),
    .be1      ( int_weight_0_be1 ),
    .d1       ( int_weight_0_d1 ),
    .q1       ( int_weight_0_q1 )
);
// int_weight_1
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_1 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_1_address0 ),
    .ce0      ( int_weight_1_ce0 ),
    .we0      ( int_weight_1_we0 ),
    .be0      ( int_weight_1_be0 ),
    .d0       ( int_weight_1_d0 ),
    .q0       ( int_weight_1_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_1_address1 ),
    .ce1      ( int_weight_1_ce1 ),
    .we1      ( int_weight_1_we1 ),
    .be1      ( int_weight_1_be1 ),
    .d1       ( int_weight_1_d1 ),
    .q1       ( int_weight_1_q1 )
);
// int_weight_2
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_2 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_2_address0 ),
    .ce0      ( int_weight_2_ce0 ),
    .we0      ( int_weight_2_we0 ),
    .be0      ( int_weight_2_be0 ),
    .d0       ( int_weight_2_d0 ),
    .q0       ( int_weight_2_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_2_address1 ),
    .ce1      ( int_weight_2_ce1 ),
    .we1      ( int_weight_2_we1 ),
    .be1      ( int_weight_2_be1 ),
    .d1       ( int_weight_2_d1 ),
    .q1       ( int_weight_2_q1 )
);
// int_weight_3
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_3 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_3_address0 ),
    .ce0      ( int_weight_3_ce0 ),
    .we0      ( int_weight_3_we0 ),
    .be0      ( int_weight_3_be0 ),
    .d0       ( int_weight_3_d0 ),
    .q0       ( int_weight_3_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_3_address1 ),
    .ce1      ( int_weight_3_ce1 ),
    .we1      ( int_weight_3_we1 ),
    .be1      ( int_weight_3_be1 ),
    .d1       ( int_weight_3_d1 ),
    .q1       ( int_weight_3_q1 )
);
// int_weight_4
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_4 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_4_address0 ),
    .ce0      ( int_weight_4_ce0 ),
    .we0      ( int_weight_4_we0 ),
    .be0      ( int_weight_4_be0 ),
    .d0       ( int_weight_4_d0 ),
    .q0       ( int_weight_4_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_4_address1 ),
    .ce1      ( int_weight_4_ce1 ),
    .we1      ( int_weight_4_we1 ),
    .be1      ( int_weight_4_be1 ),
    .d1       ( int_weight_4_d1 ),
    .q1       ( int_weight_4_q1 )
);
// int_weight_5
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_5 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_5_address0 ),
    .ce0      ( int_weight_5_ce0 ),
    .we0      ( int_weight_5_we0 ),
    .be0      ( int_weight_5_be0 ),
    .d0       ( int_weight_5_d0 ),
    .q0       ( int_weight_5_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_5_address1 ),
    .ce1      ( int_weight_5_ce1 ),
    .we1      ( int_weight_5_we1 ),
    .be1      ( int_weight_5_be1 ),
    .d1       ( int_weight_5_d1 ),
    .q1       ( int_weight_5_q1 )
);
// int_weight_6
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_6 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_6_address0 ),
    .ce0      ( int_weight_6_ce0 ),
    .we0      ( int_weight_6_we0 ),
    .be0      ( int_weight_6_be0 ),
    .d0       ( int_weight_6_d0 ),
    .q0       ( int_weight_6_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_6_address1 ),
    .ce1      ( int_weight_6_ce1 ),
    .we1      ( int_weight_6_we1 ),
    .be1      ( int_weight_6_be1 ),
    .d1       ( int_weight_6_d1 ),
    .q1       ( int_weight_6_q1 )
);
// int_weight_7
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_7 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_7_address0 ),
    .ce0      ( int_weight_7_ce0 ),
    .we0      ( int_weight_7_we0 ),
    .be0      ( int_weight_7_be0 ),
    .d0       ( int_weight_7_d0 ),
    .q0       ( int_weight_7_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_7_address1 ),
    .ce1      ( int_weight_7_ce1 ),
    .we1      ( int_weight_7_we1 ),
    .be1      ( int_weight_7_be1 ),
    .d1       ( int_weight_7_d1 ),
    .q1       ( int_weight_7_q1 )
);
// int_weight_8
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_8 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_8_address0 ),
    .ce0      ( int_weight_8_ce0 ),
    .we0      ( int_weight_8_we0 ),
    .be0      ( int_weight_8_be0 ),
    .d0       ( int_weight_8_d0 ),
    .q0       ( int_weight_8_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_8_address1 ),
    .ce1      ( int_weight_8_ce1 ),
    .we1      ( int_weight_8_we1 ),
    .be1      ( int_weight_8_be1 ),
    .d1       ( int_weight_8_d1 ),
    .q1       ( int_weight_8_q1 )
);
// int_weight_9
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_9 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_9_address0 ),
    .ce0      ( int_weight_9_ce0 ),
    .we0      ( int_weight_9_we0 ),
    .be0      ( int_weight_9_be0 ),
    .d0       ( int_weight_9_d0 ),
    .q0       ( int_weight_9_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_9_address1 ),
    .ce1      ( int_weight_9_ce1 ),
    .we1      ( int_weight_9_we1 ),
    .be1      ( int_weight_9_be1 ),
    .d1       ( int_weight_9_d1 ),
    .q1       ( int_weight_9_q1 )
);
// int_weight_10
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_10 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_10_address0 ),
    .ce0      ( int_weight_10_ce0 ),
    .we0      ( int_weight_10_we0 ),
    .be0      ( int_weight_10_be0 ),
    .d0       ( int_weight_10_d0 ),
    .q0       ( int_weight_10_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_10_address1 ),
    .ce1      ( int_weight_10_ce1 ),
    .we1      ( int_weight_10_we1 ),
    .be1      ( int_weight_10_be1 ),
    .d1       ( int_weight_10_d1 ),
    .q1       ( int_weight_10_q1 )
);
// int_weight_11
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_11 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_11_address0 ),
    .ce0      ( int_weight_11_ce0 ),
    .we0      ( int_weight_11_we0 ),
    .be0      ( int_weight_11_be0 ),
    .d0       ( int_weight_11_d0 ),
    .q0       ( int_weight_11_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_11_address1 ),
    .ce1      ( int_weight_11_ce1 ),
    .we1      ( int_weight_11_we1 ),
    .be1      ( int_weight_11_be1 ),
    .d1       ( int_weight_11_d1 ),
    .q1       ( int_weight_11_q1 )
);
// int_weight_12
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_12 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_12_address0 ),
    .ce0      ( int_weight_12_ce0 ),
    .we0      ( int_weight_12_we0 ),
    .be0      ( int_weight_12_be0 ),
    .d0       ( int_weight_12_d0 ),
    .q0       ( int_weight_12_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_12_address1 ),
    .ce1      ( int_weight_12_ce1 ),
    .we1      ( int_weight_12_we1 ),
    .be1      ( int_weight_12_be1 ),
    .d1       ( int_weight_12_d1 ),
    .q1       ( int_weight_12_q1 )
);
// int_weight_13
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_13 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_13_address0 ),
    .ce0      ( int_weight_13_ce0 ),
    .we0      ( int_weight_13_we0 ),
    .be0      ( int_weight_13_be0 ),
    .d0       ( int_weight_13_d0 ),
    .q0       ( int_weight_13_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_13_address1 ),
    .ce1      ( int_weight_13_ce1 ),
    .we1      ( int_weight_13_we1 ),
    .be1      ( int_weight_13_be1 ),
    .d1       ( int_weight_13_d1 ),
    .q1       ( int_weight_13_q1 )
);
// int_weight_14
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_14 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_14_address0 ),
    .ce0      ( int_weight_14_ce0 ),
    .we0      ( int_weight_14_we0 ),
    .be0      ( int_weight_14_be0 ),
    .d0       ( int_weight_14_d0 ),
    .q0       ( int_weight_14_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_14_address1 ),
    .ce1      ( int_weight_14_ce1 ),
    .we1      ( int_weight_14_we1 ),
    .be1      ( int_weight_14_be1 ),
    .d1       ( int_weight_14_d1 ),
    .q1       ( int_weight_14_q1 )
);
// int_weight_15
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_15 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_15_address0 ),
    .ce0      ( int_weight_15_ce0 ),
    .we0      ( int_weight_15_we0 ),
    .be0      ( int_weight_15_be0 ),
    .d0       ( int_weight_15_d0 ),
    .q0       ( int_weight_15_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_15_address1 ),
    .ce1      ( int_weight_15_ce1 ),
    .we1      ( int_weight_15_we1 ),
    .be1      ( int_weight_15_be1 ),
    .d1       ( int_weight_15_d1 ),
    .q1       ( int_weight_15_q1 )
);
// int_weight_16
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_16 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_16_address0 ),
    .ce0      ( int_weight_16_ce0 ),
    .we0      ( int_weight_16_we0 ),
    .be0      ( int_weight_16_be0 ),
    .d0       ( int_weight_16_d0 ),
    .q0       ( int_weight_16_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_16_address1 ),
    .ce1      ( int_weight_16_ce1 ),
    .we1      ( int_weight_16_we1 ),
    .be1      ( int_weight_16_be1 ),
    .d1       ( int_weight_16_d1 ),
    .q1       ( int_weight_16_q1 )
);
// int_weight_17
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_17 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_17_address0 ),
    .ce0      ( int_weight_17_ce0 ),
    .we0      ( int_weight_17_we0 ),
    .be0      ( int_weight_17_be0 ),
    .d0       ( int_weight_17_d0 ),
    .q0       ( int_weight_17_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_17_address1 ),
    .ce1      ( int_weight_17_ce1 ),
    .we1      ( int_weight_17_we1 ),
    .be1      ( int_weight_17_be1 ),
    .d1       ( int_weight_17_d1 ),
    .q1       ( int_weight_17_q1 )
);
// int_weight_18
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_18 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_18_address0 ),
    .ce0      ( int_weight_18_ce0 ),
    .we0      ( int_weight_18_we0 ),
    .be0      ( int_weight_18_be0 ),
    .d0       ( int_weight_18_d0 ),
    .q0       ( int_weight_18_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_18_address1 ),
    .ce1      ( int_weight_18_ce1 ),
    .we1      ( int_weight_18_we1 ),
    .be1      ( int_weight_18_be1 ),
    .d1       ( int_weight_18_d1 ),
    .q1       ( int_weight_18_q1 )
);
// int_weight_19
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_19 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_19_address0 ),
    .ce0      ( int_weight_19_ce0 ),
    .we0      ( int_weight_19_we0 ),
    .be0      ( int_weight_19_be0 ),
    .d0       ( int_weight_19_d0 ),
    .q0       ( int_weight_19_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_19_address1 ),
    .ce1      ( int_weight_19_ce1 ),
    .we1      ( int_weight_19_we1 ),
    .be1      ( int_weight_19_be1 ),
    .d1       ( int_weight_19_d1 ),
    .q1       ( int_weight_19_q1 )
);
// int_weight_20
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_20 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_20_address0 ),
    .ce0      ( int_weight_20_ce0 ),
    .we0      ( int_weight_20_we0 ),
    .be0      ( int_weight_20_be0 ),
    .d0       ( int_weight_20_d0 ),
    .q0       ( int_weight_20_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_20_address1 ),
    .ce1      ( int_weight_20_ce1 ),
    .we1      ( int_weight_20_we1 ),
    .be1      ( int_weight_20_be1 ),
    .d1       ( int_weight_20_d1 ),
    .q1       ( int_weight_20_q1 )
);
// int_weight_21
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_21 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_21_address0 ),
    .ce0      ( int_weight_21_ce0 ),
    .we0      ( int_weight_21_we0 ),
    .be0      ( int_weight_21_be0 ),
    .d0       ( int_weight_21_d0 ),
    .q0       ( int_weight_21_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_21_address1 ),
    .ce1      ( int_weight_21_ce1 ),
    .we1      ( int_weight_21_we1 ),
    .be1      ( int_weight_21_be1 ),
    .d1       ( int_weight_21_d1 ),
    .q1       ( int_weight_21_q1 )
);
// int_weight_22
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_22 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_22_address0 ),
    .ce0      ( int_weight_22_ce0 ),
    .we0      ( int_weight_22_we0 ),
    .be0      ( int_weight_22_be0 ),
    .d0       ( int_weight_22_d0 ),
    .q0       ( int_weight_22_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_22_address1 ),
    .ce1      ( int_weight_22_ce1 ),
    .we1      ( int_weight_22_we1 ),
    .be1      ( int_weight_22_be1 ),
    .d1       ( int_weight_22_d1 ),
    .q1       ( int_weight_22_q1 )
);
// int_weight_23
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_23 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_23_address0 ),
    .ce0      ( int_weight_23_ce0 ),
    .we0      ( int_weight_23_we0 ),
    .be0      ( int_weight_23_be0 ),
    .d0       ( int_weight_23_d0 ),
    .q0       ( int_weight_23_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_23_address1 ),
    .ce1      ( int_weight_23_ce1 ),
    .we1      ( int_weight_23_we1 ),
    .be1      ( int_weight_23_be1 ),
    .d1       ( int_weight_23_d1 ),
    .q1       ( int_weight_23_q1 )
);
// int_weight_24
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 288 )
) int_weight_24 (
    .clk0     ( ACLK ),
    .address0 ( int_weight_24_address0 ),
    .ce0      ( int_weight_24_ce0 ),
    .we0      ( int_weight_24_we0 ),
    .be0      ( int_weight_24_be0 ),
    .d0       ( int_weight_24_d0 ),
    .q0       ( int_weight_24_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_weight_24_address1 ),
    .ce1      ( int_weight_24_ce1 ),
    .we1      ( int_weight_24_we1 ),
    .be1      ( int_weight_24_be1 ),
    .d1       ( int_weight_24_d1 ),
    .q1       ( int_weight_24_q1 )
);
// int_bias
cnn_fc_i144_o50_CTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 50 )
) int_bias (
    .clk0     ( ACLK ),
    .address0 ( int_bias_address0 ),
    .ce0      ( int_bias_ce0 ),
    .we0      ( int_bias_we0 ),
    .be0      ( int_bias_be0 ),
    .d0       ( int_bias_d0 ),
    .q0       ( int_bias_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_bias_address1 ),
    .ce1      ( int_bias_ce1 ),
    .we1      ( int_bias_we1 ),
    .be1      ( int_bias_be1 ),
    .d1       ( int_bias_d1 ),
    .q1       ( int_bias_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (~ARESET) & (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRIDLE;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (~ARESET) && (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_weight_0_read & !int_weight_1_read & !int_weight_2_read & !int_weight_3_read & !int_weight_4_read & !int_weight_5_read & !int_weight_6_read & !int_weight_7_read & !int_weight_8_read & !int_weight_9_read & !int_weight_10_read & !int_weight_11_read & !int_weight_12_read & !int_weight_13_read & !int_weight_14_read & !int_weight_15_read & !int_weight_16_read & !int_weight_17_read & !int_weight_18_read & !int_weight_19_read & !int_weight_20_read & !int_weight_21_read & !int_weight_22_read & !int_weight_23_read & !int_weight_24_read & !int_bias_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDIDLE;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_CTRL_DATA_0: begin
                    rdata <= int_ctrl[31:0];
                end
            endcase
        end
        else if (int_weight_0_read) begin
            rdata <= int_weight_0_q1;
        end
        else if (int_weight_1_read) begin
            rdata <= int_weight_1_q1;
        end
        else if (int_weight_2_read) begin
            rdata <= int_weight_2_q1;
        end
        else if (int_weight_3_read) begin
            rdata <= int_weight_3_q1;
        end
        else if (int_weight_4_read) begin
            rdata <= int_weight_4_q1;
        end
        else if (int_weight_5_read) begin
            rdata <= int_weight_5_q1;
        end
        else if (int_weight_6_read) begin
            rdata <= int_weight_6_q1;
        end
        else if (int_weight_7_read) begin
            rdata <= int_weight_7_q1;
        end
        else if (int_weight_8_read) begin
            rdata <= int_weight_8_q1;
        end
        else if (int_weight_9_read) begin
            rdata <= int_weight_9_q1;
        end
        else if (int_weight_10_read) begin
            rdata <= int_weight_10_q1;
        end
        else if (int_weight_11_read) begin
            rdata <= int_weight_11_q1;
        end
        else if (int_weight_12_read) begin
            rdata <= int_weight_12_q1;
        end
        else if (int_weight_13_read) begin
            rdata <= int_weight_13_q1;
        end
        else if (int_weight_14_read) begin
            rdata <= int_weight_14_q1;
        end
        else if (int_weight_15_read) begin
            rdata <= int_weight_15_q1;
        end
        else if (int_weight_16_read) begin
            rdata <= int_weight_16_q1;
        end
        else if (int_weight_17_read) begin
            rdata <= int_weight_17_q1;
        end
        else if (int_weight_18_read) begin
            rdata <= int_weight_18_q1;
        end
        else if (int_weight_19_read) begin
            rdata <= int_weight_19_q1;
        end
        else if (int_weight_20_read) begin
            rdata <= int_weight_20_q1;
        end
        else if (int_weight_21_read) begin
            rdata <= int_weight_21_q1;
        end
        else if (int_weight_22_read) begin
            rdata <= int_weight_22_q1;
        end
        else if (int_weight_23_read) begin
            rdata <= int_weight_23_q1;
        end
        else if (int_weight_24_read) begin
            rdata <= int_weight_24_q1;
        end
        else if (int_bias_read) begin
            rdata <= int_bias_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt    = int_gie & (|int_isr);
assign ap_start     = int_ap_start;
assign int_ap_idle  = ap_idle;
assign int_ap_ready = ap_ready;
assign ctrl         = int_ctrl;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_ctrl[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_ctrl[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CTRL_DATA_0)
            int_ctrl[31:0] <= (WDATA[31:0] & wmask) | (int_ctrl[31:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------
// weight_0
assign int_weight_0_address0  = weight_0_address0;
assign int_weight_0_ce0       = weight_0_ce0;
assign int_weight_0_we0       = 1'b0;
assign int_weight_0_be0       = 1'b0;
assign int_weight_0_d0        = 1'b0;
assign weight_0_q0            = int_weight_0_q0;
assign int_weight_0_address1  = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_0_ce1       = ar_hs | (int_weight_0_write & WVALID);
assign int_weight_0_we1       = int_weight_0_write & WVALID;
assign int_weight_0_be1       = WSTRB;
assign int_weight_0_d1        = WDATA;
// weight_1
assign int_weight_1_address0  = weight_1_address0;
assign int_weight_1_ce0       = weight_1_ce0;
assign int_weight_1_we0       = 1'b0;
assign int_weight_1_be0       = 1'b0;
assign int_weight_1_d0        = 1'b0;
assign weight_1_q0            = int_weight_1_q0;
assign int_weight_1_address1  = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_1_ce1       = ar_hs | (int_weight_1_write & WVALID);
assign int_weight_1_we1       = int_weight_1_write & WVALID;
assign int_weight_1_be1       = WSTRB;
assign int_weight_1_d1        = WDATA;
// weight_2
assign int_weight_2_address0  = weight_2_address0;
assign int_weight_2_ce0       = weight_2_ce0;
assign int_weight_2_we0       = 1'b0;
assign int_weight_2_be0       = 1'b0;
assign int_weight_2_d0        = 1'b0;
assign weight_2_q0            = int_weight_2_q0;
assign int_weight_2_address1  = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_2_ce1       = ar_hs | (int_weight_2_write & WVALID);
assign int_weight_2_we1       = int_weight_2_write & WVALID;
assign int_weight_2_be1       = WSTRB;
assign int_weight_2_d1        = WDATA;
// weight_3
assign int_weight_3_address0  = weight_3_address0;
assign int_weight_3_ce0       = weight_3_ce0;
assign int_weight_3_we0       = 1'b0;
assign int_weight_3_be0       = 1'b0;
assign int_weight_3_d0        = 1'b0;
assign weight_3_q0            = int_weight_3_q0;
assign int_weight_3_address1  = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_3_ce1       = ar_hs | (int_weight_3_write & WVALID);
assign int_weight_3_we1       = int_weight_3_write & WVALID;
assign int_weight_3_be1       = WSTRB;
assign int_weight_3_d1        = WDATA;
// weight_4
assign int_weight_4_address0  = weight_4_address0;
assign int_weight_4_ce0       = weight_4_ce0;
assign int_weight_4_we0       = 1'b0;
assign int_weight_4_be0       = 1'b0;
assign int_weight_4_d0        = 1'b0;
assign weight_4_q0            = int_weight_4_q0;
assign int_weight_4_address1  = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_4_ce1       = ar_hs | (int_weight_4_write & WVALID);
assign int_weight_4_we1       = int_weight_4_write & WVALID;
assign int_weight_4_be1       = WSTRB;
assign int_weight_4_d1        = WDATA;
// weight_5
assign int_weight_5_address0  = weight_5_address0;
assign int_weight_5_ce0       = weight_5_ce0;
assign int_weight_5_we0       = 1'b0;
assign int_weight_5_be0       = 1'b0;
assign int_weight_5_d0        = 1'b0;
assign weight_5_q0            = int_weight_5_q0;
assign int_weight_5_address1  = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_5_ce1       = ar_hs | (int_weight_5_write & WVALID);
assign int_weight_5_we1       = int_weight_5_write & WVALID;
assign int_weight_5_be1       = WSTRB;
assign int_weight_5_d1        = WDATA;
// weight_6
assign int_weight_6_address0  = weight_6_address0;
assign int_weight_6_ce0       = weight_6_ce0;
assign int_weight_6_we0       = 1'b0;
assign int_weight_6_be0       = 1'b0;
assign int_weight_6_d0        = 1'b0;
assign weight_6_q0            = int_weight_6_q0;
assign int_weight_6_address1  = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_6_ce1       = ar_hs | (int_weight_6_write & WVALID);
assign int_weight_6_we1       = int_weight_6_write & WVALID;
assign int_weight_6_be1       = WSTRB;
assign int_weight_6_d1        = WDATA;
// weight_7
assign int_weight_7_address0  = weight_7_address0;
assign int_weight_7_ce0       = weight_7_ce0;
assign int_weight_7_we0       = 1'b0;
assign int_weight_7_be0       = 1'b0;
assign int_weight_7_d0        = 1'b0;
assign weight_7_q0            = int_weight_7_q0;
assign int_weight_7_address1  = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_7_ce1       = ar_hs | (int_weight_7_write & WVALID);
assign int_weight_7_we1       = int_weight_7_write & WVALID;
assign int_weight_7_be1       = WSTRB;
assign int_weight_7_d1        = WDATA;
// weight_8
assign int_weight_8_address0  = weight_8_address0;
assign int_weight_8_ce0       = weight_8_ce0;
assign int_weight_8_we0       = 1'b0;
assign int_weight_8_be0       = 1'b0;
assign int_weight_8_d0        = 1'b0;
assign weight_8_q0            = int_weight_8_q0;
assign int_weight_8_address1  = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_8_ce1       = ar_hs | (int_weight_8_write & WVALID);
assign int_weight_8_we1       = int_weight_8_write & WVALID;
assign int_weight_8_be1       = WSTRB;
assign int_weight_8_d1        = WDATA;
// weight_9
assign int_weight_9_address0  = weight_9_address0;
assign int_weight_9_ce0       = weight_9_ce0;
assign int_weight_9_we0       = 1'b0;
assign int_weight_9_be0       = 1'b0;
assign int_weight_9_d0        = 1'b0;
assign weight_9_q0            = int_weight_9_q0;
assign int_weight_9_address1  = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_9_ce1       = ar_hs | (int_weight_9_write & WVALID);
assign int_weight_9_we1       = int_weight_9_write & WVALID;
assign int_weight_9_be1       = WSTRB;
assign int_weight_9_d1        = WDATA;
// weight_10
assign int_weight_10_address0 = weight_10_address0;
assign int_weight_10_ce0      = weight_10_ce0;
assign int_weight_10_we0      = 1'b0;
assign int_weight_10_be0      = 1'b0;
assign int_weight_10_d0       = 1'b0;
assign weight_10_q0           = int_weight_10_q0;
assign int_weight_10_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_10_ce1      = ar_hs | (int_weight_10_write & WVALID);
assign int_weight_10_we1      = int_weight_10_write & WVALID;
assign int_weight_10_be1      = WSTRB;
assign int_weight_10_d1       = WDATA;
// weight_11
assign int_weight_11_address0 = weight_11_address0;
assign int_weight_11_ce0      = weight_11_ce0;
assign int_weight_11_we0      = 1'b0;
assign int_weight_11_be0      = 1'b0;
assign int_weight_11_d0       = 1'b0;
assign weight_11_q0           = int_weight_11_q0;
assign int_weight_11_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_11_ce1      = ar_hs | (int_weight_11_write & WVALID);
assign int_weight_11_we1      = int_weight_11_write & WVALID;
assign int_weight_11_be1      = WSTRB;
assign int_weight_11_d1       = WDATA;
// weight_12
assign int_weight_12_address0 = weight_12_address0;
assign int_weight_12_ce0      = weight_12_ce0;
assign int_weight_12_we0      = 1'b0;
assign int_weight_12_be0      = 1'b0;
assign int_weight_12_d0       = 1'b0;
assign weight_12_q0           = int_weight_12_q0;
assign int_weight_12_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_12_ce1      = ar_hs | (int_weight_12_write & WVALID);
assign int_weight_12_we1      = int_weight_12_write & WVALID;
assign int_weight_12_be1      = WSTRB;
assign int_weight_12_d1       = WDATA;
// weight_13
assign int_weight_13_address0 = weight_13_address0;
assign int_weight_13_ce0      = weight_13_ce0;
assign int_weight_13_we0      = 1'b0;
assign int_weight_13_be0      = 1'b0;
assign int_weight_13_d0       = 1'b0;
assign weight_13_q0           = int_weight_13_q0;
assign int_weight_13_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_13_ce1      = ar_hs | (int_weight_13_write & WVALID);
assign int_weight_13_we1      = int_weight_13_write & WVALID;
assign int_weight_13_be1      = WSTRB;
assign int_weight_13_d1       = WDATA;
// weight_14
assign int_weight_14_address0 = weight_14_address0;
assign int_weight_14_ce0      = weight_14_ce0;
assign int_weight_14_we0      = 1'b0;
assign int_weight_14_be0      = 1'b0;
assign int_weight_14_d0       = 1'b0;
assign weight_14_q0           = int_weight_14_q0;
assign int_weight_14_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_14_ce1      = ar_hs | (int_weight_14_write & WVALID);
assign int_weight_14_we1      = int_weight_14_write & WVALID;
assign int_weight_14_be1      = WSTRB;
assign int_weight_14_d1       = WDATA;
// weight_15
assign int_weight_15_address0 = weight_15_address0;
assign int_weight_15_ce0      = weight_15_ce0;
assign int_weight_15_we0      = 1'b0;
assign int_weight_15_be0      = 1'b0;
assign int_weight_15_d0       = 1'b0;
assign weight_15_q0           = int_weight_15_q0;
assign int_weight_15_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_15_ce1      = ar_hs | (int_weight_15_write & WVALID);
assign int_weight_15_we1      = int_weight_15_write & WVALID;
assign int_weight_15_be1      = WSTRB;
assign int_weight_15_d1       = WDATA;
// weight_16
assign int_weight_16_address0 = weight_16_address0;
assign int_weight_16_ce0      = weight_16_ce0;
assign int_weight_16_we0      = 1'b0;
assign int_weight_16_be0      = 1'b0;
assign int_weight_16_d0       = 1'b0;
assign weight_16_q0           = int_weight_16_q0;
assign int_weight_16_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_16_ce1      = ar_hs | (int_weight_16_write & WVALID);
assign int_weight_16_we1      = int_weight_16_write & WVALID;
assign int_weight_16_be1      = WSTRB;
assign int_weight_16_d1       = WDATA;
// weight_17
assign int_weight_17_address0 = weight_17_address0;
assign int_weight_17_ce0      = weight_17_ce0;
assign int_weight_17_we0      = 1'b0;
assign int_weight_17_be0      = 1'b0;
assign int_weight_17_d0       = 1'b0;
assign weight_17_q0           = int_weight_17_q0;
assign int_weight_17_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_17_ce1      = ar_hs | (int_weight_17_write & WVALID);
assign int_weight_17_we1      = int_weight_17_write & WVALID;
assign int_weight_17_be1      = WSTRB;
assign int_weight_17_d1       = WDATA;
// weight_18
assign int_weight_18_address0 = weight_18_address0;
assign int_weight_18_ce0      = weight_18_ce0;
assign int_weight_18_we0      = 1'b0;
assign int_weight_18_be0      = 1'b0;
assign int_weight_18_d0       = 1'b0;
assign weight_18_q0           = int_weight_18_q0;
assign int_weight_18_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_18_ce1      = ar_hs | (int_weight_18_write & WVALID);
assign int_weight_18_we1      = int_weight_18_write & WVALID;
assign int_weight_18_be1      = WSTRB;
assign int_weight_18_d1       = WDATA;
// weight_19
assign int_weight_19_address0 = weight_19_address0;
assign int_weight_19_ce0      = weight_19_ce0;
assign int_weight_19_we0      = 1'b0;
assign int_weight_19_be0      = 1'b0;
assign int_weight_19_d0       = 1'b0;
assign weight_19_q0           = int_weight_19_q0;
assign int_weight_19_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_19_ce1      = ar_hs | (int_weight_19_write & WVALID);
assign int_weight_19_we1      = int_weight_19_write & WVALID;
assign int_weight_19_be1      = WSTRB;
assign int_weight_19_d1       = WDATA;
// weight_20
assign int_weight_20_address0 = weight_20_address0;
assign int_weight_20_ce0      = weight_20_ce0;
assign int_weight_20_we0      = 1'b0;
assign int_weight_20_be0      = 1'b0;
assign int_weight_20_d0       = 1'b0;
assign weight_20_q0           = int_weight_20_q0;
assign int_weight_20_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_20_ce1      = ar_hs | (int_weight_20_write & WVALID);
assign int_weight_20_we1      = int_weight_20_write & WVALID;
assign int_weight_20_be1      = WSTRB;
assign int_weight_20_d1       = WDATA;
// weight_21
assign int_weight_21_address0 = weight_21_address0;
assign int_weight_21_ce0      = weight_21_ce0;
assign int_weight_21_we0      = 1'b0;
assign int_weight_21_be0      = 1'b0;
assign int_weight_21_d0       = 1'b0;
assign weight_21_q0           = int_weight_21_q0;
assign int_weight_21_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_21_ce1      = ar_hs | (int_weight_21_write & WVALID);
assign int_weight_21_we1      = int_weight_21_write & WVALID;
assign int_weight_21_be1      = WSTRB;
assign int_weight_21_d1       = WDATA;
// weight_22
assign int_weight_22_address0 = weight_22_address0;
assign int_weight_22_ce0      = weight_22_ce0;
assign int_weight_22_we0      = 1'b0;
assign int_weight_22_be0      = 1'b0;
assign int_weight_22_d0       = 1'b0;
assign weight_22_q0           = int_weight_22_q0;
assign int_weight_22_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_22_ce1      = ar_hs | (int_weight_22_write & WVALID);
assign int_weight_22_we1      = int_weight_22_write & WVALID;
assign int_weight_22_be1      = WSTRB;
assign int_weight_22_d1       = WDATA;
// weight_23
assign int_weight_23_address0 = weight_23_address0;
assign int_weight_23_ce0      = weight_23_ce0;
assign int_weight_23_we0      = 1'b0;
assign int_weight_23_be0      = 1'b0;
assign int_weight_23_d0       = 1'b0;
assign weight_23_q0           = int_weight_23_q0;
assign int_weight_23_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_23_ce1      = ar_hs | (int_weight_23_write & WVALID);
assign int_weight_23_we1      = int_weight_23_write & WVALID;
assign int_weight_23_be1      = WSTRB;
assign int_weight_23_d1       = WDATA;
// weight_24
assign int_weight_24_address0 = weight_24_address0;
assign int_weight_24_ce0      = weight_24_ce0;
assign int_weight_24_we0      = 1'b0;
assign int_weight_24_be0      = 1'b0;
assign int_weight_24_d0       = 1'b0;
assign weight_24_q0           = int_weight_24_q0;
assign int_weight_24_address1 = ar_hs? raddr[10:2] : waddr[10:2];
assign int_weight_24_ce1      = ar_hs | (int_weight_24_write & WVALID);
assign int_weight_24_we1      = int_weight_24_write & WVALID;
assign int_weight_24_be1      = WSTRB;
assign int_weight_24_d1       = WDATA;
// bias
assign int_bias_address0      = bias_address0;
assign int_bias_ce0           = bias_ce0;
assign int_bias_we0           = 1'b0;
assign int_bias_be0           = 1'b0;
assign int_bias_d0            = 1'b0;
assign bias_q0                = int_bias_q0;
assign int_bias_address1      = ar_hs? raddr[7:2] : waddr[7:2];
assign int_bias_ce1           = ar_hs | (int_bias_write & WVALID);
assign int_bias_we1           = int_bias_write & WVALID;
assign int_bias_be1           = WSTRB;
assign int_bias_d1            = WDATA;
// int_weight_0_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_0_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_0_BASE && raddr <= ADDR_WEIGHT_0_HIGH)
            int_weight_0_read <= 1'b1;
        else
            int_weight_0_read <= 1'b0;
    end
end

// int_weight_0_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_0_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_0_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_0_HIGH)
            int_weight_0_write <= 1'b1;
        else if (WVALID)
            int_weight_0_write <= 1'b0;
    end
end

// int_weight_1_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_1_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_1_BASE && raddr <= ADDR_WEIGHT_1_HIGH)
            int_weight_1_read <= 1'b1;
        else
            int_weight_1_read <= 1'b0;
    end
end

// int_weight_1_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_1_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_1_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_1_HIGH)
            int_weight_1_write <= 1'b1;
        else if (WVALID)
            int_weight_1_write <= 1'b0;
    end
end

// int_weight_2_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_2_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_2_BASE && raddr <= ADDR_WEIGHT_2_HIGH)
            int_weight_2_read <= 1'b1;
        else
            int_weight_2_read <= 1'b0;
    end
end

// int_weight_2_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_2_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_2_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_2_HIGH)
            int_weight_2_write <= 1'b1;
        else if (WVALID)
            int_weight_2_write <= 1'b0;
    end
end

// int_weight_3_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_3_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_3_BASE && raddr <= ADDR_WEIGHT_3_HIGH)
            int_weight_3_read <= 1'b1;
        else
            int_weight_3_read <= 1'b0;
    end
end

// int_weight_3_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_3_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_3_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_3_HIGH)
            int_weight_3_write <= 1'b1;
        else if (WVALID)
            int_weight_3_write <= 1'b0;
    end
end

// int_weight_4_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_4_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_4_BASE && raddr <= ADDR_WEIGHT_4_HIGH)
            int_weight_4_read <= 1'b1;
        else
            int_weight_4_read <= 1'b0;
    end
end

// int_weight_4_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_4_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_4_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_4_HIGH)
            int_weight_4_write <= 1'b1;
        else if (WVALID)
            int_weight_4_write <= 1'b0;
    end
end

// int_weight_5_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_5_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_5_BASE && raddr <= ADDR_WEIGHT_5_HIGH)
            int_weight_5_read <= 1'b1;
        else
            int_weight_5_read <= 1'b0;
    end
end

// int_weight_5_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_5_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_5_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_5_HIGH)
            int_weight_5_write <= 1'b1;
        else if (WVALID)
            int_weight_5_write <= 1'b0;
    end
end

// int_weight_6_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_6_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_6_BASE && raddr <= ADDR_WEIGHT_6_HIGH)
            int_weight_6_read <= 1'b1;
        else
            int_weight_6_read <= 1'b0;
    end
end

// int_weight_6_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_6_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_6_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_6_HIGH)
            int_weight_6_write <= 1'b1;
        else if (WVALID)
            int_weight_6_write <= 1'b0;
    end
end

// int_weight_7_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_7_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_7_BASE && raddr <= ADDR_WEIGHT_7_HIGH)
            int_weight_7_read <= 1'b1;
        else
            int_weight_7_read <= 1'b0;
    end
end

// int_weight_7_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_7_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_7_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_7_HIGH)
            int_weight_7_write <= 1'b1;
        else if (WVALID)
            int_weight_7_write <= 1'b0;
    end
end

// int_weight_8_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_8_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_8_BASE && raddr <= ADDR_WEIGHT_8_HIGH)
            int_weight_8_read <= 1'b1;
        else
            int_weight_8_read <= 1'b0;
    end
end

// int_weight_8_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_8_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_8_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_8_HIGH)
            int_weight_8_write <= 1'b1;
        else if (WVALID)
            int_weight_8_write <= 1'b0;
    end
end

// int_weight_9_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_9_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_9_BASE && raddr <= ADDR_WEIGHT_9_HIGH)
            int_weight_9_read <= 1'b1;
        else
            int_weight_9_read <= 1'b0;
    end
end

// int_weight_9_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_9_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_9_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_9_HIGH)
            int_weight_9_write <= 1'b1;
        else if (WVALID)
            int_weight_9_write <= 1'b0;
    end
end

// int_weight_10_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_10_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_10_BASE && raddr <= ADDR_WEIGHT_10_HIGH)
            int_weight_10_read <= 1'b1;
        else
            int_weight_10_read <= 1'b0;
    end
end

// int_weight_10_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_10_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_10_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_10_HIGH)
            int_weight_10_write <= 1'b1;
        else if (WVALID)
            int_weight_10_write <= 1'b0;
    end
end

// int_weight_11_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_11_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_11_BASE && raddr <= ADDR_WEIGHT_11_HIGH)
            int_weight_11_read <= 1'b1;
        else
            int_weight_11_read <= 1'b0;
    end
end

// int_weight_11_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_11_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_11_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_11_HIGH)
            int_weight_11_write <= 1'b1;
        else if (WVALID)
            int_weight_11_write <= 1'b0;
    end
end

// int_weight_12_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_12_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_12_BASE && raddr <= ADDR_WEIGHT_12_HIGH)
            int_weight_12_read <= 1'b1;
        else
            int_weight_12_read <= 1'b0;
    end
end

// int_weight_12_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_12_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_12_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_12_HIGH)
            int_weight_12_write <= 1'b1;
        else if (WVALID)
            int_weight_12_write <= 1'b0;
    end
end

// int_weight_13_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_13_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_13_BASE && raddr <= ADDR_WEIGHT_13_HIGH)
            int_weight_13_read <= 1'b1;
        else
            int_weight_13_read <= 1'b0;
    end
end

// int_weight_13_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_13_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_13_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_13_HIGH)
            int_weight_13_write <= 1'b1;
        else if (WVALID)
            int_weight_13_write <= 1'b0;
    end
end

// int_weight_14_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_14_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_14_BASE && raddr <= ADDR_WEIGHT_14_HIGH)
            int_weight_14_read <= 1'b1;
        else
            int_weight_14_read <= 1'b0;
    end
end

// int_weight_14_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_14_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_14_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_14_HIGH)
            int_weight_14_write <= 1'b1;
        else if (WVALID)
            int_weight_14_write <= 1'b0;
    end
end

// int_weight_15_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_15_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_15_BASE && raddr <= ADDR_WEIGHT_15_HIGH)
            int_weight_15_read <= 1'b1;
        else
            int_weight_15_read <= 1'b0;
    end
end

// int_weight_15_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_15_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_15_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_15_HIGH)
            int_weight_15_write <= 1'b1;
        else if (WVALID)
            int_weight_15_write <= 1'b0;
    end
end

// int_weight_16_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_16_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_16_BASE && raddr <= ADDR_WEIGHT_16_HIGH)
            int_weight_16_read <= 1'b1;
        else
            int_weight_16_read <= 1'b0;
    end
end

// int_weight_16_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_16_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_16_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_16_HIGH)
            int_weight_16_write <= 1'b1;
        else if (WVALID)
            int_weight_16_write <= 1'b0;
    end
end

// int_weight_17_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_17_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_17_BASE && raddr <= ADDR_WEIGHT_17_HIGH)
            int_weight_17_read <= 1'b1;
        else
            int_weight_17_read <= 1'b0;
    end
end

// int_weight_17_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_17_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_17_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_17_HIGH)
            int_weight_17_write <= 1'b1;
        else if (WVALID)
            int_weight_17_write <= 1'b0;
    end
end

// int_weight_18_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_18_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_18_BASE && raddr <= ADDR_WEIGHT_18_HIGH)
            int_weight_18_read <= 1'b1;
        else
            int_weight_18_read <= 1'b0;
    end
end

// int_weight_18_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_18_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_18_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_18_HIGH)
            int_weight_18_write <= 1'b1;
        else if (WVALID)
            int_weight_18_write <= 1'b0;
    end
end

// int_weight_19_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_19_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_19_BASE && raddr <= ADDR_WEIGHT_19_HIGH)
            int_weight_19_read <= 1'b1;
        else
            int_weight_19_read <= 1'b0;
    end
end

// int_weight_19_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_19_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_19_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_19_HIGH)
            int_weight_19_write <= 1'b1;
        else if (WVALID)
            int_weight_19_write <= 1'b0;
    end
end

// int_weight_20_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_20_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_20_BASE && raddr <= ADDR_WEIGHT_20_HIGH)
            int_weight_20_read <= 1'b1;
        else
            int_weight_20_read <= 1'b0;
    end
end

// int_weight_20_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_20_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_20_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_20_HIGH)
            int_weight_20_write <= 1'b1;
        else if (WVALID)
            int_weight_20_write <= 1'b0;
    end
end

// int_weight_21_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_21_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_21_BASE && raddr <= ADDR_WEIGHT_21_HIGH)
            int_weight_21_read <= 1'b1;
        else
            int_weight_21_read <= 1'b0;
    end
end

// int_weight_21_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_21_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_21_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_21_HIGH)
            int_weight_21_write <= 1'b1;
        else if (WVALID)
            int_weight_21_write <= 1'b0;
    end
end

// int_weight_22_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_22_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_22_BASE && raddr <= ADDR_WEIGHT_22_HIGH)
            int_weight_22_read <= 1'b1;
        else
            int_weight_22_read <= 1'b0;
    end
end

// int_weight_22_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_22_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_22_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_22_HIGH)
            int_weight_22_write <= 1'b1;
        else if (WVALID)
            int_weight_22_write <= 1'b0;
    end
end

// int_weight_23_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_23_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_23_BASE && raddr <= ADDR_WEIGHT_23_HIGH)
            int_weight_23_read <= 1'b1;
        else
            int_weight_23_read <= 1'b0;
    end
end

// int_weight_23_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_23_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_23_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_23_HIGH)
            int_weight_23_write <= 1'b1;
        else if (WVALID)
            int_weight_23_write <= 1'b0;
    end
end

// int_weight_24_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_24_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_24_BASE && raddr <= ADDR_WEIGHT_24_HIGH)
            int_weight_24_read <= 1'b1;
        else
            int_weight_24_read <= 1'b0;
    end
end

// int_weight_24_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_24_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_24_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_24_HIGH)
            int_weight_24_write <= 1'b1;
        else if (WVALID)
            int_weight_24_write <= 1'b0;
    end
end

// int_bias_read
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_BIAS_BASE && raddr <= ADDR_BIAS_HIGH)
            int_bias_read <= 1'b1;
        else
            int_bias_read <= 1'b0;
    end
end

// int_bias_write
always @(posedge ACLK) begin
    if (ARESET)
        int_bias_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_BIAS_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_BIAS_HIGH)
            int_bias_write <= 1'b1;
        else if (WVALID)
            int_bias_write <= 1'b0;
    end
end


endmodule


`timescale 1ns/1ps

module cnn_fc_i144_o50_CTRL_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

