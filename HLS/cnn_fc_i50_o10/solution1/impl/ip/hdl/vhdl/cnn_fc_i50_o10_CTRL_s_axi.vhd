-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity cnn_fc_i50_o10_CTRL_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 12;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    weight_0_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    weight_0_ce0          :in   STD_LOGIC;
    weight_0_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_1_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    weight_1_ce0          :in   STD_LOGIC;
    weight_1_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_2_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    weight_2_ce0          :in   STD_LOGIC;
    weight_2_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_3_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    weight_3_ce0          :in   STD_LOGIC;
    weight_3_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_4_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    weight_4_ce0          :in   STD_LOGIC;
    weight_4_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_5_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    weight_5_ce0          :in   STD_LOGIC;
    weight_5_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_6_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    weight_6_ce0          :in   STD_LOGIC;
    weight_6_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_7_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    weight_7_ce0          :in   STD_LOGIC;
    weight_7_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_8_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    weight_8_ce0          :in   STD_LOGIC;
    weight_8_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    weight_9_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
    weight_9_ce0          :in   STD_LOGIC;
    weight_9_q0           :out  STD_LOGIC_VECTOR(31 downto 0);
    bias_address0         :in   STD_LOGIC_VECTOR(3 downto 0);
    bias_ce0              :in   STD_LOGIC;
    bias_q0               :out  STD_LOGIC_VECTOR(31 downto 0);
    ctrl                  :out  STD_LOGIC_VECTOR(31 downto 0)
);
end entity cnn_fc_i50_o10_CTRL_s_axi;

-- ------------------------Address Info-------------------
-- 0x000 : Control signals
--         bit 0  - ap_start (Read/Write/COH)
--         bit 1  - ap_done (Read/COR)
--         bit 2  - ap_idle (Read)
--         bit 3  - ap_ready (Read)
--         bit 7  - auto_restart (Read/Write)
--         others - reserved
-- 0x004 : Global Interrupt Enable Register
--         bit 0  - Global Interrupt Enable (Read/Write)
--         others - reserved
-- 0x008 : IP Interrupt Enable Register (Read/Write)
--         bit 0  - Channel 0 (ap_done)
--         bit 1  - Channel 1 (ap_ready)
--         others - reserved
-- 0x00c : IP Interrupt Status Register (Read/TOW)
--         bit 0  - Channel 0 (ap_done)
--         bit 1  - Channel 1 (ap_ready)
--         others - reserved
-- 0xb40 : Data signal of ctrl
--         bit 31~0 - ctrl[31:0] (Read/Write)
-- 0xb44 : reserved
-- 0x100 ~
-- 0x1ff : Memory 'weight_0' (50 * 32b)
--         Word n : bit [31:0] - weight_0[n]
-- 0x200 ~
-- 0x2ff : Memory 'weight_1' (50 * 32b)
--         Word n : bit [31:0] - weight_1[n]
-- 0x300 ~
-- 0x3ff : Memory 'weight_2' (50 * 32b)
--         Word n : bit [31:0] - weight_2[n]
-- 0x400 ~
-- 0x4ff : Memory 'weight_3' (50 * 32b)
--         Word n : bit [31:0] - weight_3[n]
-- 0x500 ~
-- 0x5ff : Memory 'weight_4' (50 * 32b)
--         Word n : bit [31:0] - weight_4[n]
-- 0x600 ~
-- 0x6ff : Memory 'weight_5' (50 * 32b)
--         Word n : bit [31:0] - weight_5[n]
-- 0x700 ~
-- 0x7ff : Memory 'weight_6' (50 * 32b)
--         Word n : bit [31:0] - weight_6[n]
-- 0x800 ~
-- 0x8ff : Memory 'weight_7' (50 * 32b)
--         Word n : bit [31:0] - weight_7[n]
-- 0x900 ~
-- 0x9ff : Memory 'weight_8' (50 * 32b)
--         Word n : bit [31:0] - weight_8[n]
-- 0xa00 ~
-- 0xaff : Memory 'weight_9' (50 * 32b)
--         Word n : bit [31:0] - weight_9[n]
-- 0xb00 ~
-- 0xb3f : Memory 'bias' (10 * 32b)
--         Word n : bit [31:0] - bias[n]
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of cnn_fc_i50_o10_CTRL_s_axi is
    type states is (wridle, wrdata, wrresp, rdidle, rddata);  -- read and write fsm states
    signal wstate, wnext, rstate, rnext: states;
    constant ADDR_AP_CTRL       : INTEGER := 16#000#;
    constant ADDR_GIE           : INTEGER := 16#004#;
    constant ADDR_IER           : INTEGER := 16#008#;
    constant ADDR_ISR           : INTEGER := 16#00c#;
    constant ADDR_CTRL_DATA_0   : INTEGER := 16#b40#;
    constant ADDR_CTRL_CTRL     : INTEGER := 16#b44#;
    constant ADDR_WEIGHT_0_BASE : INTEGER := 16#100#;
    constant ADDR_WEIGHT_0_HIGH : INTEGER := 16#1ff#;
    constant ADDR_WEIGHT_1_BASE : INTEGER := 16#200#;
    constant ADDR_WEIGHT_1_HIGH : INTEGER := 16#2ff#;
    constant ADDR_WEIGHT_2_BASE : INTEGER := 16#300#;
    constant ADDR_WEIGHT_2_HIGH : INTEGER := 16#3ff#;
    constant ADDR_WEIGHT_3_BASE : INTEGER := 16#400#;
    constant ADDR_WEIGHT_3_HIGH : INTEGER := 16#4ff#;
    constant ADDR_WEIGHT_4_BASE : INTEGER := 16#500#;
    constant ADDR_WEIGHT_4_HIGH : INTEGER := 16#5ff#;
    constant ADDR_WEIGHT_5_BASE : INTEGER := 16#600#;
    constant ADDR_WEIGHT_5_HIGH : INTEGER := 16#6ff#;
    constant ADDR_WEIGHT_6_BASE : INTEGER := 16#700#;
    constant ADDR_WEIGHT_6_HIGH : INTEGER := 16#7ff#;
    constant ADDR_WEIGHT_7_BASE : INTEGER := 16#800#;
    constant ADDR_WEIGHT_7_HIGH : INTEGER := 16#8ff#;
    constant ADDR_WEIGHT_8_BASE : INTEGER := 16#900#;
    constant ADDR_WEIGHT_8_HIGH : INTEGER := 16#9ff#;
    constant ADDR_WEIGHT_9_BASE : INTEGER := 16#a00#;
    constant ADDR_WEIGHT_9_HIGH : INTEGER := 16#aff#;
    constant ADDR_BIAS_BASE     : INTEGER := 16#b00#;
    constant ADDR_BIAS_HIGH     : INTEGER := 16#b3f#;
    constant ADDR_BITS         : INTEGER := 12;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC;
    signal int_ap_start        : STD_LOGIC;
    signal int_auto_restart    : STD_LOGIC;
    signal int_gie             : STD_LOGIC;
    signal int_ier             : UNSIGNED(1 downto 0);
    signal int_isr             : UNSIGNED(1 downto 0);
    signal int_ctrl            : UNSIGNED(31 downto 0);
    -- memory signals
    signal int_weight_0_address0 : UNSIGNED(5 downto 0);
    signal int_weight_0_ce0    : STD_LOGIC;
    signal int_weight_0_we0    : STD_LOGIC;
    signal int_weight_0_be0    : UNSIGNED(3 downto 0);
    signal int_weight_0_d0     : UNSIGNED(31 downto 0);
    signal int_weight_0_q0     : UNSIGNED(31 downto 0);
    signal int_weight_0_address1 : UNSIGNED(5 downto 0);
    signal int_weight_0_ce1    : STD_LOGIC;
    signal int_weight_0_we1    : STD_LOGIC;
    signal int_weight_0_be1    : UNSIGNED(3 downto 0);
    signal int_weight_0_d1     : UNSIGNED(31 downto 0);
    signal int_weight_0_q1     : UNSIGNED(31 downto 0);
    signal int_weight_0_read   : STD_LOGIC;
    signal int_weight_0_write  : STD_LOGIC;
    signal int_weight_1_address0 : UNSIGNED(5 downto 0);
    signal int_weight_1_ce0    : STD_LOGIC;
    signal int_weight_1_we0    : STD_LOGIC;
    signal int_weight_1_be0    : UNSIGNED(3 downto 0);
    signal int_weight_1_d0     : UNSIGNED(31 downto 0);
    signal int_weight_1_q0     : UNSIGNED(31 downto 0);
    signal int_weight_1_address1 : UNSIGNED(5 downto 0);
    signal int_weight_1_ce1    : STD_LOGIC;
    signal int_weight_1_we1    : STD_LOGIC;
    signal int_weight_1_be1    : UNSIGNED(3 downto 0);
    signal int_weight_1_d1     : UNSIGNED(31 downto 0);
    signal int_weight_1_q1     : UNSIGNED(31 downto 0);
    signal int_weight_1_read   : STD_LOGIC;
    signal int_weight_1_write  : STD_LOGIC;
    signal int_weight_2_address0 : UNSIGNED(5 downto 0);
    signal int_weight_2_ce0    : STD_LOGIC;
    signal int_weight_2_we0    : STD_LOGIC;
    signal int_weight_2_be0    : UNSIGNED(3 downto 0);
    signal int_weight_2_d0     : UNSIGNED(31 downto 0);
    signal int_weight_2_q0     : UNSIGNED(31 downto 0);
    signal int_weight_2_address1 : UNSIGNED(5 downto 0);
    signal int_weight_2_ce1    : STD_LOGIC;
    signal int_weight_2_we1    : STD_LOGIC;
    signal int_weight_2_be1    : UNSIGNED(3 downto 0);
    signal int_weight_2_d1     : UNSIGNED(31 downto 0);
    signal int_weight_2_q1     : UNSIGNED(31 downto 0);
    signal int_weight_2_read   : STD_LOGIC;
    signal int_weight_2_write  : STD_LOGIC;
    signal int_weight_3_address0 : UNSIGNED(5 downto 0);
    signal int_weight_3_ce0    : STD_LOGIC;
    signal int_weight_3_we0    : STD_LOGIC;
    signal int_weight_3_be0    : UNSIGNED(3 downto 0);
    signal int_weight_3_d0     : UNSIGNED(31 downto 0);
    signal int_weight_3_q0     : UNSIGNED(31 downto 0);
    signal int_weight_3_address1 : UNSIGNED(5 downto 0);
    signal int_weight_3_ce1    : STD_LOGIC;
    signal int_weight_3_we1    : STD_LOGIC;
    signal int_weight_3_be1    : UNSIGNED(3 downto 0);
    signal int_weight_3_d1     : UNSIGNED(31 downto 0);
    signal int_weight_3_q1     : UNSIGNED(31 downto 0);
    signal int_weight_3_read   : STD_LOGIC;
    signal int_weight_3_write  : STD_LOGIC;
    signal int_weight_4_address0 : UNSIGNED(5 downto 0);
    signal int_weight_4_ce0    : STD_LOGIC;
    signal int_weight_4_we0    : STD_LOGIC;
    signal int_weight_4_be0    : UNSIGNED(3 downto 0);
    signal int_weight_4_d0     : UNSIGNED(31 downto 0);
    signal int_weight_4_q0     : UNSIGNED(31 downto 0);
    signal int_weight_4_address1 : UNSIGNED(5 downto 0);
    signal int_weight_4_ce1    : STD_LOGIC;
    signal int_weight_4_we1    : STD_LOGIC;
    signal int_weight_4_be1    : UNSIGNED(3 downto 0);
    signal int_weight_4_d1     : UNSIGNED(31 downto 0);
    signal int_weight_4_q1     : UNSIGNED(31 downto 0);
    signal int_weight_4_read   : STD_LOGIC;
    signal int_weight_4_write  : STD_LOGIC;
    signal int_weight_5_address0 : UNSIGNED(5 downto 0);
    signal int_weight_5_ce0    : STD_LOGIC;
    signal int_weight_5_we0    : STD_LOGIC;
    signal int_weight_5_be0    : UNSIGNED(3 downto 0);
    signal int_weight_5_d0     : UNSIGNED(31 downto 0);
    signal int_weight_5_q0     : UNSIGNED(31 downto 0);
    signal int_weight_5_address1 : UNSIGNED(5 downto 0);
    signal int_weight_5_ce1    : STD_LOGIC;
    signal int_weight_5_we1    : STD_LOGIC;
    signal int_weight_5_be1    : UNSIGNED(3 downto 0);
    signal int_weight_5_d1     : UNSIGNED(31 downto 0);
    signal int_weight_5_q1     : UNSIGNED(31 downto 0);
    signal int_weight_5_read   : STD_LOGIC;
    signal int_weight_5_write  : STD_LOGIC;
    signal int_weight_6_address0 : UNSIGNED(5 downto 0);
    signal int_weight_6_ce0    : STD_LOGIC;
    signal int_weight_6_we0    : STD_LOGIC;
    signal int_weight_6_be0    : UNSIGNED(3 downto 0);
    signal int_weight_6_d0     : UNSIGNED(31 downto 0);
    signal int_weight_6_q0     : UNSIGNED(31 downto 0);
    signal int_weight_6_address1 : UNSIGNED(5 downto 0);
    signal int_weight_6_ce1    : STD_LOGIC;
    signal int_weight_6_we1    : STD_LOGIC;
    signal int_weight_6_be1    : UNSIGNED(3 downto 0);
    signal int_weight_6_d1     : UNSIGNED(31 downto 0);
    signal int_weight_6_q1     : UNSIGNED(31 downto 0);
    signal int_weight_6_read   : STD_LOGIC;
    signal int_weight_6_write  : STD_LOGIC;
    signal int_weight_7_address0 : UNSIGNED(5 downto 0);
    signal int_weight_7_ce0    : STD_LOGIC;
    signal int_weight_7_we0    : STD_LOGIC;
    signal int_weight_7_be0    : UNSIGNED(3 downto 0);
    signal int_weight_7_d0     : UNSIGNED(31 downto 0);
    signal int_weight_7_q0     : UNSIGNED(31 downto 0);
    signal int_weight_7_address1 : UNSIGNED(5 downto 0);
    signal int_weight_7_ce1    : STD_LOGIC;
    signal int_weight_7_we1    : STD_LOGIC;
    signal int_weight_7_be1    : UNSIGNED(3 downto 0);
    signal int_weight_7_d1     : UNSIGNED(31 downto 0);
    signal int_weight_7_q1     : UNSIGNED(31 downto 0);
    signal int_weight_7_read   : STD_LOGIC;
    signal int_weight_7_write  : STD_LOGIC;
    signal int_weight_8_address0 : UNSIGNED(5 downto 0);
    signal int_weight_8_ce0    : STD_LOGIC;
    signal int_weight_8_we0    : STD_LOGIC;
    signal int_weight_8_be0    : UNSIGNED(3 downto 0);
    signal int_weight_8_d0     : UNSIGNED(31 downto 0);
    signal int_weight_8_q0     : UNSIGNED(31 downto 0);
    signal int_weight_8_address1 : UNSIGNED(5 downto 0);
    signal int_weight_8_ce1    : STD_LOGIC;
    signal int_weight_8_we1    : STD_LOGIC;
    signal int_weight_8_be1    : UNSIGNED(3 downto 0);
    signal int_weight_8_d1     : UNSIGNED(31 downto 0);
    signal int_weight_8_q1     : UNSIGNED(31 downto 0);
    signal int_weight_8_read   : STD_LOGIC;
    signal int_weight_8_write  : STD_LOGIC;
    signal int_weight_9_address0 : UNSIGNED(5 downto 0);
    signal int_weight_9_ce0    : STD_LOGIC;
    signal int_weight_9_we0    : STD_LOGIC;
    signal int_weight_9_be0    : UNSIGNED(3 downto 0);
    signal int_weight_9_d0     : UNSIGNED(31 downto 0);
    signal int_weight_9_q0     : UNSIGNED(31 downto 0);
    signal int_weight_9_address1 : UNSIGNED(5 downto 0);
    signal int_weight_9_ce1    : STD_LOGIC;
    signal int_weight_9_we1    : STD_LOGIC;
    signal int_weight_9_be1    : UNSIGNED(3 downto 0);
    signal int_weight_9_d1     : UNSIGNED(31 downto 0);
    signal int_weight_9_q1     : UNSIGNED(31 downto 0);
    signal int_weight_9_read   : STD_LOGIC;
    signal int_weight_9_write  : STD_LOGIC;
    signal int_bias_address0   : UNSIGNED(3 downto 0);
    signal int_bias_ce0        : STD_LOGIC;
    signal int_bias_we0        : STD_LOGIC;
    signal int_bias_be0        : UNSIGNED(3 downto 0);
    signal int_bias_d0         : UNSIGNED(31 downto 0);
    signal int_bias_q0         : UNSIGNED(31 downto 0);
    signal int_bias_address1   : UNSIGNED(3 downto 0);
    signal int_bias_ce1        : STD_LOGIC;
    signal int_bias_we1        : STD_LOGIC;
    signal int_bias_be1        : UNSIGNED(3 downto 0);
    signal int_bias_d1         : UNSIGNED(31 downto 0);
    signal int_bias_q1         : UNSIGNED(31 downto 0);
    signal int_bias_read       : STD_LOGIC;
    signal int_bias_write      : STD_LOGIC;

    component cnn_fc_i50_o10_CTRL_s_axi_ram is
        generic (
            BYTES   : INTEGER :=4;
            DEPTH   : INTEGER :=256;
            AWIDTH  : INTEGER :=8);
        port (
            clk0    : in  STD_LOGIC;
            address0: in  UNSIGNED(AWIDTH-1 downto 0);
            ce0     : in  STD_LOGIC;
            we0     : in  STD_LOGIC;
            be0     : in  UNSIGNED(BYTES-1 downto 0);
            d0      : in  UNSIGNED(BYTES*8-1 downto 0);
            q0      : out UNSIGNED(BYTES*8-1 downto 0);
            clk1    : in  STD_LOGIC;
            address1: in  UNSIGNED(AWIDTH-1 downto 0);
            ce1     : in  STD_LOGIC;
            we1     : in  STD_LOGIC;
            be1     : in  UNSIGNED(BYTES-1 downto 0);
            d1      : in  UNSIGNED(BYTES*8-1 downto 0);
            q1      : out UNSIGNED(BYTES*8-1 downto 0));
    end component cnn_fc_i50_o10_CTRL_s_axi_ram;

    function log2 (x : INTEGER) return INTEGER is
        variable n, m : INTEGER;
    begin
        n := 1;
        m := 2;
        while m < x loop
            n := n + 1;
            m := m * 2;
        end loop;
        return n;
    end function log2;

begin
-- ----------------------- Instantiation------------------
-- int_weight_0
int_weight_0 : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_weight_0_address0,
     ce0      => int_weight_0_ce0,
     we0      => int_weight_0_we0,
     be0      => int_weight_0_be0,
     d0       => int_weight_0_d0,
     q0       => int_weight_0_q0,
     clk1     => ACLK,
     address1 => int_weight_0_address1,
     ce1      => int_weight_0_ce1,
     we1      => int_weight_0_we1,
     be1      => int_weight_0_be1,
     d1       => int_weight_0_d1,
     q1       => int_weight_0_q1);
-- int_weight_1
int_weight_1 : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_weight_1_address0,
     ce0      => int_weight_1_ce0,
     we0      => int_weight_1_we0,
     be0      => int_weight_1_be0,
     d0       => int_weight_1_d0,
     q0       => int_weight_1_q0,
     clk1     => ACLK,
     address1 => int_weight_1_address1,
     ce1      => int_weight_1_ce1,
     we1      => int_weight_1_we1,
     be1      => int_weight_1_be1,
     d1       => int_weight_1_d1,
     q1       => int_weight_1_q1);
-- int_weight_2
int_weight_2 : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_weight_2_address0,
     ce0      => int_weight_2_ce0,
     we0      => int_weight_2_we0,
     be0      => int_weight_2_be0,
     d0       => int_weight_2_d0,
     q0       => int_weight_2_q0,
     clk1     => ACLK,
     address1 => int_weight_2_address1,
     ce1      => int_weight_2_ce1,
     we1      => int_weight_2_we1,
     be1      => int_weight_2_be1,
     d1       => int_weight_2_d1,
     q1       => int_weight_2_q1);
-- int_weight_3
int_weight_3 : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_weight_3_address0,
     ce0      => int_weight_3_ce0,
     we0      => int_weight_3_we0,
     be0      => int_weight_3_be0,
     d0       => int_weight_3_d0,
     q0       => int_weight_3_q0,
     clk1     => ACLK,
     address1 => int_weight_3_address1,
     ce1      => int_weight_3_ce1,
     we1      => int_weight_3_we1,
     be1      => int_weight_3_be1,
     d1       => int_weight_3_d1,
     q1       => int_weight_3_q1);
-- int_weight_4
int_weight_4 : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_weight_4_address0,
     ce0      => int_weight_4_ce0,
     we0      => int_weight_4_we0,
     be0      => int_weight_4_be0,
     d0       => int_weight_4_d0,
     q0       => int_weight_4_q0,
     clk1     => ACLK,
     address1 => int_weight_4_address1,
     ce1      => int_weight_4_ce1,
     we1      => int_weight_4_we1,
     be1      => int_weight_4_be1,
     d1       => int_weight_4_d1,
     q1       => int_weight_4_q1);
-- int_weight_5
int_weight_5 : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_weight_5_address0,
     ce0      => int_weight_5_ce0,
     we0      => int_weight_5_we0,
     be0      => int_weight_5_be0,
     d0       => int_weight_5_d0,
     q0       => int_weight_5_q0,
     clk1     => ACLK,
     address1 => int_weight_5_address1,
     ce1      => int_weight_5_ce1,
     we1      => int_weight_5_we1,
     be1      => int_weight_5_be1,
     d1       => int_weight_5_d1,
     q1       => int_weight_5_q1);
-- int_weight_6
int_weight_6 : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_weight_6_address0,
     ce0      => int_weight_6_ce0,
     we0      => int_weight_6_we0,
     be0      => int_weight_6_be0,
     d0       => int_weight_6_d0,
     q0       => int_weight_6_q0,
     clk1     => ACLK,
     address1 => int_weight_6_address1,
     ce1      => int_weight_6_ce1,
     we1      => int_weight_6_we1,
     be1      => int_weight_6_be1,
     d1       => int_weight_6_d1,
     q1       => int_weight_6_q1);
-- int_weight_7
int_weight_7 : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_weight_7_address0,
     ce0      => int_weight_7_ce0,
     we0      => int_weight_7_we0,
     be0      => int_weight_7_be0,
     d0       => int_weight_7_d0,
     q0       => int_weight_7_q0,
     clk1     => ACLK,
     address1 => int_weight_7_address1,
     ce1      => int_weight_7_ce1,
     we1      => int_weight_7_we1,
     be1      => int_weight_7_be1,
     d1       => int_weight_7_d1,
     q1       => int_weight_7_q1);
-- int_weight_8
int_weight_8 : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_weight_8_address0,
     ce0      => int_weight_8_ce0,
     we0      => int_weight_8_we0,
     be0      => int_weight_8_be0,
     d0       => int_weight_8_d0,
     q0       => int_weight_8_q0,
     clk1     => ACLK,
     address1 => int_weight_8_address1,
     ce1      => int_weight_8_ce1,
     we1      => int_weight_8_we1,
     be1      => int_weight_8_be1,
     d1       => int_weight_8_d1,
     q1       => int_weight_8_q1);
-- int_weight_9
int_weight_9 : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 50,
     AWIDTH   => log2(50))
port map (
     clk0     => ACLK,
     address0 => int_weight_9_address0,
     ce0      => int_weight_9_ce0,
     we0      => int_weight_9_we0,
     be0      => int_weight_9_be0,
     d0       => int_weight_9_d0,
     q0       => int_weight_9_q0,
     clk1     => ACLK,
     address1 => int_weight_9_address1,
     ce1      => int_weight_9_ce1,
     we1      => int_weight_9_we1,
     be1      => int_weight_9_be1,
     d1       => int_weight_9_d1,
     q1       => int_weight_9_q1);
-- int_bias
int_bias : cnn_fc_i50_o10_CTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 10,
     AWIDTH   => log2(10))
port map (
     clk0     => ACLK,
     address0 => int_bias_address0,
     ce0      => int_bias_ce0,
     we0      => int_bias_we0,
     be0      => int_bias_be0,
     d0       => int_bias_d0,
     q0       => int_bias_q0,
     clk1     => ACLK,
     address1 => int_bias_address1,
     ce1      => int_bias_ce1,
     we1      => int_bias_we1,
     be1      => int_bias_be1,
     d1       => int_bias_d1,
     q1       => int_bias_q1);

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  not ARESET and AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wridle;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= not ARESET and ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) and (int_weight_0_read = '0') and (int_weight_1_read = '0') and (int_weight_2_read = '0') and (int_weight_3_read = '0') and (int_weight_4_read = '0') and (int_weight_5_read = '0') and (int_weight_6_read = '0') and (int_weight_7_read = '0') and (int_weight_8_read = '0') and (int_weight_9_read = '0') and (int_bias_read = '0') else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdidle;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_AP_CTRL =>
                        rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                    when ADDR_GIE =>
                        rdata_data <= (0 => int_gie, others => '0');
                    when ADDR_IER =>
                        rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                    when ADDR_ISR =>
                        rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                    when ADDR_CTRL_DATA_0 =>
                        rdata_data <= RESIZE(int_ctrl(31 downto 0), 32);
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                elsif (int_weight_0_read = '1') then
                    rdata_data <= int_weight_0_q1;
                elsif (int_weight_1_read = '1') then
                    rdata_data <= int_weight_1_q1;
                elsif (int_weight_2_read = '1') then
                    rdata_data <= int_weight_2_q1;
                elsif (int_weight_3_read = '1') then
                    rdata_data <= int_weight_3_q1;
                elsif (int_weight_4_read = '1') then
                    rdata_data <= int_weight_4_q1;
                elsif (int_weight_5_read = '1') then
                    rdata_data <= int_weight_5_q1;
                elsif (int_weight_6_read = '1') then
                    rdata_data <= int_weight_6_q1;
                elsif (int_weight_7_read = '1') then
                    rdata_data <= int_weight_7_q1;
                elsif (int_weight_8_read = '1') then
                    rdata_data <= int_weight_8_q1;
                elsif (int_weight_9_read = '1') then
                    rdata_data <= int_weight_9_q1;
                elsif (int_bias_read = '1') then
                    rdata_data <= int_bias_q1;
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;
    int_ap_idle          <= ap_idle;
    int_ap_ready         <= ap_ready;
    ctrl                 <= STD_LOGIC_VECTOR(int_ctrl);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (int_ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CTRL_DATA_0) then
                    int_ctrl(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_ctrl(31 downto 0));
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------
    -- weight_0
    int_weight_0_address0 <= UNSIGNED(weight_0_address0);
    int_weight_0_ce0     <= weight_0_ce0;
    int_weight_0_we0     <= '0';
    int_weight_0_be0     <= (others => '0');
    int_weight_0_d0      <= (others => '0');
    weight_0_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_0_q0, 32));
    int_weight_0_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_weight_0_ce1     <= '1' when ar_hs = '1' or (int_weight_0_write = '1' and WVALID  = '1') else '0';
    int_weight_0_we1     <= '1' when int_weight_0_write = '1' and WVALID = '1' else '0';
    int_weight_0_be1     <= UNSIGNED(WSTRB);
    int_weight_0_d1      <= UNSIGNED(WDATA);
    -- weight_1
    int_weight_1_address0 <= UNSIGNED(weight_1_address0);
    int_weight_1_ce0     <= weight_1_ce0;
    int_weight_1_we0     <= '0';
    int_weight_1_be0     <= (others => '0');
    int_weight_1_d0      <= (others => '0');
    weight_1_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_1_q0, 32));
    int_weight_1_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_weight_1_ce1     <= '1' when ar_hs = '1' or (int_weight_1_write = '1' and WVALID  = '1') else '0';
    int_weight_1_we1     <= '1' when int_weight_1_write = '1' and WVALID = '1' else '0';
    int_weight_1_be1     <= UNSIGNED(WSTRB);
    int_weight_1_d1      <= UNSIGNED(WDATA);
    -- weight_2
    int_weight_2_address0 <= UNSIGNED(weight_2_address0);
    int_weight_2_ce0     <= weight_2_ce0;
    int_weight_2_we0     <= '0';
    int_weight_2_be0     <= (others => '0');
    int_weight_2_d0      <= (others => '0');
    weight_2_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_2_q0, 32));
    int_weight_2_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_weight_2_ce1     <= '1' when ar_hs = '1' or (int_weight_2_write = '1' and WVALID  = '1') else '0';
    int_weight_2_we1     <= '1' when int_weight_2_write = '1' and WVALID = '1' else '0';
    int_weight_2_be1     <= UNSIGNED(WSTRB);
    int_weight_2_d1      <= UNSIGNED(WDATA);
    -- weight_3
    int_weight_3_address0 <= UNSIGNED(weight_3_address0);
    int_weight_3_ce0     <= weight_3_ce0;
    int_weight_3_we0     <= '0';
    int_weight_3_be0     <= (others => '0');
    int_weight_3_d0      <= (others => '0');
    weight_3_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_3_q0, 32));
    int_weight_3_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_weight_3_ce1     <= '1' when ar_hs = '1' or (int_weight_3_write = '1' and WVALID  = '1') else '0';
    int_weight_3_we1     <= '1' when int_weight_3_write = '1' and WVALID = '1' else '0';
    int_weight_3_be1     <= UNSIGNED(WSTRB);
    int_weight_3_d1      <= UNSIGNED(WDATA);
    -- weight_4
    int_weight_4_address0 <= UNSIGNED(weight_4_address0);
    int_weight_4_ce0     <= weight_4_ce0;
    int_weight_4_we0     <= '0';
    int_weight_4_be0     <= (others => '0');
    int_weight_4_d0      <= (others => '0');
    weight_4_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_4_q0, 32));
    int_weight_4_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_weight_4_ce1     <= '1' when ar_hs = '1' or (int_weight_4_write = '1' and WVALID  = '1') else '0';
    int_weight_4_we1     <= '1' when int_weight_4_write = '1' and WVALID = '1' else '0';
    int_weight_4_be1     <= UNSIGNED(WSTRB);
    int_weight_4_d1      <= UNSIGNED(WDATA);
    -- weight_5
    int_weight_5_address0 <= UNSIGNED(weight_5_address0);
    int_weight_5_ce0     <= weight_5_ce0;
    int_weight_5_we0     <= '0';
    int_weight_5_be0     <= (others => '0');
    int_weight_5_d0      <= (others => '0');
    weight_5_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_5_q0, 32));
    int_weight_5_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_weight_5_ce1     <= '1' when ar_hs = '1' or (int_weight_5_write = '1' and WVALID  = '1') else '0';
    int_weight_5_we1     <= '1' when int_weight_5_write = '1' and WVALID = '1' else '0';
    int_weight_5_be1     <= UNSIGNED(WSTRB);
    int_weight_5_d1      <= UNSIGNED(WDATA);
    -- weight_6
    int_weight_6_address0 <= UNSIGNED(weight_6_address0);
    int_weight_6_ce0     <= weight_6_ce0;
    int_weight_6_we0     <= '0';
    int_weight_6_be0     <= (others => '0');
    int_weight_6_d0      <= (others => '0');
    weight_6_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_6_q0, 32));
    int_weight_6_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_weight_6_ce1     <= '1' when ar_hs = '1' or (int_weight_6_write = '1' and WVALID  = '1') else '0';
    int_weight_6_we1     <= '1' when int_weight_6_write = '1' and WVALID = '1' else '0';
    int_weight_6_be1     <= UNSIGNED(WSTRB);
    int_weight_6_d1      <= UNSIGNED(WDATA);
    -- weight_7
    int_weight_7_address0 <= UNSIGNED(weight_7_address0);
    int_weight_7_ce0     <= weight_7_ce0;
    int_weight_7_we0     <= '0';
    int_weight_7_be0     <= (others => '0');
    int_weight_7_d0      <= (others => '0');
    weight_7_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_7_q0, 32));
    int_weight_7_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_weight_7_ce1     <= '1' when ar_hs = '1' or (int_weight_7_write = '1' and WVALID  = '1') else '0';
    int_weight_7_we1     <= '1' when int_weight_7_write = '1' and WVALID = '1' else '0';
    int_weight_7_be1     <= UNSIGNED(WSTRB);
    int_weight_7_d1      <= UNSIGNED(WDATA);
    -- weight_8
    int_weight_8_address0 <= UNSIGNED(weight_8_address0);
    int_weight_8_ce0     <= weight_8_ce0;
    int_weight_8_we0     <= '0';
    int_weight_8_be0     <= (others => '0');
    int_weight_8_d0      <= (others => '0');
    weight_8_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_8_q0, 32));
    int_weight_8_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_weight_8_ce1     <= '1' when ar_hs = '1' or (int_weight_8_write = '1' and WVALID  = '1') else '0';
    int_weight_8_we1     <= '1' when int_weight_8_write = '1' and WVALID = '1' else '0';
    int_weight_8_be1     <= UNSIGNED(WSTRB);
    int_weight_8_d1      <= UNSIGNED(WDATA);
    -- weight_9
    int_weight_9_address0 <= UNSIGNED(weight_9_address0);
    int_weight_9_ce0     <= weight_9_ce0;
    int_weight_9_we0     <= '0';
    int_weight_9_be0     <= (others => '0');
    int_weight_9_d0      <= (others => '0');
    weight_9_q0          <= STD_LOGIC_VECTOR(RESIZE(int_weight_9_q0, 32));
    int_weight_9_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_weight_9_ce1     <= '1' when ar_hs = '1' or (int_weight_9_write = '1' and WVALID  = '1') else '0';
    int_weight_9_we1     <= '1' when int_weight_9_write = '1' and WVALID = '1' else '0';
    int_weight_9_be1     <= UNSIGNED(WSTRB);
    int_weight_9_d1      <= UNSIGNED(WDATA);
    -- bias
    int_bias_address0    <= UNSIGNED(bias_address0);
    int_bias_ce0         <= bias_ce0;
    int_bias_we0         <= '0';
    int_bias_be0         <= (others => '0');
    int_bias_d0          <= (others => '0');
    bias_q0              <= STD_LOGIC_VECTOR(RESIZE(int_bias_q0, 32));
    int_bias_address1    <= raddr(5 downto 2) when ar_hs = '1' else waddr(5 downto 2);
    int_bias_ce1         <= '1' when ar_hs = '1' or (int_bias_write = '1' and WVALID  = '1') else '0';
    int_bias_we1         <= '1' when int_bias_write = '1' and WVALID = '1' else '0';
    int_bias_be1         <= UNSIGNED(WSTRB);
    int_bias_d1          <= UNSIGNED(WDATA);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_0_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_0_BASE and raddr <= ADDR_WEIGHT_0_HIGH) then
                    int_weight_0_read <= '1';
                else
                    int_weight_0_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_0_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_0_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_0_HIGH) then
                    int_weight_0_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_0_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_1_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_1_BASE and raddr <= ADDR_WEIGHT_1_HIGH) then
                    int_weight_1_read <= '1';
                else
                    int_weight_1_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_1_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_1_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_1_HIGH) then
                    int_weight_1_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_1_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_2_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_2_BASE and raddr <= ADDR_WEIGHT_2_HIGH) then
                    int_weight_2_read <= '1';
                else
                    int_weight_2_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_2_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_2_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_2_HIGH) then
                    int_weight_2_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_2_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_3_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_3_BASE and raddr <= ADDR_WEIGHT_3_HIGH) then
                    int_weight_3_read <= '1';
                else
                    int_weight_3_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_3_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_3_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_3_HIGH) then
                    int_weight_3_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_3_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_4_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_4_BASE and raddr <= ADDR_WEIGHT_4_HIGH) then
                    int_weight_4_read <= '1';
                else
                    int_weight_4_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_4_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_4_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_4_HIGH) then
                    int_weight_4_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_4_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_5_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_5_BASE and raddr <= ADDR_WEIGHT_5_HIGH) then
                    int_weight_5_read <= '1';
                else
                    int_weight_5_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_5_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_5_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_5_HIGH) then
                    int_weight_5_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_5_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_6_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_6_BASE and raddr <= ADDR_WEIGHT_6_HIGH) then
                    int_weight_6_read <= '1';
                else
                    int_weight_6_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_6_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_6_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_6_HIGH) then
                    int_weight_6_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_6_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_7_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_7_BASE and raddr <= ADDR_WEIGHT_7_HIGH) then
                    int_weight_7_read <= '1';
                else
                    int_weight_7_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_7_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_7_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_7_HIGH) then
                    int_weight_7_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_7_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_8_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_8_BASE and raddr <= ADDR_WEIGHT_8_HIGH) then
                    int_weight_8_read <= '1';
                else
                    int_weight_8_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_8_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_8_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_8_HIGH) then
                    int_weight_8_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_8_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_9_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_9_BASE and raddr <= ADDR_WEIGHT_9_HIGH) then
                    int_weight_9_read <= '1';
                else
                    int_weight_9_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_9_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_9_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_9_HIGH) then
                    int_weight_9_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_9_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_bias_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BIAS_BASE and raddr <= ADDR_BIAS_HIGH) then
                    int_bias_read <= '1';
                else
                    int_bias_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_bias_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BIAS_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BIAS_HIGH) then
                    int_bias_write <= '1';
                elsif (WVALID = '1') then
                    int_bias_write <= '0';
                end if;
            end if;
        end if;
    end process;


end architecture behave;

library IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.all;

entity cnn_fc_i50_o10_CTRL_s_axi_ram is
    generic (
        BYTES   : INTEGER :=4;
        DEPTH   : INTEGER :=256;
        AWIDTH  : INTEGER :=8);
    port (
        clk0    : in  STD_LOGIC;
        address0: in  UNSIGNED(AWIDTH-1 downto 0);
        ce0     : in  STD_LOGIC;
        we0     : in  STD_LOGIC;
        be0     : in  UNSIGNED(BYTES-1 downto 0);
        d0      : in  UNSIGNED(BYTES*8-1 downto 0);
        q0      : out UNSIGNED(BYTES*8-1 downto 0);
        clk1    : in  STD_LOGIC;
        address1: in  UNSIGNED(AWIDTH-1 downto 0);
        ce1     : in  STD_LOGIC;
        we1     : in  STD_LOGIC;
        be1     : in  UNSIGNED(BYTES-1 downto 0);
        d1      : in  UNSIGNED(BYTES*8-1 downto 0);
        q1      : out UNSIGNED(BYTES*8-1 downto 0));

end entity cnn_fc_i50_o10_CTRL_s_axi_ram;

architecture behave of cnn_fc_i50_o10_CTRL_s_axi_ram is
    signal address0_tmp : UNSIGNED(AWIDTH-1 downto 0);
    signal address1_tmp : UNSIGNED(AWIDTH-1 downto 0);
    type RAM_T is array (0 to DEPTH - 1) of UNSIGNED(BYTES*8 - 1 downto 0);
    shared variable mem : RAM_T := (others => (others => '0'));
begin

    process (address0)
    begin
    address0_tmp <= address0;
    --synthesis translate_off
          if (address0 > DEPTH-1) then
              address0_tmp <= (others => '0');
          else
              address0_tmp <= address0;
          end if;
    --synthesis translate_on
    end process;

    process (address1)
    begin
    address1_tmp <= address1;
    --synthesis translate_off
          if (address1 > DEPTH-1) then
              address1_tmp <= (others => '0');
          else
              address1_tmp <= address1;
          end if;
    --synthesis translate_on
    end process;

    --read port 0
    process (clk0) begin
        if (clk0'event and clk0 = '1') then
            if (ce0 = '1') then
                q0 <= mem(to_integer(address0_tmp));
            end if;
        end if;
    end process;

    --read port 1
    process (clk1) begin
        if (clk1'event and clk1 = '1') then
            if (ce1 = '1') then
                q1 <= mem(to_integer(address1_tmp));
            end if;
        end if;
    end process;

    gen_write : for i in 0 to BYTES - 1 generate
    begin
        --write port 0
        process (clk0)
        begin
            if (clk0'event and clk0 = '1') then
                if (ce0 = '1' and we0 = '1' and be0(i) = '1') then
                    mem(to_integer(address0_tmp))(8*i+7 downto 8*i) := d0(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

        --write port 1
        process (clk1)
        begin
            if (clk1'event and clk1 = '1') then
                if (ce1 = '1' and we1 = '1' and be1(i) = '1') then
                    mem(to_integer(address1_tmp))(8*i+7 downto 8*i) := d1(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

    end generate;

end architecture behave;


