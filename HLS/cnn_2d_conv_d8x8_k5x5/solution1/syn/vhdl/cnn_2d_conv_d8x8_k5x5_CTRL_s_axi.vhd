-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity cnn_2d_conv_d8x8_k5x5_CTRL_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 8;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    ctrl                  :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_0          :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_1          :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_2          :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_3          :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_4          :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_5          :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_6          :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_7          :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_8          :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_9          :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_10         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_11         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_12         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_13         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_14         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_15         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_16         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_17         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_18         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_19         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_20         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_21         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_22         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_23         :out  STD_LOGIC_VECTOR(31 downto 0);
    kernelData_24         :out  STD_LOGIC_VECTOR(31 downto 0)
);
end entity cnn_2d_conv_d8x8_k5x5_CTRL_s_axi;

-- ------------------------Address Info-------------------
-- 0x00 : Control signals
--        bit 0  - ap_start (Read/Write/COH)
--        bit 1  - ap_done (Read/COR)
--        bit 2  - ap_idle (Read)
--        bit 3  - ap_ready (Read)
--        bit 7  - auto_restart (Read/Write)
--        others - reserved
-- 0x04 : Global Interrupt Enable Register
--        bit 0  - Global Interrupt Enable (Read/Write)
--        others - reserved
-- 0x08 : IP Interrupt Enable Register (Read/Write)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x0c : IP Interrupt Status Register (Read/TOW)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x10 : Data signal of ctrl
--        bit 31~0 - ctrl[31:0] (Read/Write)
-- 0x14 : reserved
-- 0x18 : Data signal of kernelData_0
--        bit 31~0 - kernelData_0[31:0] (Read/Write)
-- 0x1c : reserved
-- 0x20 : Data signal of kernelData_1
--        bit 31~0 - kernelData_1[31:0] (Read/Write)
-- 0x24 : reserved
-- 0x28 : Data signal of kernelData_2
--        bit 31~0 - kernelData_2[31:0] (Read/Write)
-- 0x2c : reserved
-- 0x30 : Data signal of kernelData_3
--        bit 31~0 - kernelData_3[31:0] (Read/Write)
-- 0x34 : reserved
-- 0x38 : Data signal of kernelData_4
--        bit 31~0 - kernelData_4[31:0] (Read/Write)
-- 0x3c : reserved
-- 0x40 : Data signal of kernelData_5
--        bit 31~0 - kernelData_5[31:0] (Read/Write)
-- 0x44 : reserved
-- 0x48 : Data signal of kernelData_6
--        bit 31~0 - kernelData_6[31:0] (Read/Write)
-- 0x4c : reserved
-- 0x50 : Data signal of kernelData_7
--        bit 31~0 - kernelData_7[31:0] (Read/Write)
-- 0x54 : reserved
-- 0x58 : Data signal of kernelData_8
--        bit 31~0 - kernelData_8[31:0] (Read/Write)
-- 0x5c : reserved
-- 0x60 : Data signal of kernelData_9
--        bit 31~0 - kernelData_9[31:0] (Read/Write)
-- 0x64 : reserved
-- 0x68 : Data signal of kernelData_10
--        bit 31~0 - kernelData_10[31:0] (Read/Write)
-- 0x6c : reserved
-- 0x70 : Data signal of kernelData_11
--        bit 31~0 - kernelData_11[31:0] (Read/Write)
-- 0x74 : reserved
-- 0x78 : Data signal of kernelData_12
--        bit 31~0 - kernelData_12[31:0] (Read/Write)
-- 0x7c : reserved
-- 0x80 : Data signal of kernelData_13
--        bit 31~0 - kernelData_13[31:0] (Read/Write)
-- 0x84 : reserved
-- 0x88 : Data signal of kernelData_14
--        bit 31~0 - kernelData_14[31:0] (Read/Write)
-- 0x8c : reserved
-- 0x90 : Data signal of kernelData_15
--        bit 31~0 - kernelData_15[31:0] (Read/Write)
-- 0x94 : reserved
-- 0x98 : Data signal of kernelData_16
--        bit 31~0 - kernelData_16[31:0] (Read/Write)
-- 0x9c : reserved
-- 0xa0 : Data signal of kernelData_17
--        bit 31~0 - kernelData_17[31:0] (Read/Write)
-- 0xa4 : reserved
-- 0xa8 : Data signal of kernelData_18
--        bit 31~0 - kernelData_18[31:0] (Read/Write)
-- 0xac : reserved
-- 0xb0 : Data signal of kernelData_19
--        bit 31~0 - kernelData_19[31:0] (Read/Write)
-- 0xb4 : reserved
-- 0xb8 : Data signal of kernelData_20
--        bit 31~0 - kernelData_20[31:0] (Read/Write)
-- 0xbc : reserved
-- 0xc0 : Data signal of kernelData_21
--        bit 31~0 - kernelData_21[31:0] (Read/Write)
-- 0xc4 : reserved
-- 0xc8 : Data signal of kernelData_22
--        bit 31~0 - kernelData_22[31:0] (Read/Write)
-- 0xcc : reserved
-- 0xd0 : Data signal of kernelData_23
--        bit 31~0 - kernelData_23[31:0] (Read/Write)
-- 0xd4 : reserved
-- 0xd8 : Data signal of kernelData_24
--        bit 31~0 - kernelData_24[31:0] (Read/Write)
-- 0xdc : reserved
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of cnn_2d_conv_d8x8_k5x5_CTRL_s_axi is
    type states is (wridle, wrdata, wrresp, rdidle, rddata);  -- read and write fsm states
    signal wstate, wnext, rstate, rnext: states;
    constant ADDR_AP_CTRL              : INTEGER := 16#00#;
    constant ADDR_GIE                  : INTEGER := 16#04#;
    constant ADDR_IER                  : INTEGER := 16#08#;
    constant ADDR_ISR                  : INTEGER := 16#0c#;
    constant ADDR_CTRL_DATA_0          : INTEGER := 16#10#;
    constant ADDR_CTRL_CTRL            : INTEGER := 16#14#;
    constant ADDR_KERNELDATA_0_DATA_0  : INTEGER := 16#18#;
    constant ADDR_KERNELDATA_0_CTRL    : INTEGER := 16#1c#;
    constant ADDR_KERNELDATA_1_DATA_0  : INTEGER := 16#20#;
    constant ADDR_KERNELDATA_1_CTRL    : INTEGER := 16#24#;
    constant ADDR_KERNELDATA_2_DATA_0  : INTEGER := 16#28#;
    constant ADDR_KERNELDATA_2_CTRL    : INTEGER := 16#2c#;
    constant ADDR_KERNELDATA_3_DATA_0  : INTEGER := 16#30#;
    constant ADDR_KERNELDATA_3_CTRL    : INTEGER := 16#34#;
    constant ADDR_KERNELDATA_4_DATA_0  : INTEGER := 16#38#;
    constant ADDR_KERNELDATA_4_CTRL    : INTEGER := 16#3c#;
    constant ADDR_KERNELDATA_5_DATA_0  : INTEGER := 16#40#;
    constant ADDR_KERNELDATA_5_CTRL    : INTEGER := 16#44#;
    constant ADDR_KERNELDATA_6_DATA_0  : INTEGER := 16#48#;
    constant ADDR_KERNELDATA_6_CTRL    : INTEGER := 16#4c#;
    constant ADDR_KERNELDATA_7_DATA_0  : INTEGER := 16#50#;
    constant ADDR_KERNELDATA_7_CTRL    : INTEGER := 16#54#;
    constant ADDR_KERNELDATA_8_DATA_0  : INTEGER := 16#58#;
    constant ADDR_KERNELDATA_8_CTRL    : INTEGER := 16#5c#;
    constant ADDR_KERNELDATA_9_DATA_0  : INTEGER := 16#60#;
    constant ADDR_KERNELDATA_9_CTRL    : INTEGER := 16#64#;
    constant ADDR_KERNELDATA_10_DATA_0 : INTEGER := 16#68#;
    constant ADDR_KERNELDATA_10_CTRL   : INTEGER := 16#6c#;
    constant ADDR_KERNELDATA_11_DATA_0 : INTEGER := 16#70#;
    constant ADDR_KERNELDATA_11_CTRL   : INTEGER := 16#74#;
    constant ADDR_KERNELDATA_12_DATA_0 : INTEGER := 16#78#;
    constant ADDR_KERNELDATA_12_CTRL   : INTEGER := 16#7c#;
    constant ADDR_KERNELDATA_13_DATA_0 : INTEGER := 16#80#;
    constant ADDR_KERNELDATA_13_CTRL   : INTEGER := 16#84#;
    constant ADDR_KERNELDATA_14_DATA_0 : INTEGER := 16#88#;
    constant ADDR_KERNELDATA_14_CTRL   : INTEGER := 16#8c#;
    constant ADDR_KERNELDATA_15_DATA_0 : INTEGER := 16#90#;
    constant ADDR_KERNELDATA_15_CTRL   : INTEGER := 16#94#;
    constant ADDR_KERNELDATA_16_DATA_0 : INTEGER := 16#98#;
    constant ADDR_KERNELDATA_16_CTRL   : INTEGER := 16#9c#;
    constant ADDR_KERNELDATA_17_DATA_0 : INTEGER := 16#a0#;
    constant ADDR_KERNELDATA_17_CTRL   : INTEGER := 16#a4#;
    constant ADDR_KERNELDATA_18_DATA_0 : INTEGER := 16#a8#;
    constant ADDR_KERNELDATA_18_CTRL   : INTEGER := 16#ac#;
    constant ADDR_KERNELDATA_19_DATA_0 : INTEGER := 16#b0#;
    constant ADDR_KERNELDATA_19_CTRL   : INTEGER := 16#b4#;
    constant ADDR_KERNELDATA_20_DATA_0 : INTEGER := 16#b8#;
    constant ADDR_KERNELDATA_20_CTRL   : INTEGER := 16#bc#;
    constant ADDR_KERNELDATA_21_DATA_0 : INTEGER := 16#c0#;
    constant ADDR_KERNELDATA_21_CTRL   : INTEGER := 16#c4#;
    constant ADDR_KERNELDATA_22_DATA_0 : INTEGER := 16#c8#;
    constant ADDR_KERNELDATA_22_CTRL   : INTEGER := 16#cc#;
    constant ADDR_KERNELDATA_23_DATA_0 : INTEGER := 16#d0#;
    constant ADDR_KERNELDATA_23_CTRL   : INTEGER := 16#d4#;
    constant ADDR_KERNELDATA_24_DATA_0 : INTEGER := 16#d8#;
    constant ADDR_KERNELDATA_24_CTRL   : INTEGER := 16#dc#;
    constant ADDR_BITS         : INTEGER := 8;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC;
    signal int_ap_start        : STD_LOGIC;
    signal int_auto_restart    : STD_LOGIC;
    signal int_gie             : STD_LOGIC;
    signal int_ier             : UNSIGNED(1 downto 0);
    signal int_isr             : UNSIGNED(1 downto 0);
    signal int_ctrl            : UNSIGNED(31 downto 0);
    signal int_kernelData_0    : UNSIGNED(31 downto 0);
    signal int_kernelData_1    : UNSIGNED(31 downto 0);
    signal int_kernelData_2    : UNSIGNED(31 downto 0);
    signal int_kernelData_3    : UNSIGNED(31 downto 0);
    signal int_kernelData_4    : UNSIGNED(31 downto 0);
    signal int_kernelData_5    : UNSIGNED(31 downto 0);
    signal int_kernelData_6    : UNSIGNED(31 downto 0);
    signal int_kernelData_7    : UNSIGNED(31 downto 0);
    signal int_kernelData_8    : UNSIGNED(31 downto 0);
    signal int_kernelData_9    : UNSIGNED(31 downto 0);
    signal int_kernelData_10   : UNSIGNED(31 downto 0);
    signal int_kernelData_11   : UNSIGNED(31 downto 0);
    signal int_kernelData_12   : UNSIGNED(31 downto 0);
    signal int_kernelData_13   : UNSIGNED(31 downto 0);
    signal int_kernelData_14   : UNSIGNED(31 downto 0);
    signal int_kernelData_15   : UNSIGNED(31 downto 0);
    signal int_kernelData_16   : UNSIGNED(31 downto 0);
    signal int_kernelData_17   : UNSIGNED(31 downto 0);
    signal int_kernelData_18   : UNSIGNED(31 downto 0);
    signal int_kernelData_19   : UNSIGNED(31 downto 0);
    signal int_kernelData_20   : UNSIGNED(31 downto 0);
    signal int_kernelData_21   : UNSIGNED(31 downto 0);
    signal int_kernelData_22   : UNSIGNED(31 downto 0);
    signal int_kernelData_23   : UNSIGNED(31 downto 0);
    signal int_kernelData_24   : UNSIGNED(31 downto 0);


begin
-- ----------------------- Instantiation------------------

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  not ARESET and AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wridle;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= not ARESET and ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdidle;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_AP_CTRL =>
                        rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                    when ADDR_GIE =>
                        rdata_data <= (0 => int_gie, others => '0');
                    when ADDR_IER =>
                        rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                    when ADDR_ISR =>
                        rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                    when ADDR_CTRL_DATA_0 =>
                        rdata_data <= RESIZE(int_ctrl(31 downto 0), 32);
                    when ADDR_KERNELDATA_0_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_0(31 downto 0), 32);
                    when ADDR_KERNELDATA_1_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_1(31 downto 0), 32);
                    when ADDR_KERNELDATA_2_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_2(31 downto 0), 32);
                    when ADDR_KERNELDATA_3_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_3(31 downto 0), 32);
                    when ADDR_KERNELDATA_4_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_4(31 downto 0), 32);
                    when ADDR_KERNELDATA_5_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_5(31 downto 0), 32);
                    when ADDR_KERNELDATA_6_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_6(31 downto 0), 32);
                    when ADDR_KERNELDATA_7_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_7(31 downto 0), 32);
                    when ADDR_KERNELDATA_8_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_8(31 downto 0), 32);
                    when ADDR_KERNELDATA_9_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_9(31 downto 0), 32);
                    when ADDR_KERNELDATA_10_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_10(31 downto 0), 32);
                    when ADDR_KERNELDATA_11_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_11(31 downto 0), 32);
                    when ADDR_KERNELDATA_12_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_12(31 downto 0), 32);
                    when ADDR_KERNELDATA_13_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_13(31 downto 0), 32);
                    when ADDR_KERNELDATA_14_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_14(31 downto 0), 32);
                    when ADDR_KERNELDATA_15_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_15(31 downto 0), 32);
                    when ADDR_KERNELDATA_16_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_16(31 downto 0), 32);
                    when ADDR_KERNELDATA_17_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_17(31 downto 0), 32);
                    when ADDR_KERNELDATA_18_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_18(31 downto 0), 32);
                    when ADDR_KERNELDATA_19_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_19(31 downto 0), 32);
                    when ADDR_KERNELDATA_20_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_20(31 downto 0), 32);
                    when ADDR_KERNELDATA_21_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_21(31 downto 0), 32);
                    when ADDR_KERNELDATA_22_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_22(31 downto 0), 32);
                    when ADDR_KERNELDATA_23_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_23(31 downto 0), 32);
                    when ADDR_KERNELDATA_24_DATA_0 =>
                        rdata_data <= RESIZE(int_kernelData_24(31 downto 0), 32);
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;
    int_ap_idle          <= ap_idle;
    int_ap_ready         <= ap_ready;
    ctrl                 <= STD_LOGIC_VECTOR(int_ctrl);
    kernelData_0         <= STD_LOGIC_VECTOR(int_kernelData_0);
    kernelData_1         <= STD_LOGIC_VECTOR(int_kernelData_1);
    kernelData_2         <= STD_LOGIC_VECTOR(int_kernelData_2);
    kernelData_3         <= STD_LOGIC_VECTOR(int_kernelData_3);
    kernelData_4         <= STD_LOGIC_VECTOR(int_kernelData_4);
    kernelData_5         <= STD_LOGIC_VECTOR(int_kernelData_5);
    kernelData_6         <= STD_LOGIC_VECTOR(int_kernelData_6);
    kernelData_7         <= STD_LOGIC_VECTOR(int_kernelData_7);
    kernelData_8         <= STD_LOGIC_VECTOR(int_kernelData_8);
    kernelData_9         <= STD_LOGIC_VECTOR(int_kernelData_9);
    kernelData_10        <= STD_LOGIC_VECTOR(int_kernelData_10);
    kernelData_11        <= STD_LOGIC_VECTOR(int_kernelData_11);
    kernelData_12        <= STD_LOGIC_VECTOR(int_kernelData_12);
    kernelData_13        <= STD_LOGIC_VECTOR(int_kernelData_13);
    kernelData_14        <= STD_LOGIC_VECTOR(int_kernelData_14);
    kernelData_15        <= STD_LOGIC_VECTOR(int_kernelData_15);
    kernelData_16        <= STD_LOGIC_VECTOR(int_kernelData_16);
    kernelData_17        <= STD_LOGIC_VECTOR(int_kernelData_17);
    kernelData_18        <= STD_LOGIC_VECTOR(int_kernelData_18);
    kernelData_19        <= STD_LOGIC_VECTOR(int_kernelData_19);
    kernelData_20        <= STD_LOGIC_VECTOR(int_kernelData_20);
    kernelData_21        <= STD_LOGIC_VECTOR(int_kernelData_21);
    kernelData_22        <= STD_LOGIC_VECTOR(int_kernelData_22);
    kernelData_23        <= STD_LOGIC_VECTOR(int_kernelData_23);
    kernelData_24        <= STD_LOGIC_VECTOR(int_kernelData_24);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (int_ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CTRL_DATA_0) then
                    int_ctrl(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_ctrl(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_0_DATA_0) then
                    int_kernelData_0(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_0(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_1_DATA_0) then
                    int_kernelData_1(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_1(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_2_DATA_0) then
                    int_kernelData_2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_3_DATA_0) then
                    int_kernelData_3(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_3(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_4_DATA_0) then
                    int_kernelData_4(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_4(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_5_DATA_0) then
                    int_kernelData_5(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_5(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_6_DATA_0) then
                    int_kernelData_6(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_6(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_7_DATA_0) then
                    int_kernelData_7(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_7(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_8_DATA_0) then
                    int_kernelData_8(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_8(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_9_DATA_0) then
                    int_kernelData_9(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_9(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_10_DATA_0) then
                    int_kernelData_10(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_10(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_11_DATA_0) then
                    int_kernelData_11(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_11(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_12_DATA_0) then
                    int_kernelData_12(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_12(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_13_DATA_0) then
                    int_kernelData_13(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_13(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_14_DATA_0) then
                    int_kernelData_14(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_14(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_15_DATA_0) then
                    int_kernelData_15(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_15(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_16_DATA_0) then
                    int_kernelData_16(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_16(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_17_DATA_0) then
                    int_kernelData_17(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_17(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_18_DATA_0) then
                    int_kernelData_18(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_18(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_19_DATA_0) then
                    int_kernelData_19(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_19(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_20_DATA_0) then
                    int_kernelData_20(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_20(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_21_DATA_0) then
                    int_kernelData_21(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_21(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_22_DATA_0) then
                    int_kernelData_22(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_22(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_23_DATA_0) then
                    int_kernelData_23(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_23(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELDATA_24_DATA_0) then
                    int_kernelData_24(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelData_24(31 downto 0));
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------

end architecture behave;
