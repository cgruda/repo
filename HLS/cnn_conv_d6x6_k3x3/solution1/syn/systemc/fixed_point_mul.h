// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fixed_point_mul_HH_
#define _fixed_point_mul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cnn_conv_d6x6_k3xbkb.h"

namespace ap_rtl {

struct fixed_point_mul : public sc_module {
    // Port declarations 6
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > a;
    sc_in< sc_lv<32> > b;
    sc_out< sc_lv<23> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    fixed_point_mul(sc_module_name name);
    SC_HAS_PROCESS(fixed_point_mul);

    ~fixed_point_mul();

    sc_trace_file* mVcdFile;

    cnn_conv_d6x6_k3xbkb<1,6,32,32,32>* cnn_conv_d6x6_k3xbkb_U0;
    sc_signal< sc_lv<32> > b_read_reg_117;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter1_b_read_reg_117;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter2_b_read_reg_117;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter3_b_read_reg_117;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter4_b_read_reg_117;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter5_b_read_reg_117;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter6_b_read_reg_117;
    sc_signal< sc_lv<32> > a_read_reg_122;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter1_a_read_reg_122;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter2_a_read_reg_122;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter3_a_read_reg_122;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter4_a_read_reg_122;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter5_a_read_reg_122;
    sc_signal< sc_lv<32> > ap_pipeline_reg_pp0_iter6_a_read_reg_122;
    sc_signal< sc_lv<32> > a_assign_fu_44_p3;
    sc_signal< sc_lv<32> > a_assign_reg_127;
    sc_signal< sc_lv<32> > b_assign_fu_66_p3;
    sc_signal< sc_lv<32> > b_assign_reg_132;
    sc_signal< sc_lv<22> > tmp_1_reg_137;
    sc_signal< sc_lv<1> > tmp_2_fu_30_p3;
    sc_signal< sc_lv<32> > tmp_3_fu_38_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_52_p3;
    sc_signal< sc_lv<32> > tmp_5_fu_60_p2;
    sc_signal< sc_lv<32> > grp_fu_74_p2;
    sc_signal< sc_lv<32> > tmp_fu_88_p2;
    sc_signal< sc_lv<23> > result_cast_fu_92_p1;
    sc_signal< sc_lv<1> > tmp_7_fu_95_p3;
    sc_signal< sc_lv<23> > tmp_8_fu_103_p2;
    sc_signal< sc_logic > grp_fu_74_ce;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<23> ap_const_lv23_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_assign_fu_44_p3();
    void thread_ap_return();
    void thread_b_assign_fu_66_p3();
    void thread_grp_fu_74_ce();
    void thread_result_cast_fu_92_p1();
    void thread_tmp_2_fu_30_p3();
    void thread_tmp_3_fu_38_p2();
    void thread_tmp_4_fu_52_p3();
    void thread_tmp_5_fu_60_p2();
    void thread_tmp_7_fu_95_p3();
    void thread_tmp_8_fu_103_p2();
    void thread_tmp_fu_88_p2();
};

}

using namespace ap_rtl;

#endif
