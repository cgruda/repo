// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fixed_point_mul.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fixed_point_mul::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fixed_point_mul::ap_const_logic_0 = sc_dt::Log_0;
const bool fixed_point_mul::ap_const_boolean_1 = true;
const sc_lv<32> fixed_point_mul::ap_const_lv32_1F = "11111";
const sc_lv<32> fixed_point_mul::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fixed_point_mul::ap_const_lv32_A = "1010";
const sc_lv<23> fixed_point_mul::ap_const_lv23_0 = "00000000000000000000000";

fixed_point_mul::fixed_point_mul(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cnn_conv_d64x64_kbkb_U0 = new cnn_conv_d64x64_kbkb<1,6,32,32,32>("cnn_conv_d64x64_kbkb_U0");
    cnn_conv_d64x64_kbkb_U0->clk(ap_clk);
    cnn_conv_d64x64_kbkb_U0->reset(ap_rst);
    cnn_conv_d64x64_kbkb_U0->din0(b_assign_reg_132);
    cnn_conv_d64x64_kbkb_U0->din1(a_assign_reg_127);
    cnn_conv_d64x64_kbkb_U0->ce(grp_fu_74_ce);
    cnn_conv_d64x64_kbkb_U0->dout(grp_fu_74_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_assign_fu_44_p3);
    sensitive << ( a );
    sensitive << ( tmp_2_fu_30_p3 );
    sensitive << ( tmp_3_fu_38_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_ce );
    sensitive << ( result_cast_fu_92_p1 );
    sensitive << ( tmp_7_fu_95_p3 );
    sensitive << ( tmp_8_fu_103_p2 );

    SC_METHOD(thread_b_assign_fu_66_p3);
    sensitive << ( b );
    sensitive << ( tmp_4_fu_52_p3 );
    sensitive << ( tmp_5_fu_60_p2 );

    SC_METHOD(thread_grp_fu_74_ce);
    sensitive << ( ap_ce );

    SC_METHOD(thread_result_cast_fu_92_p1);
    sensitive << ( tmp_1_reg_137 );

    SC_METHOD(thread_tmp_2_fu_30_p3);
    sensitive << ( a );

    SC_METHOD(thread_tmp_3_fu_38_p2);
    sensitive << ( a );

    SC_METHOD(thread_tmp_4_fu_52_p3);
    sensitive << ( b );

    SC_METHOD(thread_tmp_5_fu_60_p2);
    sensitive << ( b );

    SC_METHOD(thread_tmp_7_fu_95_p3);
    sensitive << ( tmp_fu_88_p2 );

    SC_METHOD(thread_tmp_8_fu_103_p2);
    sensitive << ( result_cast_fu_92_p1 );

    SC_METHOD(thread_tmp_fu_88_p2);
    sensitive << ( ap_pipeline_reg_pp0_iter6_b_read_reg_117 );
    sensitive << ( ap_pipeline_reg_pp0_iter6_a_read_reg_122 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fixed_point_mul_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, b_read_reg_117, "b_read_reg_117");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_b_read_reg_117, "ap_pipeline_reg_pp0_iter1_b_read_reg_117");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_b_read_reg_117, "ap_pipeline_reg_pp0_iter2_b_read_reg_117");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_b_read_reg_117, "ap_pipeline_reg_pp0_iter3_b_read_reg_117");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_b_read_reg_117, "ap_pipeline_reg_pp0_iter4_b_read_reg_117");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter5_b_read_reg_117, "ap_pipeline_reg_pp0_iter5_b_read_reg_117");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter6_b_read_reg_117, "ap_pipeline_reg_pp0_iter6_b_read_reg_117");
    sc_trace(mVcdFile, a_read_reg_122, "a_read_reg_122");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_a_read_reg_122, "ap_pipeline_reg_pp0_iter1_a_read_reg_122");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter2_a_read_reg_122, "ap_pipeline_reg_pp0_iter2_a_read_reg_122");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter3_a_read_reg_122, "ap_pipeline_reg_pp0_iter3_a_read_reg_122");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter4_a_read_reg_122, "ap_pipeline_reg_pp0_iter4_a_read_reg_122");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter5_a_read_reg_122, "ap_pipeline_reg_pp0_iter5_a_read_reg_122");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter6_a_read_reg_122, "ap_pipeline_reg_pp0_iter6_a_read_reg_122");
    sc_trace(mVcdFile, a_assign_fu_44_p3, "a_assign_fu_44_p3");
    sc_trace(mVcdFile, a_assign_reg_127, "a_assign_reg_127");
    sc_trace(mVcdFile, b_assign_fu_66_p3, "b_assign_fu_66_p3");
    sc_trace(mVcdFile, b_assign_reg_132, "b_assign_reg_132");
    sc_trace(mVcdFile, tmp_1_reg_137, "tmp_1_reg_137");
    sc_trace(mVcdFile, tmp_2_fu_30_p3, "tmp_2_fu_30_p3");
    sc_trace(mVcdFile, tmp_3_fu_38_p2, "tmp_3_fu_38_p2");
    sc_trace(mVcdFile, tmp_4_fu_52_p3, "tmp_4_fu_52_p3");
    sc_trace(mVcdFile, tmp_5_fu_60_p2, "tmp_5_fu_60_p2");
    sc_trace(mVcdFile, grp_fu_74_p2, "grp_fu_74_p2");
    sc_trace(mVcdFile, tmp_fu_88_p2, "tmp_fu_88_p2");
    sc_trace(mVcdFile, result_cast_fu_92_p1, "result_cast_fu_92_p1");
    sc_trace(mVcdFile, tmp_7_fu_95_p3, "tmp_7_fu_95_p3");
    sc_trace(mVcdFile, tmp_8_fu_103_p2, "tmp_8_fu_103_p2");
    sc_trace(mVcdFile, grp_fu_74_ce, "grp_fu_74_ce");
#endif

    }
}

fixed_point_mul::~fixed_point_mul() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete cnn_conv_d64x64_kbkb_U0;
}

void fixed_point_mul::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
        a_assign_reg_127 = a_assign_fu_44_p3.read();
        a_read_reg_122 = a.read();
        ap_pipeline_reg_pp0_iter1_a_read_reg_122 = a_read_reg_122.read();
        ap_pipeline_reg_pp0_iter1_b_read_reg_117 = b_read_reg_117.read();
        ap_pipeline_reg_pp0_iter2_a_read_reg_122 = ap_pipeline_reg_pp0_iter1_a_read_reg_122.read();
        ap_pipeline_reg_pp0_iter2_b_read_reg_117 = ap_pipeline_reg_pp0_iter1_b_read_reg_117.read();
        ap_pipeline_reg_pp0_iter3_a_read_reg_122 = ap_pipeline_reg_pp0_iter2_a_read_reg_122.read();
        ap_pipeline_reg_pp0_iter3_b_read_reg_117 = ap_pipeline_reg_pp0_iter2_b_read_reg_117.read();
        ap_pipeline_reg_pp0_iter4_a_read_reg_122 = ap_pipeline_reg_pp0_iter3_a_read_reg_122.read();
        ap_pipeline_reg_pp0_iter4_b_read_reg_117 = ap_pipeline_reg_pp0_iter3_b_read_reg_117.read();
        ap_pipeline_reg_pp0_iter5_a_read_reg_122 = ap_pipeline_reg_pp0_iter4_a_read_reg_122.read();
        ap_pipeline_reg_pp0_iter5_b_read_reg_117 = ap_pipeline_reg_pp0_iter4_b_read_reg_117.read();
        ap_pipeline_reg_pp0_iter6_a_read_reg_122 = ap_pipeline_reg_pp0_iter5_a_read_reg_122.read();
        ap_pipeline_reg_pp0_iter6_b_read_reg_117 = ap_pipeline_reg_pp0_iter5_b_read_reg_117.read();
        b_assign_reg_132 = b_assign_fu_66_p3.read();
        b_read_reg_117 = b.read();
        tmp_1_reg_137 = grp_fu_74_p2.read().range(31, 10);
    }
}

void fixed_point_mul::thread_a_assign_fu_44_p3() {
    a_assign_fu_44_p3 = (!tmp_2_fu_30_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_2_fu_30_p3.read()[0].to_bool())? tmp_3_fu_38_p2.read(): a.read());
}

void fixed_point_mul::thread_ap_return() {
    ap_return = (!tmp_7_fu_95_p3.read()[0].is_01())? sc_lv<23>(): ((tmp_7_fu_95_p3.read()[0].to_bool())? tmp_8_fu_103_p2.read(): result_cast_fu_92_p1.read());
}

void fixed_point_mul::thread_b_assign_fu_66_p3() {
    b_assign_fu_66_p3 = (!tmp_4_fu_52_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_4_fu_52_p3.read()[0].to_bool())? tmp_5_fu_60_p2.read(): b.read());
}

void fixed_point_mul::thread_grp_fu_74_ce() {
    if (!esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
        grp_fu_74_ce = ap_const_logic_0;
    } else {
        grp_fu_74_ce = ap_const_logic_1;
    }
}

void fixed_point_mul::thread_result_cast_fu_92_p1() {
    result_cast_fu_92_p1 = esl_zext<23,22>(tmp_1_reg_137.read());
}

void fixed_point_mul::thread_tmp_2_fu_30_p3() {
    tmp_2_fu_30_p3 = a.read().range(31, 31);
}

void fixed_point_mul::thread_tmp_3_fu_38_p2() {
    tmp_3_fu_38_p2 = (!ap_const_lv32_0.is_01() || !a.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(a.read()));
}

void fixed_point_mul::thread_tmp_4_fu_52_p3() {
    tmp_4_fu_52_p3 = b.read().range(31, 31);
}

void fixed_point_mul::thread_tmp_5_fu_60_p2() {
    tmp_5_fu_60_p2 = (!ap_const_lv32_0.is_01() || !b.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(b.read()));
}

void fixed_point_mul::thread_tmp_7_fu_95_p3() {
    tmp_7_fu_95_p3 = tmp_fu_88_p2.read().range(31, 31);
}

void fixed_point_mul::thread_tmp_8_fu_103_p2() {
    tmp_8_fu_103_p2 = (!ap_const_lv23_0.is_01() || !result_cast_fu_92_p1.read().is_01())? sc_lv<23>(): (sc_biguint<23>(ap_const_lv23_0) - sc_biguint<23>(result_cast_fu_92_p1.read()));
}

void fixed_point_mul::thread_tmp_fu_88_p2() {
    tmp_fu_88_p2 = (ap_pipeline_reg_pp0_iter6_b_read_reg_117.read() ^ ap_pipeline_reg_pp0_iter6_a_read_reg_122.read());
}

}

